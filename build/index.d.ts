export declare function load(): Promise<Module>;
export type Pointer<T> = number & {
    type: T;
};
export type LLVMBool = 1 | 0;
export type LLVMStringRef = Pointer<"LLVMStringRef">;
export type LLVMMemoryBufferRef = Pointer<"LLVMMemoryBufferRef">;
export type LLVMContextRef = Pointer<"LLVMContextRef">;
export type LLVMModuleRef = Pointer<"LLVMModuleRef">;
export type LLVMTypeRef = Pointer<"LLVMTypeRef">;
export type LLVMValueRef = Pointer<"LLVMValueRef">;
export type LLVMBasicBlockRef = Pointer<"LLVMBasicBlockRef">;
export type LLVMMetadataRef = Pointer<"LLVMMetadataRef">;
export type LLVMNamedMDNodeRef = Pointer<"LLVMNamedMDNodeRef">;
export type LLVMValueMetadataEntry = Pointer<"LLVMValueMetadataEntry">;
export type LLVMBuilderRef = Pointer<"LLVMBuilderRef">;
export type LLVMDIBuilderRef = Pointer<"LLVMDIBuilderRef">;
export type LLVMModuleProviderRef = Pointer<"LLVMModuleProviderRef">;
export type LLVMPassManagerRef = Pointer<"LLVMPassManagerRef">;
export type LLVMPassRegistryRef = Pointer<"LLVMPassRegistryRef">;
export type LLVMUseRef = Pointer<"LLVMUseRef">;
export type LLVMAttributeRef = Pointer<"LLVMAttributeRef">;
export type LLVMDiagnosticInfoRef = Pointer<"LLVMDiagnosticInfoRef">;
export type LLVMComdatRef = Pointer<"LLVMComdatRef">;
export type LLVMModuleFlagEntry = Pointer<"LLVMModuleFlagEntry">;
export type LLVMJITEventListenerRef = Pointer<"LLVMJITEventListenerRef">;
export type LLVMBinaryRef = Pointer<"LLVMBinaryRef">;
export type LLVMVerifierFailureAction = Pointer<"LLVMVerifierFailureAction">;
export type LLVMComdatSelectionKind = Pointer<"LLVMComdatSelectionKind">;
export type LLVMFatalErrorHandler = Pointer<"LLVMFatalErrorHandler">;
export type LLVMOpcode = Pointer<"LLVMOpcode">;
export type LLVMTypeKind = Pointer<"LLVMTypeKind">;
export type LLVMLinkage = Pointer<"LLVMLinkage">;
export type LLVMVisibility = Pointer<"LLVMVisibility">;
export type LLVMUnnamedAddr = Pointer<"LLVMUnnamedAddr">;
export type LLVMDLLStorageClass = Pointer<"LLVMDLLStorageClass">;
export type LLVMCallConv = Pointer<"LLVMCallConv">;
export type LLVMValueKind = Pointer<"LLVMValueKind">;
export type LLVMIntPredicate = Pointer<"LLVMIntPredicate">;
export type LLVMRealPredicate = Pointer<"LLVMRealPredicate">;
export type LLVMLandingPadClauseTy = Pointer<"LLVMLandingPadClauseTy">;
export type LLVMThreadLocalMode = Pointer<"LLVMThreadLocalMode">;
export type LLVMAtomicOrdering = Pointer<"LLVMAtomicOrdering">;
export type LLVMAtomicRMWBinOp = Pointer<"LLVMAtomicRMWBinOp">;
export type LLVMDiagnosticSeverity = Pointer<"LLVMDiagnosticSeverity">;
export type LLVMInlineAsmDialect = Pointer<"LLVMInlineAsmDialect">;
export type LLVMModuleFlagBehavior = Pointer<"LLVMModuleFlagBehavior">;
export type LLVMAttributeIndex = Pointer<"LLVMAttributeIndex">;
export type LLVMDiagnosticHandler = Pointer<"LLVMDiagnosticHandler">;
export type LLVMYieldCallback = Pointer<"LLVMYieldCallback">;
export type LLVMDIFlags = Pointer<"LLVMDIFlags">;
export type LLVMDWARFSourceLanguage = Pointer<"LLVMDWARFSourceLanguage">;
export type LLVMDWARFEmissionKind = Pointer<"LLVMDWARFEmissionKind">;
export type LLVMMetadataKind = Pointer<"LLVMMetadataKind">;
export type LLVMDWARFTypeEncoding = Pointer<"LLVMDWARFTypeEncoding">;
export type LLVMDWARFMacinfoRecordType = Pointer<"LLVMDWARFMacinfoRecordType">;
export type LLVMDisasmContextRef = Pointer<"LLVMDisasmContextRef">;
export type LLVMOpInfoCallback = Pointer<"LLVMOpInfoCallback">;
export type LLVMSymbolLookupCallback = Pointer<"LLVMSymbolLookupCallback">;
export type LLVMErrorRef = Pointer<"LLVMErrorRef">;
export type LLVMErrorTypeId = Pointer<"LLVMErrorTypeId">;
export type LLVMTargetDataRef = Pointer<"LLVMTargetDataRef">;
export type LLVMTargetLibraryInfoRef = Pointer<"LLVMTargetLibraryInfoRef">;
export type LLVMTargetMachineRef = Pointer<"LLVMTargetMachineRef">;
export type LLVMTargetRef = Pointer<"LLVMTargetRef">;
export type LLVMCodeGenOptLevel = Pointer<"LLVMCodeGenOptLevel">;
export type LLVMRelocMode = Pointer<"LLVMRelocMode">;
export type LLVMCodeModel = Pointer<"LLVMCodeModel">;
export type LLVMCodeGenFileType = Pointer<"LLVMCodeGenFileType">;
export type LLVMGenericValueRef = Pointer<"LLVMGenericValueRef">;
export type LLVMExecutionEngineRef = Pointer<"LLVMExecutionEngineRef">;
export type LLVMMCJITMemoryManagerRef = Pointer<"LLVMMCJITMemoryManagerRef">;
export type LLVMMemoryManagerAllocateCodeSectionCallback = Pointer<"LLVMMemoryManagerAllocateCodeSectionCallback">;
export type LLVMMemoryManagerAllocateDataSectionCallback = Pointer<"LLVMMemoryManagerAllocateDataSectionCallback">;
export type LLVMMemoryManagerFinalizeMemoryCallback = Pointer<"LLVMMemoryManagerFinalizeMemoryCallback">;
export type LLVMMemoryManagerDestroyCallback = Pointer<"LLVMMemoryManagerDestroyCallback">;
export type LLVMLinkerMode = Pointer<"LLVMLinkerMode">;
export type LLVMSectionIteratorRef = Pointer<"LLVMSectionIteratorRef">;
export type LLVMSymbolIteratorRef = Pointer<"LLVMSymbolIteratorRef">;
export type LLVMRelocationIteratorRef = Pointer<"LLVMRelocationIteratorRef">;
export type LLVMBinaryType = Pointer<"LLVMBinaryType">;
export type LLVMObjectFileRef = Pointer<"LLVMObjectFileRef">;
export interface Module {
    HEAPU8: Uint8Array;
    HEAPU32: Uint32Array;
    ready: Promise<Module>;
    _malloc<T>(size: number): Pointer<T>;
    _free(ptr: Pointer<any>): void;
    _LLVMVerifyModule(Module: LLVMModuleRef, Action: LLVMVerifierFailureAction, OutMessage: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMVerifyFunction(Fn: LLVMValueRef, Action: LLVMVerifierFailureAction): LLVMBool;
    _LLVMViewFunctionCFG(Fn: LLVMValueRef): void;
    _LLVMViewFunctionCFGOnly(Fn: LLVMValueRef): void;
    _LLVMParseBitcode(MemBuf: LLVMMemoryBufferRef, OutModule: Pointer<LLVMModuleRef[]>, OutMessage: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMParseBitcode2(MemBuf: LLVMMemoryBufferRef, OutModule: Pointer<LLVMModuleRef[]>): LLVMBool;
    _LLVMParseBitcodeInContext(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutModule: Pointer<LLVMModuleRef[]>, OutMessage: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMParseBitcodeInContext2(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutModule: Pointer<LLVMModuleRef[]>): LLVMBool;
    _LLVMGetBitcodeModuleInContext(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: Pointer<LLVMModuleRef[]>, OutMessage: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMGetBitcodeModuleInContext2(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: Pointer<LLVMModuleRef[]>): LLVMBool;
    _LLVMGetBitcodeModule(MemBuf: LLVMMemoryBufferRef, OutM: Pointer<LLVMModuleRef[]>, OutMessage: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMGetBitcodeModule2(MemBuf: LLVMMemoryBufferRef, OutM: Pointer<LLVMModuleRef[]>): LLVMBool;
    _LLVMWriteBitcodeToFile(Module: LLVMModuleRef, Path: LLVMStringRef): number;
    _LLVMWriteBitcodeToFD(Module: LLVMModuleRef, FD: number, ShouldClose: number, Unbuffered: number): number;
    _LLVMWriteBitcodeToFileHandle(Module: LLVMModuleRef, Handle: number): number;
    _LLVMWriteBitcodeToMemoryBuffer(Module: LLVMModuleRef): LLVMMemoryBufferRef;
    _LLVMGetOrInsertComdat(Module: LLVMModuleRef, Name: LLVMStringRef): LLVMComdatRef;
    _LLVMGetComdat(V: LLVMValueRef): LLVMComdatRef;
    _LLVMSetComdat(V: LLVMValueRef, Context: LLVMComdatRef): void;
    _LLVMGetComdatSelectionKind(Context: LLVMComdatRef): LLVMComdatSelectionKind;
    _LLVMSetComdatSelectionKind(Context: LLVMComdatRef, Kind: LLVMComdatSelectionKind): void;
    _LLVMInstallFatalErrorHandler(Handler: LLVMFatalErrorHandler): void;
    _LLVMResetFatalErrorHandler(): void;
    _LLVMEnablePrettyStackTrace(): void;
    _LLVMInitializeCore(R: LLVMPassRegistryRef): void;
    _LLVMShutdown(): void;
    _LLVMGetVersion(Major: Pointer<number>, Minor: Pointer<number>, Patch: Pointer<number>): void;
    _LLVMCreateMessage(Message: LLVMStringRef): LLVMStringRef;
    _LLVMDisposeMessage(Message: LLVMStringRef): void;
    _LLVMContextCreate(): LLVMContextRef;
    _LLVMGetGlobalContext(): LLVMContextRef;
    _LLVMContextSetDiagnosticHandler(Context: LLVMContextRef, Handler: LLVMDiagnosticHandler, DiagnosticContext: Pointer<any>): void;
    _LLVMContextGetDiagnosticHandler(Context: LLVMContextRef): LLVMDiagnosticHandler;
    _LLVMContextGetDiagnosticContext(Context: LLVMContextRef): Pointer<any>;
    _LLVMContextSetYieldCallback(Context: LLVMContextRef, Callback: LLVMYieldCallback, OpaqueHandle: Pointer<any>): void;
    _LLVMContextShouldDiscardValueNames(Context: LLVMContextRef): LLVMBool;
    _LLVMContextSetDiscardValueNames(Context: LLVMContextRef, Discard: LLVMBool): void;
    _LLVMContextSetOpaquePointers(Context: LLVMContextRef, OpaquePointers: LLVMBool): void;
    _LLVMContextDispose(Context: LLVMContextRef): void;
    _LLVMGetDiagInfoDescription(DI: LLVMDiagnosticInfoRef): LLVMStringRef;
    _LLVMGetDiagInfoSeverity(DI: LLVMDiagnosticInfoRef): LLVMDiagnosticSeverity;
    _LLVMGetMDKindIDInContext(Context: LLVMContextRef, Name: LLVMStringRef, SLen: number): number;
    _LLVMGetMDKindID(Name: LLVMStringRef, SLen: number): number;
    _LLVMGetEnumAttributeKindForName(Name: LLVMStringRef, SLen: number): number;
    _LLVMGetLastEnumAttributeKind(): number;
    _LLVMCreateEnumAttribute(Context: LLVMContextRef, KindID: number, Val: number): LLVMAttributeRef;
    _LLVMGetEnumAttributeKind(A: LLVMAttributeRef): number;
    _LLVMGetEnumAttributeValue(A: LLVMAttributeRef): number;
    _LLVMCreateTypeAttribute(Context: LLVMContextRef, KindID: number, type_ref: LLVMTypeRef): LLVMAttributeRef;
    _LLVMGetTypeAttributeValue(A: LLVMAttributeRef): LLVMTypeRef;
    _LLVMCreateStringAttribute(Context: LLVMContextRef, K: LLVMStringRef, KLength: number, V: LLVMStringRef, VLength: number): LLVMAttributeRef;
    _LLVMGetStringAttributeKind(A: LLVMAttributeRef, Length: Pointer<number>): LLVMStringRef;
    _LLVMGetStringAttributeValue(A: LLVMAttributeRef, Length: Pointer<number>): LLVMStringRef;
    _LLVMIsEnumAttribute(A: LLVMAttributeRef): LLVMBool;
    _LLVMIsStringAttribute(A: LLVMAttributeRef): LLVMBool;
    _LLVMIsTypeAttribute(A: LLVMAttributeRef): LLVMBool;
    _LLVMGetTypeByName2(Context: LLVMContextRef, Name: LLVMStringRef): LLVMTypeRef;
    _LLVMModuleCreateWithName(ModuleID: LLVMStringRef): LLVMModuleRef;
    _LLVMModuleCreateWithNameInContext(ModuleID: LLVMStringRef, Context: LLVMContextRef): LLVMModuleRef;
    _LLVMCloneModule(Module: LLVMModuleRef): LLVMModuleRef;
    _LLVMDisposeModule(Module: LLVMModuleRef): void;
    _LLVMGetModuleIdentifier(Module: LLVMModuleRef, Len: Pointer<number>): LLVMStringRef;
    _LLVMSetModuleIdentifier(Module: LLVMModuleRef, Ident: LLVMStringRef, Len: number): void;
    _LLVMGetSourceFileName(Module: LLVMModuleRef, Len: Pointer<number>): LLVMStringRef;
    _LLVMSetSourceFileName(Module: LLVMModuleRef, Name: LLVMStringRef, Len: number): void;
    _LLVMGetDataLayoutStr(Module: LLVMModuleRef): LLVMStringRef;
    _LLVMGetDataLayout(Module: LLVMModuleRef): LLVMStringRef;
    _LLVMSetDataLayout(Module: LLVMModuleRef, DataLayoutStr: LLVMStringRef): void;
    _LLVMGetTarget(Module: LLVMModuleRef): LLVMStringRef;
    _LLVMSetTarget(Module: LLVMModuleRef, Triple: LLVMStringRef): void;
    _LLVMCopyModuleFlagsMetadata(Module: LLVMModuleRef, Len: Pointer<number>): Pointer<LLVMModuleFlagEntry[]>;
    _LLVMDisposeModuleFlagsMetadata(Entries: Pointer<LLVMModuleFlagEntry[]>): void;
    _LLVMModuleFlagEntriesGetFlagBehavior(Entries: Pointer<LLVMModuleFlagEntry[]>, Index: number): LLVMModuleFlagBehavior;
    _LLVMModuleFlagEntriesGetKey(Entries: Pointer<LLVMModuleFlagEntry[]>, Index: number, Len: Pointer<number>): LLVMStringRef;
    _LLVMModuleFlagEntriesGetMetadata(Entries: Pointer<LLVMModuleFlagEntry[]>, Index: number): LLVMMetadataRef;
    _LLVMGetModuleFlag(Module: LLVMModuleRef, Key: LLVMStringRef, KeyLen: number): LLVMMetadataRef;
    _LLVMAddModuleFlag(Module: LLVMModuleRef, Behavior: LLVMModuleFlagBehavior, Key: LLVMStringRef, KeyLen: number, Val: LLVMMetadataRef): void;
    _LLVMDumpModule(Module: LLVMModuleRef): void;
    _LLVMPrintModuleToFile(Module: LLVMModuleRef, Filename: LLVMStringRef, ErrorMessage: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMPrintModuleToString(Module: LLVMModuleRef): LLVMStringRef;
    _LLVMGetModuleInlineAsm(Module: LLVMModuleRef, Len: Pointer<number>): LLVMStringRef;
    _LLVMSetModuleInlineAsm2(Module: LLVMModuleRef, Asm: LLVMStringRef, Len: number): void;
    _LLVMAppendModuleInlineAsm(Module: LLVMModuleRef, Asm: LLVMStringRef, Len: number): void;
    _LLVMGetInlineAsm(Ty: LLVMTypeRef, AsmString: LLVMStringRef, AsmStringSize: number, Constraints: LLVMStringRef, ConstraintsSize: number, HasSideEffects: LLVMBool, IsAlignStack: LLVMBool, Dialect: LLVMInlineAsmDialect, CanThrow: LLVMBool): LLVMValueRef;
    _LLVMGetModuleContext(Module: LLVMModuleRef): LLVMContextRef;
    _LLVMGetTypeByName(Module: LLVMModuleRef, Name: LLVMStringRef): LLVMTypeRef;
    _LLVMGetFirstNamedMetadata(Module: LLVMModuleRef): LLVMNamedMDNodeRef;
    _LLVMGetLastNamedMetadata(Module: LLVMModuleRef): LLVMNamedMDNodeRef;
    _LLVMGetNextNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef): LLVMNamedMDNodeRef;
    _LLVMGetPreviousNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef): LLVMNamedMDNodeRef;
    _LLVMGetNamedMetadata(Module: LLVMModuleRef, Name: LLVMStringRef, NameLen: number): LLVMNamedMDNodeRef;
    _LLVMGetOrInsertNamedMetadata(Module: LLVMModuleRef, Name: LLVMStringRef, NameLen: number): LLVMNamedMDNodeRef;
    _LLVMGetNamedMetadataName(NamedMD: LLVMNamedMDNodeRef, NameLen: Pointer<number>): LLVMStringRef;
    _LLVMGetNamedMetadataNumOperands(Module: LLVMModuleRef, Name: LLVMStringRef): number;
    _LLVMGetNamedMetadataOperands(Module: LLVMModuleRef, Name: LLVMStringRef, Dest: Pointer<LLVMValueRef[]>): void;
    _LLVMAddNamedMetadataOperand(Module: LLVMModuleRef, Name: LLVMStringRef, Val: LLVMValueRef): void;
    _LLVMGetDebugLocDirectory(Val: LLVMValueRef, Length: Pointer<number>): LLVMStringRef;
    _LLVMGetDebugLocFilename(Val: LLVMValueRef, Length: Pointer<number>): LLVMStringRef;
    _LLVMGetDebugLocLine(Val: LLVMValueRef): number;
    _LLVMGetDebugLocColumn(Val: LLVMValueRef): number;
    _LLVMAddFunction(Module: LLVMModuleRef, Name: LLVMStringRef, FunctionTy: LLVMTypeRef): LLVMValueRef;
    _LLVMGetNamedFunction(Module: LLVMModuleRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMGetFirstFunction(Module: LLVMModuleRef): LLVMValueRef;
    _LLVMGetLastFunction(Module: LLVMModuleRef): LLVMValueRef;
    _LLVMGetNextFunction(Fn: LLVMValueRef): LLVMValueRef;
    _LLVMGetPreviousFunction(Fn: LLVMValueRef): LLVMValueRef;
    _LLVMSetModuleInlineAsm(Module: LLVMModuleRef, Asm: LLVMStringRef): void;
    _LLVMGetTypeKind(Ty: LLVMTypeRef): LLVMTypeKind;
    _LLVMTypeIsSized(Ty: LLVMTypeRef): LLVMBool;
    _LLVMGetTypeContext(Ty: LLVMTypeRef): LLVMContextRef;
    _LLVMDumpType(Val: LLVMTypeRef): void;
    _LLVMPrintTypeToString(Val: LLVMTypeRef): LLVMStringRef;
    _LLVMInt1TypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMInt8TypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMInt16TypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMInt32TypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMInt64TypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMInt128TypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMIntTypeInContext(Context: LLVMContextRef, NumBits: number): LLVMTypeRef;
    _LLVMInt1Type(): LLVMTypeRef;
    _LLVMInt8Type(): LLVMTypeRef;
    _LLVMInt16Type(): LLVMTypeRef;
    _LLVMInt32Type(): LLVMTypeRef;
    _LLVMInt64Type(): LLVMTypeRef;
    _LLVMInt128Type(): LLVMTypeRef;
    _LLVMIntType(NumBits: number): LLVMTypeRef;
    _LLVMGetIntTypeWidth(IntegerTy: LLVMTypeRef): number;
    _LLVMHalfTypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMBFloatTypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMFloatTypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMDoubleTypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMX86FP80TypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMFP128TypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMPPCFP128TypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMHalfType(): LLVMTypeRef;
    _LLVMBFloatType(): LLVMTypeRef;
    _LLVMFloatType(): LLVMTypeRef;
    _LLVMDoubleType(): LLVMTypeRef;
    _LLVMX86FP80Type(): LLVMTypeRef;
    _LLVMFP128Type(): LLVMTypeRef;
    _LLVMPPCFP128Type(): LLVMTypeRef;
    _LLVMFunctionType(ReturnType: LLVMTypeRef, ParamTypes: Pointer<LLVMTypeRef[]>, ParamCount: number, IsVarArg: LLVMBool): LLVMTypeRef;
    _LLVMIsFunctionVarArg(FunctionTy: LLVMTypeRef): LLVMBool;
    _LLVMGetReturnType(FunctionTy: LLVMTypeRef): LLVMTypeRef;
    _LLVMCountParamTypes(FunctionTy: LLVMTypeRef): number;
    _LLVMGetParamTypes(FunctionTy: LLVMTypeRef, Dest: Pointer<LLVMTypeRef[]>): void;
    _LLVMStructTypeInContext(Context: LLVMContextRef, ElementTypes: Pointer<LLVMTypeRef[]>, ElementCount: number, Packed: LLVMBool): LLVMTypeRef;
    _LLVMStructType(ElementTypes: Pointer<LLVMTypeRef[]>, ElementCount: number, Packed: LLVMBool): LLVMTypeRef;
    _LLVMStructCreateNamed(Context: LLVMContextRef, Name: LLVMStringRef): LLVMTypeRef;
    _LLVMGetStructName(Ty: LLVMTypeRef): LLVMStringRef;
    _LLVMStructSetBody(StructTy: LLVMTypeRef, ElementTypes: Pointer<LLVMTypeRef[]>, ElementCount: number, Packed: LLVMBool): void;
    _LLVMCountStructElementTypes(StructTy: LLVMTypeRef): number;
    _LLVMGetStructElementTypes(StructTy: LLVMTypeRef, Dest: Pointer<LLVMTypeRef[]>): void;
    _LLVMStructGetTypeAtIndex(StructTy: LLVMTypeRef, i: number): LLVMTypeRef;
    _LLVMIsPackedStruct(StructTy: LLVMTypeRef): LLVMBool;
    _LLVMIsOpaqueStruct(StructTy: LLVMTypeRef): LLVMBool;
    _LLVMIsLiteralStruct(StructTy: LLVMTypeRef): LLVMBool;
    _LLVMGetElementType(Ty: LLVMTypeRef): LLVMTypeRef;
    _LLVMGetSubtypes(Tp: LLVMTypeRef, Arr: Pointer<LLVMTypeRef[]>): void;
    _LLVMGetNumContainedTypes(Tp: LLVMTypeRef): number;
    _LLVMArrayType(ElementType: LLVMTypeRef, ElementCount: number): LLVMTypeRef;
    _LLVMGetArrayLength(ArrayTy: LLVMTypeRef): number;
    _LLVMPointerType(ElementType: LLVMTypeRef, AddressSpace: number): LLVMTypeRef;
    _LLVMPointerTypeIsOpaque(Ty: LLVMTypeRef): LLVMBool;
    _LLVMPointerTypeInContext(Context: LLVMContextRef, AddressSpace: number): LLVMTypeRef;
    _LLVMGetPointerAddressSpace(PointerTy: LLVMTypeRef): number;
    _LLVMVectorType(ElementType: LLVMTypeRef, ElementCount: number): LLVMTypeRef;
    _LLVMScalableVectorType(ElementType: LLVMTypeRef, ElementCount: number): LLVMTypeRef;
    _LLVMGetVectorSize(VectorTy: LLVMTypeRef): number;
    _LLVMVoidTypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMLabelTypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMX86MMXTypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMX86AMXTypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMTokenTypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMMetadataTypeInContext(Context: LLVMContextRef): LLVMTypeRef;
    _LLVMVoidType(): LLVMTypeRef;
    _LLVMLabelType(): LLVMTypeRef;
    _LLVMX86MMXType(): LLVMTypeRef;
    _LLVMX86AMXType(): LLVMTypeRef;
    _LLVMTargetExtTypeInContext(Context: LLVMContextRef, Name: LLVMStringRef, TypeParams: Pointer<LLVMTypeRef[]>, TypeParamCount: number, IntParams: Pointer<number>, IntParamCount: number): LLVMTypeRef;
    _LLVMTypeOf(Val: LLVMValueRef): LLVMTypeRef;
    _LLVMGetValueKind(Val: LLVMValueRef): LLVMValueKind;
    _LLVMGetValueName2(Val: LLVMValueRef, Length: Pointer<number>): LLVMStringRef;
    _LLVMSetValueName2(Val: LLVMValueRef, Name: LLVMStringRef, NameLen: number): void;
    _LLVMDumpValue(Val: LLVMValueRef): void;
    _LLVMPrintValueToString(Val: LLVMValueRef): LLVMStringRef;
    _LLVMReplaceAllUsesWith(OldVal: LLVMValueRef, NewVal: LLVMValueRef): void;
    _LLVMIsConstant(Val: LLVMValueRef): LLVMBool;
    _LLVMIsUndef(Val: LLVMValueRef): LLVMBool;
    _LLVMIsPoison(Val: LLVMValueRef): LLVMBool;
    _LLVMIsAArgument(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsABasicBlock(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAInlineAsm(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAUser(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAConstant(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsABlockAddress(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAConstantAggregateZero(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAConstantArray(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAConstantDataSequential(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAConstantDataArray(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAConstantDataVector(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAConstantExpr(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAConstantFP(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAConstantInt(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAConstantPointerNull(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAConstantStruct(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAConstantTokenNone(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAConstantVector(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAGlobalValue(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAGlobalAlias(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAGlobalObject(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAFunction(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAGlobalVariable(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAGlobalIFunc(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAUndefValue(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAPoisonValue(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAInstruction(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAUnaryOperator(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsABinaryOperator(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsACallInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAIntrinsicInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsADbgInfoIntrinsic(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsADbgVariableIntrinsic(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsADbgDeclareInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsADbgLabelInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAMemIntrinsic(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAMemCpyInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAMemMoveInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAMemSetInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsACmpInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAFCmpInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAICmpInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAExtractElementInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAGetElementPtrInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAInsertElementInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAInsertValueInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsALandingPadInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAPHINode(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsASelectInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAShuffleVectorInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAStoreInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsABranchInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAIndirectBrInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAInvokeInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAReturnInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsASwitchInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAUnreachableInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAResumeInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsACleanupReturnInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsACatchReturnInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsACatchSwitchInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsACallBrInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAFuncletPadInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsACatchPadInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsACleanupPadInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAUnaryInstruction(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAAllocaInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsACastInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAAddrSpaceCastInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsABitCastInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAFPExtInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAFPToSIInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAFPToUIInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAFPTruncInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAIntToPtrInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAPtrToIntInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsASExtInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsASIToFPInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsATruncInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAUIToFPInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAZExtInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAExtractValueInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsALoadInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAVAArgInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAFreezeInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAAtomicCmpXchgInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAAtomicRMWInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAFenceInst(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAMDNode(Val: LLVMValueRef): LLVMValueRef;
    _LLVMIsAMDString(Val: LLVMValueRef): LLVMValueRef;
    _LLVMGetValueName(Val: LLVMValueRef): LLVMStringRef;
    _LLVMSetValueName(Val: LLVMValueRef, Name: LLVMStringRef): void;
    _LLVMGetFirstUse(Val: LLVMValueRef): LLVMUseRef;
    _LLVMGetNextUse(U: LLVMUseRef): LLVMUseRef;
    _LLVMGetUser(U: LLVMUseRef): LLVMValueRef;
    _LLVMGetUsedValue(U: LLVMUseRef): LLVMValueRef;
    _LLVMGetOperand(Val: LLVMValueRef, Index: number): LLVMValueRef;
    _LLVMGetOperandUse(Val: LLVMValueRef, Index: number): LLVMUseRef;
    _LLVMSetOperand(User: LLVMValueRef, Index: number, Val: LLVMValueRef): void;
    _LLVMGetNumOperands(Val: LLVMValueRef): number;
    _LLVMConstNull(Ty: LLVMTypeRef): LLVMValueRef;
    _LLVMConstAllOnes(Ty: LLVMTypeRef): LLVMValueRef;
    _LLVMGetUndef(Ty: LLVMTypeRef): LLVMValueRef;
    _LLVMGetPoison(Ty: LLVMTypeRef): LLVMValueRef;
    _LLVMIsNull(Val: LLVMValueRef): LLVMBool;
    _LLVMConstPointerNull(Ty: LLVMTypeRef): LLVMValueRef;
    _LLVMConstInt(IntTy: LLVMTypeRef, N: bigint, SignExtend: LLVMBool): LLVMValueRef;
    _LLVMConstIntOfArbitraryPrecision(IntTy: LLVMTypeRef, NumWords: number, Words: Pointer<bigint>): LLVMValueRef;
    _LLVMConstIntOfString(IntTy: LLVMTypeRef, Text: LLVMStringRef, Radix: number): LLVMValueRef;
    _LLVMConstIntOfStringAndSize(IntTy: LLVMTypeRef, Text: LLVMStringRef, SLen: number, Radix: number): LLVMValueRef;
    _LLVMConstReal(RealTy: LLVMTypeRef, N: number): LLVMValueRef;
    _LLVMConstRealOfString(RealTy: LLVMTypeRef, Text: LLVMStringRef): LLVMValueRef;
    _LLVMConstRealOfStringAndSize(RealTy: LLVMTypeRef, Text: LLVMStringRef, SLen: number): LLVMValueRef;
    _LLVMConstIntGetZExtValue(ConstantVal: LLVMValueRef): bigint;
    _LLVMConstIntGetSExtValue(ConstantVal: LLVMValueRef): bigint;
    _LLVMConstRealGetDouble(ConstantVal: LLVMValueRef, losesInfo: Pointer<LLVMBool[]>): number;
    _LLVMConstStringInContext(Context: LLVMContextRef, Str: LLVMStringRef, Length: number, DontNullTerminate: LLVMBool): LLVMValueRef;
    _LLVMConstString(Str: LLVMStringRef, Length: number, DontNullTerminate: LLVMBool): LLVMValueRef;
    _LLVMIsConstantString(c: LLVMValueRef): LLVMBool;
    _LLVMGetAsString(c: LLVMValueRef, Length: Pointer<number>): LLVMStringRef;
    _LLVMConstStructInContext(Context: LLVMContextRef, ConstantVals: Pointer<LLVMValueRef[]>, Count: number, Packed: LLVMBool): LLVMValueRef;
    _LLVMConstStruct(ConstantVals: Pointer<LLVMValueRef[]>, Count: number, Packed: LLVMBool): LLVMValueRef;
    _LLVMConstArray(ElementTy: LLVMTypeRef, ConstantVals: Pointer<LLVMValueRef[]>, Length: number): LLVMValueRef;
    _LLVMConstNamedStruct(StructTy: LLVMTypeRef, ConstantVals: Pointer<LLVMValueRef[]>, Count: number): LLVMValueRef;
    _LLVMGetAggregateElement(Context: LLVMValueRef, Idx: number): LLVMValueRef;
    _LLVMGetElementAsConstant(Context: LLVMValueRef, idx: number): LLVMValueRef;
    _LLVMConstVector(ScalarConstantVals: Pointer<LLVMValueRef[]>, Size: number): LLVMValueRef;
    _LLVMGetConstOpcode(ConstantVal: LLVMValueRef): LLVMOpcode;
    _LLVMAlignOf(Ty: LLVMTypeRef): LLVMValueRef;
    _LLVMSizeOf(Ty: LLVMTypeRef): LLVMValueRef;
    _LLVMConstNeg(ConstantVal: LLVMValueRef): LLVMValueRef;
    _LLVMConstNSWNeg(ConstantVal: LLVMValueRef): LLVMValueRef;
    _LLVMConstNUWNeg(ConstantVal: LLVMValueRef): LLVMValueRef;
    _LLVMConstNot(ConstantVal: LLVMValueRef): LLVMValueRef;
    _LLVMConstAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstNSWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstNUWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstNSWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstNUWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstNSWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstNUWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstAnd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstOr(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstXor(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstICmp(Predicate: LLVMIntPredicate, LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstFCmp(Predicate: LLVMRealPredicate, LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstShl(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstLShr(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstAShr(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstGEP2(Ty: LLVMTypeRef, ConstantVal: LLVMValueRef, ConstantIndices: Pointer<LLVMValueRef[]>, NumIndices: number): LLVMValueRef;
    _LLVMConstInBoundsGEP2(Ty: LLVMTypeRef, ConstantVal: LLVMValueRef, ConstantIndices: Pointer<LLVMValueRef[]>, NumIndices: number): LLVMValueRef;
    _LLVMConstTrunc(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstSExt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstZExt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstFPTrunc(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstFPExt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstUIToFP(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstSIToFP(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstFPToUI(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstFPToSI(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstPtrToInt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstIntToPtr(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstAddrSpaceCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstZExtOrBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstSExtOrBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstTruncOrBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstPointerCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstIntCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef, isSigned: LLVMBool): LLVMValueRef;
    _LLVMConstFPCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
    _LLVMConstSelect(ConstantCondition: LLVMValueRef, ConstantIfTrue: LLVMValueRef, ConstantIfFalse: LLVMValueRef): LLVMValueRef;
    _LLVMConstExtractElement(VectorConstant: LLVMValueRef, IndexConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstInsertElement(VectorConstant: LLVMValueRef, ElementValueConstant: LLVMValueRef, IndexConstant: LLVMValueRef): LLVMValueRef;
    _LLVMConstShuffleVector(VectorAConstant: LLVMValueRef, VectorBConstant: LLVMValueRef, MaskConstant: LLVMValueRef): LLVMValueRef;
    _LLVMBlockAddress(F: LLVMValueRef, BB: LLVMBasicBlockRef): LLVMValueRef;
    _LLVMConstInlineAsm(Ty: LLVMTypeRef, AsmString: LLVMStringRef, Constraints: LLVMStringRef, HasSideEffects: LLVMBool, IsAlignStack: LLVMBool): LLVMValueRef;
    _LLVMGetGlobalParent(Global: LLVMValueRef): LLVMModuleRef;
    _LLVMIsDeclaration(Global: LLVMValueRef): LLVMBool;
    _LLVMGetLinkage(Global: LLVMValueRef): LLVMLinkage;
    _LLVMSetLinkage(Global: LLVMValueRef, Linkage: LLVMLinkage): void;
    _LLVMGetSection(Global: LLVMValueRef): LLVMStringRef;
    _LLVMSetSection(Global: LLVMValueRef, Section: LLVMStringRef): void;
    _LLVMGetVisibility(Global: LLVMValueRef): LLVMVisibility;
    _LLVMSetVisibility(Global: LLVMValueRef, Viz: LLVMVisibility): void;
    _LLVMGetDLLStorageClass(Global: LLVMValueRef): LLVMDLLStorageClass;
    _LLVMSetDLLStorageClass(Global: LLVMValueRef, Class: LLVMDLLStorageClass): void;
    _LLVMGetUnnamedAddress(Global: LLVMValueRef): LLVMUnnamedAddr;
    _LLVMSetUnnamedAddress(Global: LLVMValueRef, UnnamedAddr: LLVMUnnamedAddr): void;
    _LLVMGlobalGetValueType(Global: LLVMValueRef): LLVMTypeRef;
    _LLVMHasUnnamedAddr(Global: LLVMValueRef): LLVMBool;
    _LLVMSetUnnamedAddr(Global: LLVMValueRef, HasUnnamedAddr: LLVMBool): void;
    _LLVMGetAlignment(V: LLVMValueRef): number;
    _LLVMSetAlignment(V: LLVMValueRef, Bytes: number): void;
    _LLVMGlobalSetMetadata(Global: LLVMValueRef, Kind: number, MD: LLVMMetadataRef): void;
    _LLVMGlobalEraseMetadata(Global: LLVMValueRef, Kind: number): void;
    _LLVMGlobalClearMetadata(Global: LLVMValueRef): void;
    _LLVMGlobalCopyAllMetadata(Value: LLVMValueRef, NumEntries: Pointer<number>): Pointer<LLVMValueMetadataEntry[]>;
    _LLVMDisposeValueMetadataEntries(Entries: Pointer<LLVMValueMetadataEntry[]>): void;
    _LLVMValueMetadataEntriesGetKind(Entries: Pointer<LLVMValueMetadataEntry[]>, Index: number): number;
    _LLVMValueMetadataEntriesGetMetadata(Entries: Pointer<LLVMValueMetadataEntry[]>, Index: number): LLVMMetadataRef;
    _LLVMAddGlobal(Module: LLVMModuleRef, Ty: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMAddGlobalInAddressSpace(Module: LLVMModuleRef, Ty: LLVMTypeRef, Name: LLVMStringRef, AddressSpace: number): LLVMValueRef;
    _LLVMGetNamedGlobal(Module: LLVMModuleRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMGetFirstGlobal(Module: LLVMModuleRef): LLVMValueRef;
    _LLVMGetLastGlobal(Module: LLVMModuleRef): LLVMValueRef;
    _LLVMGetNextGlobal(GlobalVar: LLVMValueRef): LLVMValueRef;
    _LLVMGetPreviousGlobal(GlobalVar: LLVMValueRef): LLVMValueRef;
    _LLVMDeleteGlobal(GlobalVar: LLVMValueRef): void;
    _LLVMGetInitializer(GlobalVar: LLVMValueRef): LLVMValueRef;
    _LLVMSetInitializer(GlobalVar: LLVMValueRef, ConstantVal: LLVMValueRef): void;
    _LLVMIsThreadLocal(GlobalVar: LLVMValueRef): LLVMBool;
    _LLVMSetThreadLocal(GlobalVar: LLVMValueRef, IsThreadLocal: LLVMBool): void;
    _LLVMIsGlobalConstant(GlobalVar: LLVMValueRef): LLVMBool;
    _LLVMSetGlobalConstant(GlobalVar: LLVMValueRef, IsConstant: LLVMBool): void;
    _LLVMGetThreadLocalMode(GlobalVar: LLVMValueRef): LLVMThreadLocalMode;
    _LLVMSetThreadLocalMode(GlobalVar: LLVMValueRef, Mode: LLVMThreadLocalMode): void;
    _LLVMIsExternallyInitialized(GlobalVar: LLVMValueRef): LLVMBool;
    _LLVMSetExternallyInitialized(GlobalVar: LLVMValueRef, IsExtInit: LLVMBool): void;
    _LLVMAddAlias2(Module: LLVMModuleRef, ValueTy: LLVMTypeRef, AddrSpace: number, Aliasee: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMGetNamedGlobalAlias(Module: LLVMModuleRef, Name: LLVMStringRef, NameLen: number): LLVMValueRef;
    _LLVMGetFirstGlobalAlias(Module: LLVMModuleRef): LLVMValueRef;
    _LLVMGetLastGlobalAlias(Module: LLVMModuleRef): LLVMValueRef;
    _LLVMGetNextGlobalAlias(GA: LLVMValueRef): LLVMValueRef;
    _LLVMGetPreviousGlobalAlias(GA: LLVMValueRef): LLVMValueRef;
    _LLVMAliasGetAliasee(Alias: LLVMValueRef): LLVMValueRef;
    _LLVMAliasSetAliasee(Alias: LLVMValueRef, Aliasee: LLVMValueRef): void;
    _LLVMDeleteFunction(Fn: LLVMValueRef): void;
    _LLVMHasPersonalityFn(Fn: LLVMValueRef): LLVMBool;
    _LLVMGetPersonalityFn(Fn: LLVMValueRef): LLVMValueRef;
    _LLVMSetPersonalityFn(Fn: LLVMValueRef, PersonalityFn: LLVMValueRef): void;
    _LLVMLookupIntrinsicID(Name: LLVMStringRef, NameLen: number): number;
    _LLVMGetIntrinsicID(Fn: LLVMValueRef): number;
    _LLVMGetIntrinsicDeclaration(Mod: LLVMModuleRef, ID: number, ParamTypes: Pointer<LLVMTypeRef[]>, ParamCount: number): LLVMValueRef;
    _LLVMIntrinsicGetType(Ctx: LLVMContextRef, ID: number, ParamTypes: Pointer<LLVMTypeRef[]>, ParamCount: number): LLVMTypeRef;
    _LLVMIntrinsicGetName(ID: number, NameLength: Pointer<number>): LLVMStringRef;
    _LLVMIntrinsicCopyOverloadedName(ID: number, ParamTypes: Pointer<LLVMTypeRef[]>, ParamCount: number, NameLength: Pointer<number>): LLVMStringRef;
    _LLVMIntrinsicCopyOverloadedName2(Mod: LLVMModuleRef, ID: number, ParamTypes: Pointer<LLVMTypeRef[]>, ParamCount: number, NameLength: Pointer<number>): LLVMStringRef;
    _LLVMIntrinsicIsOverloaded(ID: number): LLVMBool;
    _LLVMGetFunctionCallConv(Fn: LLVMValueRef): number;
    _LLVMSetFunctionCallConv(Fn: LLVMValueRef, CC: number): void;
    _LLVMGetGC(Fn: LLVMValueRef): LLVMStringRef;
    _LLVMSetGC(Fn: LLVMValueRef, Name: LLVMStringRef): void;
    _LLVMAddAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, A: LLVMAttributeRef): void;
    _LLVMGetAttributeCountAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex): number;
    _LLVMGetAttributesAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, Attrs: Pointer<LLVMAttributeRef[]>): void;
    _LLVMGetEnumAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: number): LLVMAttributeRef;
    _LLVMGetStringAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, K: LLVMStringRef, KLen: number): LLVMAttributeRef;
    _LLVMRemoveEnumAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: number): void;
    _LLVMRemoveStringAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, K: LLVMStringRef, KLen: number): void;
    _LLVMAddTargetDependentFunctionAttr(Fn: LLVMValueRef, A: LLVMStringRef, V: LLVMStringRef): void;
    _LLVMCountParams(Fn: LLVMValueRef): number;
    _LLVMGetParams(Fn: LLVMValueRef, Params: Pointer<LLVMValueRef[]>): void;
    _LLVMGetParam(Fn: LLVMValueRef, Index: number): LLVMValueRef;
    _LLVMGetParamParent(Inst: LLVMValueRef): LLVMValueRef;
    _LLVMGetFirstParam(Fn: LLVMValueRef): LLVMValueRef;
    _LLVMGetLastParam(Fn: LLVMValueRef): LLVMValueRef;
    _LLVMGetNextParam(Arg: LLVMValueRef): LLVMValueRef;
    _LLVMGetPreviousParam(Arg: LLVMValueRef): LLVMValueRef;
    _LLVMSetParamAlignment(Arg: LLVMValueRef, Align: number): void;
    _LLVMAddGlobalIFunc(Module: LLVMModuleRef, Name: LLVMStringRef, NameLen: number, Ty: LLVMTypeRef, AddrSpace: number, Resolver: LLVMValueRef): LLVMValueRef;
    _LLVMGetNamedGlobalIFunc(Module: LLVMModuleRef, Name: LLVMStringRef, NameLen: number): LLVMValueRef;
    _LLVMGetFirstGlobalIFunc(Module: LLVMModuleRef): LLVMValueRef;
    _LLVMGetLastGlobalIFunc(Module: LLVMModuleRef): LLVMValueRef;
    _LLVMGetNextGlobalIFunc(IFunc: LLVMValueRef): LLVMValueRef;
    _LLVMGetPreviousGlobalIFunc(IFunc: LLVMValueRef): LLVMValueRef;
    _LLVMGetGlobalIFuncResolver(IFunc: LLVMValueRef): LLVMValueRef;
    _LLVMSetGlobalIFuncResolver(IFunc: LLVMValueRef, Resolver: LLVMValueRef): void;
    _LLVMEraseGlobalIFunc(IFunc: LLVMValueRef): void;
    _LLVMRemoveGlobalIFunc(IFunc: LLVMValueRef): void;
    _LLVMMDStringInContext2(Context: LLVMContextRef, Str: LLVMStringRef, SLen: number): LLVMMetadataRef;
    _LLVMMDNodeInContext2(Context: LLVMContextRef, MDs: Pointer<LLVMMetadataRef[]>, Count: number): LLVMMetadataRef;
    _LLVMMetadataAsValue(Context: LLVMContextRef, MD: LLVMMetadataRef): LLVMValueRef;
    _LLVMValueAsMetadata(Val: LLVMValueRef): LLVMMetadataRef;
    _LLVMGetMDString(V: LLVMValueRef, Length: Pointer<number>): LLVMStringRef;
    _LLVMGetMDNodeNumOperands(V: LLVMValueRef): number;
    _LLVMGetMDNodeOperands(V: LLVMValueRef, Dest: Pointer<LLVMValueRef[]>): void;
    _LLVMMDStringInContext(Context: LLVMContextRef, Str: LLVMStringRef, SLen: number): LLVMValueRef;
    _LLVMMDString(Str: LLVMStringRef, SLen: number): LLVMValueRef;
    _LLVMMDNodeInContext(Context: LLVMContextRef, Vals: Pointer<LLVMValueRef[]>, Count: number): LLVMValueRef;
    _LLVMMDNode(Vals: Pointer<LLVMValueRef[]>, Count: number): LLVMValueRef;
    _LLVMBasicBlockAsValue(BB: LLVMBasicBlockRef): LLVMValueRef;
    _LLVMValueIsBasicBlock(Val: LLVMValueRef): LLVMBool;
    _LLVMValueAsBasicBlock(Val: LLVMValueRef): LLVMBasicBlockRef;
    _LLVMGetBasicBlockName(BB: LLVMBasicBlockRef): LLVMStringRef;
    _LLVMGetBasicBlockParent(BB: LLVMBasicBlockRef): LLVMValueRef;
    _LLVMGetBasicBlockTerminator(BB: LLVMBasicBlockRef): LLVMValueRef;
    _LLVMCountBasicBlocks(Fn: LLVMValueRef): number;
    _LLVMGetBasicBlocks(Fn: LLVMValueRef, BasicBlocks: Pointer<LLVMBasicBlockRef[]>): void;
    _LLVMGetFirstBasicBlock(Fn: LLVMValueRef): LLVMBasicBlockRef;
    _LLVMGetLastBasicBlock(Fn: LLVMValueRef): LLVMBasicBlockRef;
    _LLVMGetNextBasicBlock(BB: LLVMBasicBlockRef): LLVMBasicBlockRef;
    _LLVMGetPreviousBasicBlock(BB: LLVMBasicBlockRef): LLVMBasicBlockRef;
    _LLVMGetEntryBasicBlock(Fn: LLVMValueRef): LLVMBasicBlockRef;
    _LLVMInsertExistingBasicBlockAfterInsertBlock(Builder: LLVMBuilderRef, BB: LLVMBasicBlockRef): void;
    _LLVMAppendExistingBasicBlock(Fn: LLVMValueRef, BB: LLVMBasicBlockRef): void;
    _LLVMCreateBasicBlockInContext(Context: LLVMContextRef, Name: LLVMStringRef): LLVMBasicBlockRef;
    _LLVMAppendBasicBlockInContext(Context: LLVMContextRef, Fn: LLVMValueRef, Name: LLVMStringRef): LLVMBasicBlockRef;
    _LLVMAppendBasicBlock(Fn: LLVMValueRef, Name: LLVMStringRef): LLVMBasicBlockRef;
    _LLVMInsertBasicBlockInContext(Context: LLVMContextRef, BB: LLVMBasicBlockRef, Name: LLVMStringRef): LLVMBasicBlockRef;
    _LLVMInsertBasicBlock(InsertBeforeBB: LLVMBasicBlockRef, Name: LLVMStringRef): LLVMBasicBlockRef;
    _LLVMDeleteBasicBlock(BB: LLVMBasicBlockRef): void;
    _LLVMRemoveBasicBlockFromParent(BB: LLVMBasicBlockRef): void;
    _LLVMMoveBasicBlockBefore(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef): void;
    _LLVMMoveBasicBlockAfter(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef): void;
    _LLVMGetFirstInstruction(BB: LLVMBasicBlockRef): LLVMValueRef;
    _LLVMGetLastInstruction(BB: LLVMBasicBlockRef): LLVMValueRef;
    _LLVMHasMetadata(Val: LLVMValueRef): number;
    _LLVMGetMetadata(Val: LLVMValueRef, KindID: number): LLVMValueRef;
    _LLVMSetMetadata(Val: LLVMValueRef, KindID: number, Node: LLVMValueRef): void;
    _LLVMInstructionGetAllMetadataOtherThanDebugLoc(Instr: LLVMValueRef, NumEntries: Pointer<number>): Pointer<LLVMValueMetadataEntry[]>;
    _LLVMGetInstructionParent(Inst: LLVMValueRef): LLVMBasicBlockRef;
    _LLVMGetNextInstruction(Inst: LLVMValueRef): LLVMValueRef;
    _LLVMGetPreviousInstruction(Inst: LLVMValueRef): LLVMValueRef;
    _LLVMInstructionRemoveFromParent(Inst: LLVMValueRef): void;
    _LLVMInstructionEraseFromParent(Inst: LLVMValueRef): void;
    _LLVMDeleteInstruction(Inst: LLVMValueRef): void;
    _LLVMGetInstructionOpcode(Inst: LLVMValueRef): LLVMOpcode;
    _LLVMGetICmpPredicate(Inst: LLVMValueRef): LLVMIntPredicate;
    _LLVMGetFCmpPredicate(Inst: LLVMValueRef): LLVMRealPredicate;
    _LLVMInstructionClone(Inst: LLVMValueRef): LLVMValueRef;
    _LLVMIsATerminatorInst(Inst: LLVMValueRef): LLVMValueRef;
    _LLVMGetNumArgOperands(Instr: LLVMValueRef): number;
    _LLVMSetInstructionCallConv(Instr: LLVMValueRef, CC: number): void;
    _LLVMGetInstructionCallConv(Instr: LLVMValueRef): number;
    _LLVMSetInstrParamAlignment(Instr: LLVMValueRef, Idx: LLVMAttributeIndex, Align: number): void;
    _LLVMAddCallSiteAttribute(Context: LLVMValueRef, Idx: LLVMAttributeIndex, A: LLVMAttributeRef): void;
    _LLVMGetCallSiteAttributeCount(Context: LLVMValueRef, Idx: LLVMAttributeIndex): number;
    _LLVMGetCallSiteAttributes(Context: LLVMValueRef, Idx: LLVMAttributeIndex, Attrs: Pointer<LLVMAttributeRef[]>): void;
    _LLVMGetCallSiteEnumAttribute(Context: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: number): LLVMAttributeRef;
    _LLVMGetCallSiteStringAttribute(Context: LLVMValueRef, Idx: LLVMAttributeIndex, K: LLVMStringRef, KLen: number): LLVMAttributeRef;
    _LLVMRemoveCallSiteEnumAttribute(Context: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: number): void;
    _LLVMRemoveCallSiteStringAttribute(Context: LLVMValueRef, Idx: LLVMAttributeIndex, K: LLVMStringRef, KLen: number): void;
    _LLVMGetCalledFunctionType(Context: LLVMValueRef): LLVMTypeRef;
    _LLVMGetCalledValue(Instr: LLVMValueRef): LLVMValueRef;
    _LLVMIsTailCall(CallInst: LLVMValueRef): LLVMBool;
    _LLVMSetTailCall(CallInst: LLVMValueRef, IsTailCall: LLVMBool): void;
    _LLVMGetNormalDest(InvokeInst: LLVMValueRef): LLVMBasicBlockRef;
    _LLVMGetUnwindDest(InvokeInst: LLVMValueRef): LLVMBasicBlockRef;
    _LLVMSetNormalDest(InvokeInst: LLVMValueRef, Builder: LLVMBasicBlockRef): void;
    _LLVMSetUnwindDest(InvokeInst: LLVMValueRef, Builder: LLVMBasicBlockRef): void;
    _LLVMGetNumSuccessors(Term: LLVMValueRef): number;
    _LLVMGetSuccessor(Term: LLVMValueRef, i: number): LLVMBasicBlockRef;
    _LLVMSetSuccessor(Term: LLVMValueRef, i: number, block: LLVMBasicBlockRef): void;
    _LLVMIsConditional(Branch: LLVMValueRef): LLVMBool;
    _LLVMGetCondition(Branch: LLVMValueRef): LLVMValueRef;
    _LLVMSetCondition(Branch: LLVMValueRef, Cond: LLVMValueRef): void;
    _LLVMGetSwitchDefaultDest(SwitchInstr: LLVMValueRef): LLVMBasicBlockRef;
    _LLVMGetAllocatedType(Alloca: LLVMValueRef): LLVMTypeRef;
    _LLVMIsInBounds(GEP: LLVMValueRef): LLVMBool;
    _LLVMSetIsInBounds(GEP: LLVMValueRef, InBounds: LLVMBool): void;
    _LLVMGetGEPSourceElementType(GEP: LLVMValueRef): LLVMTypeRef;
    _LLVMAddIncoming(PhiNode: LLVMValueRef, IncomingValues: Pointer<LLVMValueRef[]>, IncomingBlocks: Pointer<LLVMBasicBlockRef[]>, Count: number): void;
    _LLVMCountIncoming(PhiNode: LLVMValueRef): number;
    _LLVMGetIncomingValue(PhiNode: LLVMValueRef, Index: number): LLVMValueRef;
    _LLVMGetIncomingBlock(PhiNode: LLVMValueRef, Index: number): LLVMBasicBlockRef;
    _LLVMGetNumIndices(Inst: LLVMValueRef): number;
    _LLVMGetIndices(Inst: LLVMValueRef): Pointer<number>;
    _LLVMCreateBuilderInContext(Context: LLVMContextRef): LLVMBuilderRef;
    _LLVMCreateBuilder(): LLVMBuilderRef;
    _LLVMPositionBuilder(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef, Instr: LLVMValueRef): void;
    _LLVMPositionBuilderBefore(Builder: LLVMBuilderRef, Instr: LLVMValueRef): void;
    _LLVMPositionBuilderAtEnd(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef): void;
    _LLVMGetInsertBlock(Builder: LLVMBuilderRef): LLVMBasicBlockRef;
    _LLVMClearInsertionPosition(Builder: LLVMBuilderRef): void;
    _LLVMInsertIntoBuilder(Builder: LLVMBuilderRef, Instr: LLVMValueRef): void;
    _LLVMInsertIntoBuilderWithName(Builder: LLVMBuilderRef, Instr: LLVMValueRef, Name: LLVMStringRef): void;
    _LLVMDisposeBuilder(Builder: LLVMBuilderRef): void;
    _LLVMGetCurrentDebugLocation2(Builder: LLVMBuilderRef): LLVMMetadataRef;
    _LLVMSetCurrentDebugLocation2(Builder: LLVMBuilderRef, Loc: LLVMMetadataRef): void;
    _LLVMSetInstDebugLocation(Builder: LLVMBuilderRef, Inst: LLVMValueRef): void;
    _LLVMAddMetadataToInst(Builder: LLVMBuilderRef, Inst: LLVMValueRef): void;
    _LLVMBuilderGetDefaultFPMathTag(Builder: LLVMBuilderRef): LLVMMetadataRef;
    _LLVMBuilderSetDefaultFPMathTag(Builder: LLVMBuilderRef, FPMathTag: LLVMMetadataRef): void;
    _LLVMSetCurrentDebugLocation(Builder: LLVMBuilderRef, L: LLVMValueRef): void;
    _LLVMGetCurrentDebugLocation(Builder: LLVMBuilderRef): LLVMValueRef;
    _LLVMBuildRetVoid(Builder: LLVMBuilderRef): LLVMValueRef;
    _LLVMBuildRet(Builder: LLVMBuilderRef, V: LLVMValueRef): LLVMValueRef;
    _LLVMBuildAggregateRet(Builder: LLVMBuilderRef, RetVals: Pointer<LLVMValueRef[]>, N: number): LLVMValueRef;
    _LLVMBuildBr(Builder: LLVMBuilderRef, Dest: LLVMBasicBlockRef): LLVMValueRef;
    _LLVMBuildCondBr(Builder: LLVMBuilderRef, If: LLVMValueRef, Then: LLVMBasicBlockRef, Else: LLVMBasicBlockRef): LLVMValueRef;
    _LLVMBuildSwitch(Builder: LLVMBuilderRef, V: LLVMValueRef, Else: LLVMBasicBlockRef, NumCases: number): LLVMValueRef;
    _LLVMBuildIndirectBr(Builder: LLVMBuilderRef, Addr: LLVMValueRef, NumDests: number): LLVMValueRef;
    _LLVMBuildInvoke2(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Fn: LLVMValueRef, Args: Pointer<LLVMValueRef[]>, NumArgs: number, Then: LLVMBasicBlockRef, Catch: LLVMBasicBlockRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildUnreachable(Builder: LLVMBuilderRef): LLVMValueRef;
    _LLVMBuildResume(Builder: LLVMBuilderRef, Exn: LLVMValueRef): LLVMValueRef;
    _LLVMBuildLandingPad(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, PersFn: LLVMValueRef, NumClauses: number, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildCleanupRet(Builder: LLVMBuilderRef, CatchPad: LLVMValueRef, BB: LLVMBasicBlockRef): LLVMValueRef;
    _LLVMBuildCatchRet(Builder: LLVMBuilderRef, CatchPad: LLVMValueRef, BB: LLVMBasicBlockRef): LLVMValueRef;
    _LLVMBuildCatchPad(Builder: LLVMBuilderRef, ParentPad: LLVMValueRef, Args: Pointer<LLVMValueRef[]>, NumArgs: number, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildCleanupPad(Builder: LLVMBuilderRef, ParentPad: LLVMValueRef, Args: Pointer<LLVMValueRef[]>, NumArgs: number, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildCatchSwitch(Builder: LLVMBuilderRef, ParentPad: LLVMValueRef, UnwindBB: LLVMBasicBlockRef, NumHandlers: number, Name: LLVMStringRef): LLVMValueRef;
    _LLVMAddCase(Switch: LLVMValueRef, OnVal: LLVMValueRef, Dest: LLVMBasicBlockRef): void;
    _LLVMAddDestination(IndirectBr: LLVMValueRef, Dest: LLVMBasicBlockRef): void;
    _LLVMGetNumClauses(LandingPad: LLVMValueRef): number;
    _LLVMGetClause(LandingPad: LLVMValueRef, Idx: number): LLVMValueRef;
    _LLVMAddClause(LandingPad: LLVMValueRef, ClauseVal: LLVMValueRef): void;
    _LLVMIsCleanup(LandingPad: LLVMValueRef): LLVMBool;
    _LLVMSetCleanup(LandingPad: LLVMValueRef, Val: LLVMBool): void;
    _LLVMAddHandler(CatchSwitch: LLVMValueRef, Dest: LLVMBasicBlockRef): void;
    _LLVMGetNumHandlers(CatchSwitch: LLVMValueRef): number;
    _LLVMGetHandlers(CatchSwitch: LLVMValueRef, Handlers: Pointer<LLVMBasicBlockRef[]>): void;
    _LLVMGetArgOperand(Funclet: LLVMValueRef, i: number): LLVMValueRef;
    _LLVMSetArgOperand(Funclet: LLVMValueRef, i: number, value: LLVMValueRef): void;
    _LLVMGetParentCatchSwitch(CatchPad: LLVMValueRef): LLVMValueRef;
    _LLVMSetParentCatchSwitch(CatchPad: LLVMValueRef, CatchSwitch: LLVMValueRef): void;
    _LLVMBuildAdd(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildNSWAdd(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildNUWAdd(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFAdd(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildSub(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildNSWSub(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildNUWSub(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFSub(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildMul(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildNSWMul(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildNUWMul(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFMul(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildUDiv(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildExactUDiv(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildSDiv(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildExactSDiv(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFDiv(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildURem(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildSRem(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFRem(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildShl(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildLShr(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildAShr(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildAnd(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildOr(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildXor(Builder: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildBinOp(Builder: LLVMBuilderRef, Op: LLVMOpcode, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildNeg(Builder: LLVMBuilderRef, V: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildNSWNeg(Builder: LLVMBuilderRef, V: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildNUWNeg(Builder: LLVMBuilderRef, V: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFNeg(Builder: LLVMBuilderRef, V: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildNot(Builder: LLVMBuilderRef, V: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildMalloc(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildArrayMalloc(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Val: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildMemSet(Builder: LLVMBuilderRef, Ptr: LLVMValueRef, Val: LLVMValueRef, Len: LLVMValueRef, Align: number): LLVMValueRef;
    _LLVMBuildMemCpy(Builder: LLVMBuilderRef, Dst: LLVMValueRef, DstAlign: number, Src: LLVMValueRef, SrcAlign: number, Size: LLVMValueRef): LLVMValueRef;
    _LLVMBuildMemMove(Builder: LLVMBuilderRef, Dst: LLVMValueRef, DstAlign: number, Src: LLVMValueRef, SrcAlign: number, Size: LLVMValueRef): LLVMValueRef;
    _LLVMBuildAlloca(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildArrayAlloca(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Val: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFree(Builder: LLVMBuilderRef, PointerVal: LLVMValueRef): LLVMValueRef;
    _LLVMBuildLoad2(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, PointerVal: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildStore(Builder: LLVMBuilderRef, Val: LLVMValueRef, Ptr: LLVMValueRef): LLVMValueRef;
    _LLVMBuildGEP2(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: Pointer<LLVMValueRef[]>, NumIndices: number, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildInBoundsGEP2(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: Pointer<LLVMValueRef[]>, NumIndices: number, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildStructGEP2(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Idx: number, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildGlobalString(Builder: LLVMBuilderRef, Str: LLVMStringRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildGlobalStringPtr(Builder: LLVMBuilderRef, Str: LLVMStringRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMGetVolatile(MemoryAccessInst: LLVMValueRef): LLVMBool;
    _LLVMSetVolatile(MemoryAccessInst: LLVMValueRef, IsVolatile: LLVMBool): void;
    _LLVMGetWeak(CmpXchgInst: LLVMValueRef): LLVMBool;
    _LLVMSetWeak(CmpXchgInst: LLVMValueRef, IsWeak: LLVMBool): void;
    _LLVMGetOrdering(MemoryAccessInst: LLVMValueRef): LLVMAtomicOrdering;
    _LLVMSetOrdering(MemoryAccessInst: LLVMValueRef, Ordering: LLVMAtomicOrdering): void;
    _LLVMGetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef): LLVMAtomicRMWBinOp;
    _LLVMSetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef, BinOp: LLVMAtomicRMWBinOp): void;
    _LLVMBuildTrunc(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildZExt(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildSExt(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFPToUI(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFPToSI(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildUIToFP(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildSIToFP(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFPTrunc(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFPExt(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildPtrToInt(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildIntToPtr(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildBitCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildAddrSpaceCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildZExtOrBitCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildSExtOrBitCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildTruncOrBitCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildCast(Builder: LLVMBuilderRef, Op: LLVMOpcode, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildPointerCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildIntCast2(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, IsSigned: LLVMBool, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFPCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildIntCast(Builder: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMGetCastOpcode(Src: LLVMValueRef, SrcIsSigned: LLVMBool, DestTy: LLVMTypeRef, DestIsSigned: LLVMBool): LLVMOpcode;
    _LLVMBuildICmp(Builder: LLVMBuilderRef, Op: LLVMIntPredicate, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFCmp(Builder: LLVMBuilderRef, Op: LLVMRealPredicate, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildPhi(Builder: LLVMBuilderRef, Ty: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildCall2(Builder: LLVMBuilderRef, Type: LLVMTypeRef, Fn: LLVMValueRef, Args: Pointer<LLVMValueRef[]>, NumArgs: number, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildSelect(Builder: LLVMBuilderRef, If: LLVMValueRef, Then: LLVMValueRef, Else: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildVAArg(Builder: LLVMBuilderRef, List: LLVMValueRef, Ty: LLVMTypeRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildExtractElement(Builder: LLVMBuilderRef, VecVal: LLVMValueRef, Index: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildInsertElement(Builder: LLVMBuilderRef, VecVal: LLVMValueRef, EltVal: LLVMValueRef, Index: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildShuffleVector(Builder: LLVMBuilderRef, V1: LLVMValueRef, V2: LLVMValueRef, Mask: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildExtractValue(Builder: LLVMBuilderRef, AggVal: LLVMValueRef, Index: number, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildInsertValue(Builder: LLVMBuilderRef, AggVal: LLVMValueRef, EltVal: LLVMValueRef, Index: number, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFreeze(Builder: LLVMBuilderRef, Val: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildIsNull(Builder: LLVMBuilderRef, Val: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildIsNotNull(Builder: LLVMBuilderRef, Val: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildPtrDiff2(Builder: LLVMBuilderRef, ElemTy: LLVMTypeRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildFence(Builder: LLVMBuilderRef, ordering: LLVMAtomicOrdering, singleThread: LLVMBool, Name: LLVMStringRef): LLVMValueRef;
    _LLVMBuildAtomicRMW(Builder: LLVMBuilderRef, op: LLVMAtomicRMWBinOp, PTR: LLVMValueRef, Val: LLVMValueRef, ordering: LLVMAtomicOrdering, singleThread: LLVMBool): LLVMValueRef;
    _LLVMBuildAtomicCmpXchg(Builder: LLVMBuilderRef, Ptr: LLVMValueRef, Cmp: LLVMValueRef, New: LLVMValueRef, SuccessOrdering: LLVMAtomicOrdering, FailureOrdering: LLVMAtomicOrdering, SingleThread: LLVMBool): LLVMValueRef;
    _LLVMGetNumMaskElements(ShuffleVectorInst: LLVMValueRef): number;
    _LLVMGetUndefMaskElem(): number;
    _LLVMGetMaskValue(ShuffleVectorInst: LLVMValueRef, Elt: number): number;
    _LLVMIsAtomicSingleThread(AtomicInst: LLVMValueRef): LLVMBool;
    _LLVMSetAtomicSingleThread(AtomicInst: LLVMValueRef, SingleThread: LLVMBool): void;
    _LLVMGetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef): LLVMAtomicOrdering;
    _LLVMSetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering): void;
    _LLVMGetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef): LLVMAtomicOrdering;
    _LLVMSetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering): void;
    _LLVMCreateModuleProviderForExistingModule(Module: LLVMModuleRef): LLVMModuleProviderRef;
    _LLVMDisposeModuleProvider(Module: LLVMModuleProviderRef): void;
    _LLVMCreateMemoryBufferWithContentsOfFile(Path: LLVMStringRef, OutMemBuf: Pointer<LLVMMemoryBufferRef[]>, OutMessage: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMCreateMemoryBufferWithSTDIN(OutMemBuf: Pointer<LLVMMemoryBufferRef[]>, OutMessage: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMCreateMemoryBufferWithMemoryRange(InputData: LLVMStringRef, InputDataLength: number, BufferName: LLVMStringRef, RequiresNullTerminator: LLVMBool): LLVMMemoryBufferRef;
    _LLVMCreateMemoryBufferWithMemoryRangeCopy(InputData: LLVMStringRef, InputDataLength: number, BufferName: LLVMStringRef): LLVMMemoryBufferRef;
    _LLVMGetBufferStart(MemBuf: LLVMMemoryBufferRef): LLVMStringRef;
    _LLVMGetBufferSize(MemBuf: LLVMMemoryBufferRef): number;
    _LLVMDisposeMemoryBuffer(MemBuf: LLVMMemoryBufferRef): void;
    _LLVMGetGlobalPassRegistry(): LLVMPassRegistryRef;
    _LLVMCreatePassManager(): LLVMPassManagerRef;
    _LLVMCreateFunctionPassManagerForModule(Module: LLVMModuleRef): LLVMPassManagerRef;
    _LLVMCreateFunctionPassManager(MP: LLVMModuleProviderRef): LLVMPassManagerRef;
    _LLVMRunPassManager(PM: LLVMPassManagerRef, Module: LLVMModuleRef): LLVMBool;
    _LLVMInitializeFunctionPassManager(FPM: LLVMPassManagerRef): LLVMBool;
    _LLVMRunFunctionPassManager(FPM: LLVMPassManagerRef, F: LLVMValueRef): LLVMBool;
    _LLVMFinalizeFunctionPassManager(FPM: LLVMPassManagerRef): LLVMBool;
    _LLVMDisposePassManager(PM: LLVMPassManagerRef): void;
    _LLVMStartMultithreaded(): LLVMBool;
    _LLVMStopMultithreaded(): void;
    _LLVMIsMultithreaded(): LLVMBool;
    _LLVMDebugMetadataVersion(): number;
    _LLVMGetModuleDebugMetadataVersion(Module: LLVMModuleRef): number;
    _LLVMStripModuleDebugInfo(Module: LLVMModuleRef): LLVMBool;
    _LLVMCreateDIBuilderDisallowUnresolved(Module: LLVMModuleRef): LLVMDIBuilderRef;
    _LLVMCreateDIBuilder(Module: LLVMModuleRef): LLVMDIBuilderRef;
    _LLVMDisposeDIBuilder(Builder: LLVMDIBuilderRef): void;
    _LLVMDIBuilderFinalize(Builder: LLVMDIBuilderRef): void;
    _LLVMDIBuilderFinalizeSubprogram(Builder: LLVMDIBuilderRef, Subprogram: LLVMMetadataRef): void;
    _LLVMDIBuilderCreateCompileUnit(Builder: LLVMDIBuilderRef, Lang: LLVMDWARFSourceLanguage, FileRef: LLVMMetadataRef, Producer: LLVMStringRef, ProducerLen: number, isOptimized: LLVMBool, Flags: LLVMStringRef, FlagsLen: number, RuntimeVer: number, SplitName: LLVMStringRef, SplitNameLen: number, Kind: LLVMDWARFEmissionKind, DWOId: number, SplitDebugInlining: LLVMBool, DebugInfoForProfiling: LLVMBool, SysRoot: LLVMStringRef, SysRootLen: number, SDK: LLVMStringRef, SDKLen: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateFile(Builder: LLVMDIBuilderRef, Filename: LLVMStringRef, FilenameLen: number, Directory: LLVMStringRef, DirectoryLen: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateModule(Builder: LLVMDIBuilderRef, ParentScope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, ConfigMacros: LLVMStringRef, ConfigMacrosLen: number, IncludePath: LLVMStringRef, IncludePathLen: number, APINotesFile: LLVMStringRef, APINotesFileLen: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateNameSpace(Builder: LLVMDIBuilderRef, ParentScope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, ExportSymbols: LLVMBool): LLVMMetadataRef;
    _LLVMDIBuilderCreateFunction(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, LinkageName: LLVMStringRef, LinkageNameLen: number, File: LLVMMetadataRef, LineNo: number, Ty: LLVMMetadataRef, IsLocalToUnit: LLVMBool, IsDefinition: LLVMBool, ScopeLine: number, Flags: LLVMDIFlags, IsOptimized: LLVMBool): LLVMMetadataRef;
    _LLVMDIBuilderCreateLexicalBlock(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: number, Column: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateLexicalBlockFile(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Discriminator: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateImportedModuleFromNamespace(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, NS: LLVMMetadataRef, File: LLVMMetadataRef, Line: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateImportedModuleFromAlias(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, ImportedEntity: LLVMMetadataRef, File: LLVMMetadataRef, Line: number, Elements: Pointer<LLVMMetadataRef[]>, NumElements: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateImportedModuleFromModule(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Module: LLVMMetadataRef, File: LLVMMetadataRef, Line: number, Elements: Pointer<LLVMMetadataRef[]>, NumElements: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateImportedDeclaration(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Decl: LLVMMetadataRef, File: LLVMMetadataRef, Line: number, Name: LLVMStringRef, NameLen: number, Elements: Pointer<LLVMMetadataRef[]>, NumElements: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateDebugLocation(Ctx: LLVMContextRef, Line: number, Column: number, Scope: LLVMMetadataRef, InlinedAt: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDILocationGetLine(Location: LLVMMetadataRef): number;
    _LLVMDILocationGetColumn(Location: LLVMMetadataRef): number;
    _LLVMDILocationGetScope(Location: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDILocationGetInlinedAt(Location: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIScopeGetFile(Scope: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIFileGetDirectory(File: LLVMMetadataRef, Len: Pointer<number>): LLVMStringRef;
    _LLVMDIFileGetFilename(File: LLVMMetadataRef, Len: Pointer<number>): LLVMStringRef;
    _LLVMDIFileGetSource(File: LLVMMetadataRef, Len: Pointer<number>): LLVMStringRef;
    _LLVMDIBuilderGetOrCreateTypeArray(Builder: LLVMDIBuilderRef, Data: Pointer<LLVMMetadataRef[]>, NumElements: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateSubroutineType(Builder: LLVMDIBuilderRef, File: LLVMMetadataRef, ParameterTypes: Pointer<LLVMMetadataRef[]>, NumParameterTypes: number, Flags: LLVMDIFlags): LLVMMetadataRef;
    _LLVMDIBuilderCreateMacro(Builder: LLVMDIBuilderRef, ParentMacroFile: LLVMMetadataRef, Line: number, RecordType: LLVMDWARFMacinfoRecordType, Name: LLVMStringRef, NameLen: number, Value: LLVMStringRef, ValueLen: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateTempMacroFile(Builder: LLVMDIBuilderRef, ParentMacroFile: LLVMMetadataRef, Line: number, File: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIBuilderCreateEnumerator(Builder: LLVMDIBuilderRef, Name: LLVMStringRef, NameLen: number, Value: bigint, IsUnsigned: LLVMBool): LLVMMetadataRef;
    _LLVMDIBuilderCreateEnumerationType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, File: LLVMMetadataRef, LineNumber: number, SizeInBits: number, AlignInBits: number, Elements: Pointer<LLVMMetadataRef[]>, NumElements: number, ClassTy: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIBuilderCreateUnionType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, File: LLVMMetadataRef, LineNumber: number, SizeInBits: number, AlignInBits: number, Flags: LLVMDIFlags, Elements: Pointer<LLVMMetadataRef[]>, NumElements: number, RunTimeLang: number, UniqueId: LLVMStringRef, UniqueIdLen: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateArrayType(Builder: LLVMDIBuilderRef, Size: number, AlignInBits: number, Ty: LLVMMetadataRef, Subscripts: Pointer<LLVMMetadataRef[]>, NumSubscripts: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateVectorType(Builder: LLVMDIBuilderRef, Size: number, AlignInBits: number, Ty: LLVMMetadataRef, Subscripts: Pointer<LLVMMetadataRef[]>, NumSubscripts: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateUnspecifiedType(Builder: LLVMDIBuilderRef, Name: LLVMStringRef, NameLen: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateBasicType(Builder: LLVMDIBuilderRef, Name: LLVMStringRef, NameLen: number, SizeInBits: number, Encoding: LLVMDWARFTypeEncoding, Flags: LLVMDIFlags): LLVMMetadataRef;
    _LLVMDIBuilderCreatePointerType(Builder: LLVMDIBuilderRef, PointeeTy: LLVMMetadataRef, SizeInBits: number, AlignInBits: number, AddressSpace: number, Name: LLVMStringRef, NameLen: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateStructType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, File: LLVMMetadataRef, LineNumber: number, SizeInBits: number, AlignInBits: number, Flags: LLVMDIFlags, DerivedFrom: LLVMMetadataRef, Elements: Pointer<LLVMMetadataRef[]>, NumElements: number, RunTimeLang: number, VTableHolder: LLVMMetadataRef, UniqueId: LLVMStringRef, UniqueIdLen: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateMemberType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, File: LLVMMetadataRef, LineNo: number, SizeInBits: number, AlignInBits: number, OffsetInBits: number, Flags: LLVMDIFlags, Ty: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIBuilderCreateStaticMemberType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, File: LLVMMetadataRef, LineNumber: number, Type: LLVMMetadataRef, Flags: LLVMDIFlags, ConstantVal: LLVMValueRef, AlignInBits: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateMemberPointerType(Builder: LLVMDIBuilderRef, PointeeType: LLVMMetadataRef, ClassType: LLVMMetadataRef, SizeInBits: number, AlignInBits: number, Flags: LLVMDIFlags): LLVMMetadataRef;
    _LLVMDIBuilderCreateObjCIVar(Builder: LLVMDIBuilderRef, Name: LLVMStringRef, NameLen: number, File: LLVMMetadataRef, LineNo: number, SizeInBits: number, AlignInBits: number, OffsetInBits: number, Flags: LLVMDIFlags, Ty: LLVMMetadataRef, PropertyNode: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIBuilderCreateObjCProperty(Builder: LLVMDIBuilderRef, Name: LLVMStringRef, NameLen: number, File: LLVMMetadataRef, LineNo: number, GetterName: LLVMStringRef, GetterNameLen: number, SetterName: LLVMStringRef, SetterNameLen: number, PropertyAttributes: number, Ty: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIBuilderCreateObjectPointerType(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIBuilderCreateQualifiedType(Builder: LLVMDIBuilderRef, Tag: number, Type: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIBuilderCreateReferenceType(Builder: LLVMDIBuilderRef, Tag: number, Type: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIBuilderCreateNullPtrType(Builder: LLVMDIBuilderRef): LLVMMetadataRef;
    _LLVMDIBuilderCreateTypedef(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, File: LLVMMetadataRef, LineNo: number, Scope: LLVMMetadataRef, AlignInBits: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateInheritance(Builder: LLVMDIBuilderRef, Ty: LLVMMetadataRef, BaseTy: LLVMMetadataRef, BaseOffset: number, VBPtrOffset: number, Flags: LLVMDIFlags): LLVMMetadataRef;
    _LLVMDIBuilderCreateForwardDecl(Builder: LLVMDIBuilderRef, Tag: number, Name: LLVMStringRef, NameLen: number, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: number, RuntimeLang: number, SizeInBits: number, AlignInBits: number, UniqueIdentifier: LLVMStringRef, UniqueIdentifierLen: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateReplaceableCompositeType(Builder: LLVMDIBuilderRef, Tag: number, Name: LLVMStringRef, NameLen: number, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: number, RuntimeLang: number, SizeInBits: number, AlignInBits: number, Flags: LLVMDIFlags, UniqueIdentifier: LLVMStringRef, UniqueIdentifierLen: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateBitFieldMemberType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, File: LLVMMetadataRef, LineNumber: number, SizeInBits: number, OffsetInBits: number, StorageOffsetInBits: number, Flags: LLVMDIFlags, Type: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIBuilderCreateClassType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, File: LLVMMetadataRef, LineNumber: number, SizeInBits: number, AlignInBits: number, OffsetInBits: number, Flags: LLVMDIFlags, DerivedFrom: LLVMMetadataRef, Elements: Pointer<LLVMMetadataRef[]>, NumElements: number, VTableHolder: LLVMMetadataRef, TemplateParamsNode: LLVMMetadataRef, UniqueIdentifier: LLVMStringRef, UniqueIdentifierLen: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateArtificialType(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDITypeGetName(DType: LLVMMetadataRef, Length: Pointer<number>): LLVMStringRef;
    _LLVMDITypeGetSizeInBits(DType: LLVMMetadataRef): number;
    _LLVMDITypeGetOffsetInBits(DType: LLVMMetadataRef): number;
    _LLVMDITypeGetAlignInBits(DType: LLVMMetadataRef): number;
    _LLVMDITypeGetLine(DType: LLVMMetadataRef): number;
    _LLVMDITypeGetFlags(DType: LLVMMetadataRef): LLVMDIFlags;
    _LLVMDIBuilderGetOrCreateSubrange(Builder: LLVMDIBuilderRef, LowerBound: bigint, Count: bigint): LLVMMetadataRef;
    _LLVMDIBuilderGetOrCreateArray(Builder: LLVMDIBuilderRef, Data: Pointer<LLVMMetadataRef[]>, NumElements: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateExpression(Builder: LLVMDIBuilderRef, Addr: Pointer<bigint>, Length: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateConstantValueExpression(Builder: LLVMDIBuilderRef, Value: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateGlobalVariableExpression(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, Linkage: LLVMStringRef, LinkLen: number, File: LLVMMetadataRef, LineNo: number, Ty: LLVMMetadataRef, LocalToUnit: LLVMBool, Expr: LLVMMetadataRef, Decl: LLVMMetadataRef, AlignInBits: number): LLVMMetadataRef;
    _LLVMDIGlobalVariableExpressionGetVariable(GVE: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIGlobalVariableExpressionGetExpression(GVE: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIVariableGetFile(Var: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIVariableGetScope(Var: LLVMMetadataRef): LLVMMetadataRef;
    _LLVMDIVariableGetLine(Var: LLVMMetadataRef): number;
    _LLVMTemporaryMDNode(Ctx: LLVMContextRef, Data: Pointer<LLVMMetadataRef[]>, NumElements: number): LLVMMetadataRef;
    _LLVMDisposeTemporaryMDNode(TempNode: LLVMMetadataRef): void;
    _LLVMMetadataReplaceAllUsesWith(TempTargetMetadata: LLVMMetadataRef, Replacement: LLVMMetadataRef): void;
    _LLVMDIBuilderCreateTempGlobalVariableFwdDecl(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, Linkage: LLVMStringRef, LnkLen: number, File: LLVMMetadataRef, LineNo: number, Ty: LLVMMetadataRef, LocalToUnit: LLVMBool, Decl: LLVMMetadataRef, AlignInBits: number): LLVMMetadataRef;
    _LLVMDIBuilderInsertDeclareBefore(Builder: LLVMDIBuilderRef, Storage: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Instr: LLVMValueRef): LLVMValueRef;
    _LLVMDIBuilderInsertDeclareAtEnd(Builder: LLVMDIBuilderRef, Storage: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Block: LLVMBasicBlockRef): LLVMValueRef;
    _LLVMDIBuilderInsertDbgValueBefore(Builder: LLVMDIBuilderRef, Val: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Instr: LLVMValueRef): LLVMValueRef;
    _LLVMDIBuilderInsertDbgValueAtEnd(Builder: LLVMDIBuilderRef, Val: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Block: LLVMBasicBlockRef): LLVMValueRef;
    _LLVMDIBuilderCreateAutoVariable(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, File: LLVMMetadataRef, LineNo: number, Ty: LLVMMetadataRef, AlwaysPreserve: LLVMBool, Flags: LLVMDIFlags, AlignInBits: number): LLVMMetadataRef;
    _LLVMDIBuilderCreateParameterVariable(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: LLVMStringRef, NameLen: number, ArgNo: number, File: LLVMMetadataRef, LineNo: number, Ty: LLVMMetadataRef, AlwaysPreserve: LLVMBool, Flags: LLVMDIFlags): LLVMMetadataRef;
    _LLVMGetSubprogram(Func: LLVMValueRef): LLVMMetadataRef;
    _LLVMSetSubprogram(Func: LLVMValueRef, SP: LLVMMetadataRef): void;
    _LLVMDISubprogramGetLine(Subprogram: LLVMMetadataRef): number;
    _LLVMInstructionGetDebugLoc(Inst: LLVMValueRef): LLVMMetadataRef;
    _LLVMInstructionSetDebugLoc(Inst: LLVMValueRef, Loc: LLVMMetadataRef): void;
    _LLVMGetMetadataKind(Metadata: LLVMMetadataRef): LLVMMetadataKind;
    _LLVMCreateDisasm(TripleName: LLVMStringRef, DisInfo: Pointer<any>, TagType: number, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback): LLVMDisasmContextRef;
    _LLVMCreateDisasmCPU(Triple: LLVMStringRef, CPU: LLVMStringRef, DisInfo: Pointer<any>, TagType: number, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback): LLVMDisasmContextRef;
    _LLVMCreateDisasmCPUFeatures(Triple: LLVMStringRef, CPU: LLVMStringRef, Features: LLVMStringRef, DisInfo: Pointer<any>, TagType: number, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback): LLVMDisasmContextRef;
    _LLVMSetDisasmOptions(DC: LLVMDisasmContextRef, Options: number): number;
    _LLVMDisasmDispose(DC: LLVMDisasmContextRef): void;
    _LLVMDisasmInstruction(DC: LLVMDisasmContextRef, Bytes: Pointer<number>, BytesSize: number, PC: number, OutString: LLVMStringRef, OutStringSize: number): number;
    _LLVMGetErrorTypeId(Err: LLVMErrorRef): LLVMErrorTypeId;
    _LLVMConsumeError(Err: LLVMErrorRef): void;
    _LLVMGetErrorMessage(Err: LLVMErrorRef): LLVMStringRef;
    _LLVMDisposeErrorMessage(ErrMsg: LLVMStringRef): void;
    _LLVMGetStringErrorTypeId(): LLVMErrorTypeId;
    _LLVMCreateStringError(ErrMsg: LLVMStringRef): LLVMErrorRef;
    _LLVMInitializeWebAssemblyTargetInfo(): void;
    _LLVMInitializeWebAssemblyTarget(): void;
    _LLVMInitializeWebAssemblyTargetMC(): void;
    _LLVMInitializeWebAssemblyAsmPrinter(): void;
    _LLVMInitializeWebAssemblyAsmParser(): void;
    _LLVMInitializeWebAssemblyDisassembler(): void;
    _LLVMGetModuleDataLayout(Module: LLVMModuleRef): LLVMTargetDataRef;
    _LLVMSetModuleDataLayout(Module: LLVMModuleRef, DL: LLVMTargetDataRef): void;
    _LLVMCreateTargetData(StringRep: LLVMStringRef): LLVMTargetDataRef;
    _LLVMDisposeTargetData(TD: LLVMTargetDataRef): void;
    _LLVMAddTargetLibraryInfo(TLI: LLVMTargetLibraryInfoRef, PM: LLVMPassManagerRef): void;
    _LLVMCopyStringRepOfTargetData(TD: LLVMTargetDataRef): LLVMStringRef;
    _LLVMByteOrder(TD: LLVMTargetDataRef): number;
    _LLVMPointerSize(TD: LLVMTargetDataRef): number;
    _LLVMPointerSizeForAS(TD: LLVMTargetDataRef, AS: number): number;
    _LLVMIntPtrType(TD: LLVMTargetDataRef): LLVMTypeRef;
    _LLVMIntPtrTypeForAS(TD: LLVMTargetDataRef, AS: number): LLVMTypeRef;
    _LLVMIntPtrTypeInContext(Context: LLVMContextRef, TD: LLVMTargetDataRef): LLVMTypeRef;
    _LLVMIntPtrTypeForASInContext(Context: LLVMContextRef, TD: LLVMTargetDataRef, AS: number): LLVMTypeRef;
    _LLVMSizeOfTypeInBits(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): bigint;
    _LLVMStoreSizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): bigint;
    _LLVMABISizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): bigint;
    _LLVMABIAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): number;
    _LLVMCallFrameAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): number;
    _LLVMPreferredAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): number;
    _LLVMPreferredAlignmentOfGlobal(TD: LLVMTargetDataRef, GlobalVar: LLVMValueRef): number;
    _LLVMElementAtOffset(TD: LLVMTargetDataRef, StructTy: LLVMTypeRef, Offset: bigint): number;
    _LLVMOffsetOfElement(TD: LLVMTargetDataRef, StructTy: LLVMTypeRef, Element: number): bigint;
    _LLVMGetFirstTarget(): LLVMTargetRef;
    _LLVMGetNextTarget(T: LLVMTargetRef): LLVMTargetRef;
    _LLVMGetTargetFromName(Name: LLVMStringRef): LLVMTargetRef;
    _LLVMGetTargetFromTriple(Triple: LLVMStringRef, T: Pointer<LLVMTargetRef[]>, ErrorMessage: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMGetTargetName(T: LLVMTargetRef): LLVMStringRef;
    _LLVMGetTargetDescription(T: LLVMTargetRef): LLVMStringRef;
    _LLVMTargetHasJIT(T: LLVMTargetRef): LLVMBool;
    _LLVMTargetHasTargetMachine(T: LLVMTargetRef): LLVMBool;
    _LLVMTargetHasAsmBackend(T: LLVMTargetRef): LLVMBool;
    _LLVMCreateTargetMachine(T: LLVMTargetRef, Triple: LLVMStringRef, CPU: LLVMStringRef, Features: LLVMStringRef, Level: LLVMCodeGenOptLevel, Reloc: LLVMRelocMode, CodeModel: LLVMCodeModel): LLVMTargetMachineRef;
    _LLVMDisposeTargetMachine(T: LLVMTargetMachineRef): void;
    _LLVMGetTargetMachineTarget(T: LLVMTargetMachineRef): LLVMTargetRef;
    _LLVMGetTargetMachineTriple(T: LLVMTargetMachineRef): LLVMStringRef;
    _LLVMGetTargetMachineCPU(T: LLVMTargetMachineRef): LLVMStringRef;
    _LLVMGetTargetMachineFeatureString(T: LLVMTargetMachineRef): LLVMStringRef;
    _LLVMCreateTargetDataLayout(T: LLVMTargetMachineRef): LLVMTargetDataRef;
    _LLVMSetTargetMachineAsmVerbosity(T: LLVMTargetMachineRef, VerboseAsm: LLVMBool): void;
    _LLVMTargetMachineEmitToFile(T: LLVMTargetMachineRef, Module: LLVMModuleRef, Filename: LLVMStringRef, codegen: LLVMCodeGenFileType, ErrorMessage: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMTargetMachineEmitToMemoryBuffer(T: LLVMTargetMachineRef, Module: LLVMModuleRef, codegen: LLVMCodeGenFileType, ErrorMessage: Pointer<LLVMStringRef[]>, OutMemBuf: Pointer<LLVMMemoryBufferRef[]>): LLVMBool;
    _LLVMGetDefaultTargetTriple(): LLVMStringRef;
    _LLVMNormalizeTargetTriple(triple: LLVMStringRef): LLVMStringRef;
    _LLVMGetHostCPUName(): LLVMStringRef;
    _LLVMGetHostCPUFeatures(): LLVMStringRef;
    _LLVMAddAnalysisPasses(T: LLVMTargetMachineRef, PM: LLVMPassManagerRef): void;
    _LLVMLinkInMCJIT(): void;
    _LLVMLinkInInterpreter(): void;
    _LLVMCreateGenericValueOfInt(Ty: LLVMTypeRef, N: bigint, IsSigned: LLVMBool): LLVMGenericValueRef;
    _LLVMCreateGenericValueOfPointer(P: Pointer<any>): LLVMGenericValueRef;
    _LLVMCreateGenericValueOfFloat(Ty: LLVMTypeRef, N: number): LLVMGenericValueRef;
    _LLVMGenericValueIntWidth(GenValRef: LLVMGenericValueRef): number;
    _LLVMGenericValueToInt(GenVal: LLVMGenericValueRef, IsSigned: LLVMBool): bigint;
    _LLVMGenericValueToPointer(GenVal: LLVMGenericValueRef): Pointer<any>;
    _LLVMGenericValueToFloat(TyRef: LLVMTypeRef, GenVal: LLVMGenericValueRef): number;
    _LLVMDisposeGenericValue(GenVal: LLVMGenericValueRef): void;
    _LLVMCreateExecutionEngineForModule(OutEE: Pointer<LLVMExecutionEngineRef[]>, Module: LLVMModuleRef, OutError: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMCreateInterpreterForModule(OutInterp: Pointer<LLVMExecutionEngineRef[]>, Module: LLVMModuleRef, OutError: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMCreateJITCompilerForModule(OutJIT: Pointer<LLVMExecutionEngineRef[]>, Module: LLVMModuleRef, OptLevel: number, OutError: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMInitializeMCJITCompilerOptions(Options: any, SizeOfOptions: number): void;
    _LLVMCreateMCJITCompilerForModule(OutJIT: Pointer<LLVMExecutionEngineRef[]>, Module: LLVMModuleRef, Options: any, SizeOfOptions: number, OutError: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMDisposeExecutionEngine(EE: LLVMExecutionEngineRef): void;
    _LLVMRunStaticConstructors(EE: LLVMExecutionEngineRef): void;
    _LLVMRunStaticDestructors(EE: LLVMExecutionEngineRef): void;
    _LLVMRunFunctionAsMain(EE: LLVMExecutionEngineRef, F: LLVMValueRef, ArgC: number, ArgV: Pointer<LLVMStringRef[]>, EnvP: Pointer<LLVMStringRef[]>): number;
    _LLVMRunFunction(EE: LLVMExecutionEngineRef, F: LLVMValueRef, NumArgs: number, Args: Pointer<LLVMGenericValueRef[]>): LLVMGenericValueRef;
    _LLVMFreeMachineCodeForFunction(EE: LLVMExecutionEngineRef, F: LLVMValueRef): void;
    _LLVMAddModule(EE: LLVMExecutionEngineRef, Module: LLVMModuleRef): void;
    _LLVMRemoveModule(EE: LLVMExecutionEngineRef, Module: LLVMModuleRef, OutMod: Pointer<LLVMModuleRef[]>, OutError: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMFindFunction(EE: LLVMExecutionEngineRef, Name: LLVMStringRef, OutFn: Pointer<LLVMValueRef[]>): LLVMBool;
    _LLVMRecompileAndRelinkFunction(EE: LLVMExecutionEngineRef, Fn: LLVMValueRef): Pointer<any>;
    _LLVMGetExecutionEngineTargetData(EE: LLVMExecutionEngineRef): LLVMTargetDataRef;
    _LLVMGetExecutionEngineTargetMachine(EE: LLVMExecutionEngineRef): LLVMTargetMachineRef;
    _LLVMAddGlobalMapping(EE: LLVMExecutionEngineRef, Global: LLVMValueRef, Addr: Pointer<any>): void;
    _LLVMGetPointerToGlobal(EE: LLVMExecutionEngineRef, Global: LLVMValueRef): Pointer<any>;
    _LLVMGetGlobalValueAddress(EE: LLVMExecutionEngineRef, Name: LLVMStringRef): number;
    _LLVMGetFunctionAddress(EE: LLVMExecutionEngineRef, Name: LLVMStringRef): number;
    _LLVMExecutionEngineGetErrMsg(EE: LLVMExecutionEngineRef, OutError: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMCreateSimpleMCJITMemoryManager(Opaque: Pointer<any>, AllocateCodeSection: LLVMMemoryManagerAllocateCodeSectionCallback, AllocateDataSection: LLVMMemoryManagerAllocateDataSectionCallback, FinalizeMemory: LLVMMemoryManagerFinalizeMemoryCallback, Destroy: LLVMMemoryManagerDestroyCallback): LLVMMCJITMemoryManagerRef;
    _LLVMDisposeMCJITMemoryManager(MM: LLVMMCJITMemoryManagerRef): void;
    _LLVMCreateGDBRegistrationListener(): LLVMJITEventListenerRef;
    _LLVMCreateIntelJITEventListener(): LLVMJITEventListenerRef;
    _LLVMCreateOProfileJITEventListener(): LLVMJITEventListenerRef;
    _LLVMCreatePerfJITEventListener(): LLVMJITEventListenerRef;
    _LLVMInitializeCore(R: LLVMPassRegistryRef): void;
    _LLVMInitializeTransformUtils(R: LLVMPassRegistryRef): void;
    _LLVMInitializeScalarOpts(R: LLVMPassRegistryRef): void;
    _LLVMInitializeVectorization(R: LLVMPassRegistryRef): void;
    _LLVMInitializeInstCombine(R: LLVMPassRegistryRef): void;
    _LLVMInitializeIPO(R: LLVMPassRegistryRef): void;
    _LLVMInitializeAnalysis(R: LLVMPassRegistryRef): void;
    _LLVMInitializeIPA(R: LLVMPassRegistryRef): void;
    _LLVMInitializeCodeGen(R: LLVMPassRegistryRef): void;
    _LLVMInitializeTarget(R: LLVMPassRegistryRef): void;
    _LLVMParseIRInContext(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: Pointer<LLVMModuleRef[]>, OutMessage: Pointer<LLVMStringRef[]>): LLVMBool;
    _LLVMLinkModules2(Dest: LLVMModuleRef, Src: LLVMModuleRef): LLVMBool;
    _LLVMCreateBinary(MemBuf: LLVMMemoryBufferRef, Context: LLVMContextRef, ErrorMessage: Pointer<LLVMStringRef[]>): LLVMBinaryRef;
    _LLVMDisposeBinary(BR: LLVMBinaryRef): void;
    _LLVMBinaryCopyMemoryBuffer(BR: LLVMBinaryRef): LLVMMemoryBufferRef;
    _LLVMBinaryGetType(BR: LLVMBinaryRef): LLVMBinaryType;
    _LLVMMachOUniversalBinaryCopyObjectForArch(BR: LLVMBinaryRef, Arch: LLVMStringRef, ArchLen: number, ErrorMessage: Pointer<LLVMStringRef[]>): LLVMBinaryRef;
    _LLVMObjectFileCopySectionIterator(BR: LLVMBinaryRef): LLVMSectionIteratorRef;
    _LLVMObjectFileIsSectionIteratorAtEnd(BR: LLVMBinaryRef, SI: LLVMSectionIteratorRef): LLVMBool;
    _LLVMObjectFileCopySymbolIterator(BR: LLVMBinaryRef): LLVMSymbolIteratorRef;
    _LLVMObjectFileIsSymbolIteratorAtEnd(BR: LLVMBinaryRef, SI: LLVMSymbolIteratorRef): LLVMBool;
    _LLVMDisposeSectionIterator(SI: LLVMSectionIteratorRef): void;
    _LLVMMoveToNextSection(SI: LLVMSectionIteratorRef): void;
    _LLVMMoveToContainingSection(Sect: LLVMSectionIteratorRef, Sym: LLVMSymbolIteratorRef): void;
    _LLVMDisposeSymbolIterator(SI: LLVMSymbolIteratorRef): void;
    _LLVMMoveToNextSymbol(SI: LLVMSymbolIteratorRef): void;
    _LLVMGetSectionName(SI: LLVMSectionIteratorRef): LLVMStringRef;
    _LLVMGetSectionSize(SI: LLVMSectionIteratorRef): number;
    _LLVMGetSectionContents(SI: LLVMSectionIteratorRef): LLVMStringRef;
    _LLVMGetSectionAddress(SI: LLVMSectionIteratorRef): number;
    _LLVMGetSectionContainsSymbol(SI: LLVMSectionIteratorRef, Sym: LLVMSymbolIteratorRef): LLVMBool;
    _LLVMGetRelocations(Section: LLVMSectionIteratorRef): LLVMRelocationIteratorRef;
    _LLVMDisposeRelocationIterator(RI: LLVMRelocationIteratorRef): void;
    _LLVMIsRelocationIteratorAtEnd(Section: LLVMSectionIteratorRef, RI: LLVMRelocationIteratorRef): LLVMBool;
    _LLVMMoveToNextRelocation(RI: LLVMRelocationIteratorRef): void;
    _LLVMGetSymbolName(SI: LLVMSymbolIteratorRef): LLVMStringRef;
    _LLVMGetSymbolAddress(SI: LLVMSymbolIteratorRef): number;
    _LLVMGetSymbolSize(SI: LLVMSymbolIteratorRef): number;
    _LLVMGetRelocationOffset(RI: LLVMRelocationIteratorRef): number;
    _LLVMGetRelocationSymbol(RI: LLVMRelocationIteratorRef): LLVMSymbolIteratorRef;
    _LLVMGetRelocationType(RI: LLVMRelocationIteratorRef): number;
    _LLVMGetRelocationTypeName(RI: LLVMRelocationIteratorRef): LLVMStringRef;
    _LLVMGetRelocationValueString(RI: LLVMRelocationIteratorRef): LLVMStringRef;
    _LLVMCreateObjectFile(MemBuf: LLVMMemoryBufferRef): LLVMObjectFileRef;
    _LLVMDisposeObjectFile(ObjectFile: LLVMObjectFileRef): void;
    _LLVMGetSections(ObjectFile: LLVMObjectFileRef): LLVMSectionIteratorRef;
    _LLVMIsSectionIteratorAtEnd(ObjectFile: LLVMObjectFileRef, SI: LLVMSectionIteratorRef): LLVMBool;
    _LLVMGetSymbols(ObjectFile: LLVMObjectFileRef): LLVMSymbolIteratorRef;
    _LLVMIsSymbolIteratorAtEnd(ObjectFile: LLVMObjectFileRef, SI: LLVMSymbolIteratorRef): LLVMBool;
    _LLVMLoadLibraryPermanently(Filename: LLVMStringRef): LLVMBool;
    _LLVMParseCommandLineOptions(argc: number, argv: Pointer<LLVMStringRef[]>, Overview: LLVMStringRef): void;
    _LLVMSearchForAddressOfSymbol(symbolName: LLVMStringRef): Pointer<any>;
    _LLVMAddSymbol(symbolName: LLVMStringRef, symbolValue: Pointer<any>): void;
}
export declare function lower(str: string): LLVMStringRef;
export declare function lift(ptr: Pointer<"LLVMStringRef">): string;
export declare function lowerPointerArray<T extends number>(elements: T[]): Pointer<T[]>;
//# sourceMappingURL=index.d.ts.map