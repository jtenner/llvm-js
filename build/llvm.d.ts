//@ts-ignore
import llvm from "./llvm-wasm.mjs";
export default llvm as Promise<Module>;
const LLVM = await (llvm as Promise<Module>);
export type Pointer<T> = number & { type: T };

export type LLVMBool = 1|0;
export type LLVMMemoryBufferRef = Pointer<"LLVMMemoryBufferRef">;
export type LLVMContextRef = Pointer<"LLVMContextRef">;
export type LLVMModuleRef = Pointer<"LLVMModuleRef">;
export type LLVMTypeRef = Pointer<"LLVMTypeRef">;
export type LLVMValueRef = Pointer<"LLVMValueRef">;
export type LLVMBasicBlockRef = Pointer<"LLVMBasicBlockRef">;
export type LLVMMetadataRef = Pointer<"LLVMMetadataRef">;
export type LLVMNamedMDNodeRef = Pointer<"LLVMNamedMDNodeRef">;
export type LLVMValueMetadataEntry = Pointer<"LLVMValueMetadataEntry">;
export type LLVMBuilderRef = Pointer<"LLVMBuilderRef">;
export type LLVMDIBuilderRef = Pointer<"LLVMDIBuilderRef">;
export type LLVMModuleProviderRef = Pointer<"LLVMModuleProviderRef">;
export type LLVMPassManagerRef = Pointer<"LLVMPassManagerRef">;
export type LLVMPassRegistryRef = Pointer<"LLVMPassRegistryRef">;
export type LLVMUseRef = Pointer<"LLVMUseRef">;
export type LLVMAttributeRef = Pointer<"LLVMAttributeRef">;
export type LLVMDiagnosticInfoRef = Pointer<"LLVMDiagnosticInfoRef">;
export type LLVMComdatRef = Pointer<"LLVMComdatRef">;
export type LLVMModuleFlagEntry = Pointer<"LLVMModuleFlagEntry">;
export type LLVMJITEventListenerRef = Pointer<"LLVMJITEventListenerRef">;
export type LLVMBinaryRef = Pointer<"LLVMBinaryRef">;
export type LLVMVerifierFailureAction = Pointer<"LLVMVerifierFailureAction">;
export type LLVMComdatSelectionKind = Pointer<"LLVMComdatSelectionKind">;
export type LLVMFatalErrorHandler = Pointer<"LLVMFatalErrorHandler">;
export type LLVMOpcode = Pointer<"LLVMOpcode">;
export type LLVMTypeKind = Pointer<"LLVMTypeKind">;
export type LLVMLinkage = Pointer<"LLVMLinkage">;
export type LLVMVisibility = Pointer<"LLVMVisibility">;
export type LLVMUnnamedAddr = Pointer<"LLVMUnnamedAddr">;
export type LLVMDLLStorageClass = Pointer<"LLVMDLLStorageClass">;
export type LLVMCallConv = Pointer<"LLVMCallConv">;
export type LLVMValueKind = Pointer<"LLVMValueKind">;
export type LLVMIntPredicate = Pointer<"LLVMIntPredicate">;
export type LLVMRealPredicate = Pointer<"LLVMRealPredicate">;
export type LLVMLandingPadClauseTy = Pointer<"LLVMLandingPadClauseTy">;
export type LLVMThreadLocalMode = Pointer<"LLVMThreadLocalMode">;
export type LLVMAtomicOrdering = Pointer<"LLVMAtomicOrdering">;
export type LLVMAtomicRMWBinOp = Pointer<"LLVMAtomicRMWBinOp">;
export type LLVMDiagnosticSeverity = Pointer<"LLVMDiagnosticSeverity">;
export type LLVMInlineAsmDialect = Pointer<"LLVMInlineAsmDialect">;
export type LLVMModuleFlagBehavior = Pointer<"LLVMModuleFlagBehavior">;
export type LLVMAttributeIndex = Pointer<"LLVMAttributeIndex">;
export type LLVMDiagnosticHandler = Pointer<"LLVMDiagnosticHandler">;
export type LLVMYieldCallback = Pointer<"LLVMYieldCallback">;
export type LLVMDIFlags = Pointer<"LLVMDIFlags">;
export type LLVMDWARFSourceLanguage = Pointer<"LLVMDWARFSourceLanguage">;
export type LLVMDWARFEmissionKind = Pointer<"LLVMDWARFEmissionKind">;
export type LLVMMetadataKind = Pointer<"LLVMMetadataKind">;
export type LLVMDWARFTypeEncoding = Pointer<"LLVMDWARFTypeEncoding">;
export type LLVMDWARFMacinfoRecordType = Pointer<"LLVMDWARFMacinfoRecordType">;
export type LLVMDisasmContextRef = Pointer<"LLVMDisasmContextRef">;
export type LLVMOpInfoCallback = Pointer<"LLVMOpInfoCallback">;
export type LLVMSymbolLookupCallback = Pointer<"LLVMSymbolLookupCallback">;
export type LLVMErrorRef = Pointer<"LLVMErrorRef">;
export type LLVMErrorTypeId = Pointer<"LLVMErrorTypeId">;
export type LLVMTargetDataRef = Pointer<"LLVMTargetDataRef">;
export type LLVMTargetLibraryInfoRef = Pointer<"LLVMTargetLibraryInfoRef">;
export type LLVMTargetMachineRef = Pointer<"LLVMTargetMachineRef">;
export type LLVMTargetRef = Pointer<"LLVMTargetRef">;
export type LLVMCodeGenOptLevel = Pointer<"LLVMCodeGenOptLevel">;
export type LLVMRelocMode = Pointer<"LLVMRelocMode">;
export type LLVMCodeModel = Pointer<"LLVMCodeModel">;
export type LLVMCodeGenFileType = Pointer<"LLVMCodeGenFileType">;
export type LLVMGenericValueRef = Pointer<"LLVMGenericValueRef">;
export type LLVMExecutionEngineRef = Pointer<"LLVMExecutionEngineRef">;
export type LLVMMCJITMemoryManagerRef = Pointer<"LLVMMCJITMemoryManagerRef">;
export type LLVMMemoryManagerAllocateCodeSectionCallback = Pointer<"LLVMMemoryManagerAllocateCodeSectionCallback">;
export type LLVMMemoryManagerAllocateDataSectionCallback = Pointer<"LLVMMemoryManagerAllocateDataSectionCallback">;
export type LLVMMemoryManagerFinalizeMemoryCallback = Pointer<"LLVMMemoryManagerFinalizeMemoryCallback">;
export type LLVMMemoryManagerDestroyCallback = Pointer<"LLVMMemoryManagerDestroyCallback">;
export type LLVMLinkerMode = Pointer<"LLVMLinkerMode">;
export type LLVMSectionIteratorRef = Pointer<"LLVMSectionIteratorRef">;
export type LLVMSymbolIteratorRef = Pointer<"LLVMSymbolIteratorRef">;
export type LLVMRelocationIteratorRef = Pointer<"LLVMRelocationIteratorRef">;
export type LLVMBinaryType = Pointer<"LLVMBinaryType">;
export type LLVMObjectFileRef = Pointer<"LLVMObjectFileRef">;

export interface Module {
  HEAPU8: Uint8Array;
  HEAPU32: Uint32Array;
  ready(): Promise<Module>;
  _LLVMAppendBasicBlock(func: LLVMFuncRef, name: LLVMStringRef): LLVMBasicBlockRef;

  _LLVMBuildAdd(B: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef
  _LLVMBuildGlobalStringPtr(builder: LLVMBuilderRef, str: LLVMStringRef, name: LLVMStringRef): LLVMValueRef;
  _LLVMCreateBuilder(): LLVMBuilderRef;
  _LLVMConstInt(type: LLVMTypeRef, value: bigint, signExtend: LLVMBool): LLVMValueRef;
  _LLVMConstReal(type: LLVMTypeRef, value: number): LLVMValueRef;
  _LLVMConstString(str: LLVMStringRef, len: number, doNotNullTerminate: LLVMBool): LLVMValueRef;
  _LLVMGetParam(func: LLVMFuncRef, index: number): LLVMValueRef;
  _LLVMGetPoison(type: LLVMTypeRef): LLVMValueRef;
  _LLVMInt1Type(): LLVMTypeRef;
  _LLVMInt8Type(): LLVMTypeRef;
  _LLVMInt16Type(): LLVMTypeRef;
  _LLVMInt32Type(): LLVMTypeRef;
  _LLVMInt64Type(): LLVMTypeRef;
  _LLVMFloatType(): LLVMTypeRef;
  _LLVMDoubleType(): LLVMTypeRef;
  _LLVMVoidType(): LLVMTypeRef;
  _LLVMAddFunction(mod: LLVMModuleRef, name: LLVMStringRef, funcType: LLVMTypeRef): LLVMFuncRef;
  _LLVMFunctionType(returnType: LLVMTypeRef, parameterTypes: Pointer<LLVMTypeRef>, count: number, isVarArg: LLVMBool): LLVMTypeRef;
  _LLVMModuleCreateWithName(name: LLVMStringRef): LLVMModuleRef;
  _LLVMPositionBuilderAtEnd(builder: LLVMBuilderRef, block: LLVMBasicBlockRef): void;
  _malloc<T>(size: number): Pointer<T>;
  _free(ptr: Pointer<any>): void;
}

export declare function _LLVMVerifyModule(M: LLVMModuleRef, Action: LLVMVerifierFailureAction, OutMessage: string[]): LLVMBool;
export declare function _LLVMVerifyFunction(Fn: LLVMValueRef, Action: LLVMVerifierFailureAction): LLVMBool;
export declare function _LLVMViewFunctionCFG(Fn: LLVMValueRef): void;
export declare function _LLVMViewFunctionCFGOnly(Fn: LLVMValueRef): void;
export declare function _LLVMParseBitcode(MemBuf: LLVMMemoryBufferRef, OutModule: LLVMModuleRef, OutMessage: string[]): LLVMBool;
export declare function _LLVMParseBitcode2(MemBuf: LLVMMemoryBufferRef, OutModule: LLVMModuleRef): LLVMBool;
export declare function _LLVMParseBitcodeInContext(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutModule: LLVMModuleRef, OutMessage: string[]): LLVMBool;
export declare function _LLVMParseBitcodeInContext2(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutModule: LLVMModuleRef): LLVMBool;
export declare function _LLVMGetBitcodeModuleInContext(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: LLVMModuleRef, OutMessage: string[]): LLVMBool;
export declare function _LLVMGetBitcodeModuleInContext2(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: LLVMModuleRef): LLVMBool;
export declare function _LLVMGetBitcodeModule(MemBuf: LLVMMemoryBufferRef, OutM: LLVMModuleRef, OutMessage: string[]): LLVMBool;
export declare function _LLVMGetBitcodeModule2(MemBuf: LLVMMemoryBufferRef, OutM: LLVMModuleRef): LLVMBool;
export declare function _LLVMWriteBitcodeToFile(M: LLVMModuleRef, Path: string): int;
export declare function _LLVMWriteBitcodeToFD(M: LLVMModuleRef, FD: number, ShouldClose: number, Unbuffered: number): int;
export declare function _LLVMWriteBitcodeToFileHandle(M: LLVMModuleRef, Handle: number): int;
export declare function _LLVMWriteBitcodeToMemoryBuffer(M: LLVMModuleRef): LLVMMemoryBufferRef;
export declare function _LLVMGetOrInsertComdat(M: LLVMModuleRef, Name: string): LLVMComdatRef;
export declare function _LLVMGetComdat(V: LLVMValueRef): LLVMComdatRef;
export declare function _LLVMSetComdat(V: LLVMValueRef, C: LLVMComdatRef): void;
export declare function _LLVMGetComdatSelectionKind(C: LLVMComdatRef): LLVMComdatSelectionKind;
export declare function _LLVMSetComdatSelectionKind(C: LLVMComdatRef, Kind: LLVMComdatSelectionKind): void;
export declare function _LLVMInstallFatalErrorHandler(Handler: LLVMFatalErrorHandler): void;
export declare function _LLVMResetFatalErrorHandler(): void;
export declare function _LLVMEnablePrettyStackTrace(): void;
export declare function _LLVMInitializeCore(R: LLVMPassRegistryRef): void;
export declare function _LLVMShutdown(): void;
export declare function _LLVMGetVersion(Major: any, Minor: any, Patch: any): void;
export declare function _LLVMCreateMessage(Message: string): char;
export declare function _LLVMDisposeMessage(Message: any): void;
export declare function _LLVMContextCreate(): LLVMContextRef;
export declare function _LLVMGetGlobalContext(): LLVMContextRef;
export declare function _LLVMContextSetDiagnosticHandler(C: LLVMContextRef, Handler: LLVMDiagnosticHandler, DiagnosticContext: any): void;
export declare function _LLVMContextGetDiagnosticHandler(C: LLVMContextRef): LLVMDiagnosticHandler;
export declare function _LLVMContextGetDiagnosticContext(C: LLVMContextRef): void;
export declare function _LLVMContextSetYieldCallback(C: LLVMContextRef, Callback: LLVMYieldCallback, OpaqueHandle: any): void;
export declare function _LLVMContextShouldDiscardValueNames(C: LLVMContextRef): LLVMBool;
export declare function _LLVMContextSetDiscardValueNames(C: LLVMContextRef, Discard: LLVMBool): void;
export declare function _LLVMContextDispose(C: LLVMContextRef): void;
export declare function _LLVMGetDiagInfoDescription(DI: LLVMDiagnosticInfoRef): char;
export declare function _LLVMGetDiagInfoSeverity(DI: LLVMDiagnosticInfoRef): LLVMDiagnosticSeverity;
export declare function _LLVMGetMDKindIDInContext(C: LLVMContextRef, Name: string, SLen: number): unsigned;
export declare function _LLVMGetMDKindID(Name: string, SLen: number): unsigned;
export declare function _LLVMGetEnumAttributeKindForName(Name: string, SLen: number): unsigned;
export declare function _LLVMGetLastEnumAttributeKind(): unsigned;
export declare function _LLVMCreateEnumAttribute(C: LLVMContextRef, KindID: number, Val: number): LLVMAttributeRef;
export declare function _LLVMGetEnumAttributeKind(A: LLVMAttributeRef): unsigned;
export declare function _LLVMGetEnumAttributeValue(A: LLVMAttributeRef): uint64_t;
export declare function _LLVMCreateTypeAttribute(C: LLVMContextRef, KindID: number, type_ref: LLVMTypeRef): LLVMAttributeRef;
export declare function _LLVMGetTypeAttributeValue(A: LLVMAttributeRef): LLVMTypeRef;
export declare function _LLVMCreateStringAttribute(C: LLVMContextRef, K: string, KLength: number, V: string, VLength: number): LLVMAttributeRef;
export declare function _LLVMGetStringAttributeKind(A: LLVMAttributeRef, Length: any): const;
export declare function _LLVMGetStringAttributeValue(A: LLVMAttributeRef, Length: any): const;
export declare function _LLVMIsEnumAttribute(A: LLVMAttributeRef): LLVMBool;
export declare function _LLVMIsStringAttribute(A: LLVMAttributeRef): LLVMBool;
export declare function _LLVMIsTypeAttribute(A: LLVMAttributeRef): LLVMBool;
export declare function _LLVMGetTypeByName2(C: LLVMContextRef, Name: string): LLVMTypeRef;
export declare function _LLVMModuleCreateWithName(ModuleID: string): LLVMModuleRef;
export declare function _LLVMModuleCreateWithNameInContext(ModuleID: string, C: LLVMContextRef): LLVMModuleRef;
export declare function _LLVMCloneModule(M: LLVMModuleRef): LLVMModuleRef;
export declare function _LLVMDisposeModule(M: LLVMModuleRef): void;
export declare function _LLVMGetModuleIdentifier(M: LLVMModuleRef, Len: any): const;
export declare function _LLVMSetModuleIdentifier(M: LLVMModuleRef, Ident: string, Len: number): void;
export declare function _LLVMGetSourceFileName(M: LLVMModuleRef, Len: any): const;
export declare function _LLVMSetSourceFileName(M: LLVMModuleRef, Name: string, Len: number): void;
export declare function _LLVMGetDataLayoutStr(M: LLVMModuleRef): const;
export declare function _LLVMGetDataLayout(M: LLVMModuleRef): const;
export declare function _LLVMSetDataLayout(M: LLVMModuleRef, DataLayoutStr: string): void;
export declare function _LLVMGetTarget(M: LLVMModuleRef): const;
export declare function _LLVMSetTarget(M: LLVMModuleRef, Triple: string): void;
export declare function _LLVMCopyModuleFlagsMetadata(M: LLVMModuleRef, Len: any): LLVMModuleFlagEntry;
export declare function _LLVMDisposeModuleFlagsMetadata(Entries: LLVMModuleFlagEntry): void;
export declare function _LLVMModuleFlagEntriesGetFlagBehavior(Entries: LLVMModuleFlagEntry, Index: number): LLVMModuleFlagBehavior;
export declare function _LLVMModuleFlagEntriesGetKey(Entries: LLVMModuleFlagEntry, Index: number, Len: any): const;
export declare function _LLVMModuleFlagEntriesGetMetadata(Entries: LLVMModuleFlagEntry, Index: number): LLVMMetadataRef;
export declare function _LLVMGetModuleFlag(M: LLVMModuleRef, Key: string, KeyLen: number): LLVMMetadataRef;
export declare function _LLVMAddModuleFlag(M: LLVMModuleRef, Behavior: LLVMModuleFlagBehavior, Key: string, KeyLen: number, Val: LLVMMetadataRef): void;
export declare function _LLVMDumpModule(M: LLVMModuleRef): void;
export declare function _LLVMPrintModuleToFile(M: LLVMModuleRef, Filename: string, ErrorMessage: string[]): LLVMBool;
export declare function _LLVMPrintModuleToString(M: LLVMModuleRef): char;
export declare function _LLVMGetModuleInlineAsm(M: LLVMModuleRef, Len: any): const;
export declare function _LLVMSetModuleInlineAsm2(M: LLVMModuleRef, Asm: string, Len: number): void;
export declare function _LLVMAppendModuleInlineAsm(M: LLVMModuleRef, Asm: string, Len: number): void;
export declare function _LLVMGetInlineAsm(Ty: LLVMTypeRef, AsmString: any, AsmStringSize: number, Constraints: any, ConstraintsSize: number, HasSideEffects: LLVMBool, IsAlignStack: LLVMBool, Dialect: LLVMInlineAsmDialect, CanThrow: LLVMBool): LLVMValueRef;
export declare function _LLVMGetModuleContext(M: LLVMModuleRef): LLVMContextRef;
export declare function _LLVMGetTypeByName(M: LLVMModuleRef, Name: string): LLVMTypeRef;
export declare function _LLVMGetFirstNamedMetadata(M: LLVMModuleRef): LLVMNamedMDNodeRef;
export declare function _LLVMGetLastNamedMetadata(M: LLVMModuleRef): LLVMNamedMDNodeRef;
export declare function _LLVMGetNextNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef): LLVMNamedMDNodeRef;
export declare function _LLVMGetPreviousNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef): LLVMNamedMDNodeRef;
export declare function _LLVMGetNamedMetadata(M: LLVMModuleRef, Name: string, NameLen: number): LLVMNamedMDNodeRef;
export declare function _LLVMGetOrInsertNamedMetadata(M: LLVMModuleRef, Name: string, NameLen: number): LLVMNamedMDNodeRef;
export declare function _LLVMGetNamedMetadataName(NamedMD: LLVMNamedMDNodeRef, NameLen: any): const;
export declare function _LLVMGetNamedMetadataNumOperands(M: LLVMModuleRef, Name: string): unsigned;
export declare function _LLVMGetNamedMetadataOperands(M: LLVMModuleRef, Name: string, Dest: LLVMValueRef): void;
export declare function _LLVMAddNamedMetadataOperand(M: LLVMModuleRef, Name: string, Val: LLVMValueRef): void;
export declare function _LLVMGetDebugLocDirectory(Val: LLVMValueRef, Length: any): const;
export declare function _LLVMGetDebugLocFilename(Val: LLVMValueRef, Length: any): const;
export declare function _LLVMGetDebugLocLine(Val: LLVMValueRef): unsigned;
export declare function _LLVMGetDebugLocColumn(Val: LLVMValueRef): unsigned;
export declare function _LLVMAddFunction(M: LLVMModuleRef, Name: string, FunctionTy: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMGetNamedFunction(M: LLVMModuleRef, Name: string): LLVMValueRef;
export declare function _LLVMGetFirstFunction(M: LLVMModuleRef): LLVMValueRef;
export declare function _LLVMGetLastFunction(M: LLVMModuleRef): LLVMValueRef;
export declare function _LLVMGetNextFunction(Fn: LLVMValueRef): LLVMValueRef;
export declare function _LLVMGetPreviousFunction(Fn: LLVMValueRef): LLVMValueRef;
export declare function _LLVMSetModuleInlineAsm(M: LLVMModuleRef, Asm: string): void;
export declare function _LLVMGetTypeKind(Ty: LLVMTypeRef): LLVMTypeKind;
export declare function _LLVMTypeIsSized(Ty: LLVMTypeRef): LLVMBool;
export declare function _LLVMGetTypeContext(Ty: LLVMTypeRef): LLVMContextRef;
export declare function _LLVMDumpType(Val: LLVMTypeRef): void;
export declare function _LLVMPrintTypeToString(Val: LLVMTypeRef): char;
export declare function _LLVMInt1TypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMInt8TypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMInt16TypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMInt32TypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMInt64TypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMInt128TypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMIntTypeInContext(C: LLVMContextRef, NumBits: number): LLVMTypeRef;
export declare function _LLVMInt1Type(): LLVMTypeRef;
export declare function _LLVMInt8Type(): LLVMTypeRef;
export declare function _LLVMInt16Type(): LLVMTypeRef;
export declare function _LLVMInt32Type(): LLVMTypeRef;
export declare function _LLVMInt64Type(): LLVMTypeRef;
export declare function _LLVMInt128Type(): LLVMTypeRef;
export declare function _LLVMIntType(NumBits: number): LLVMTypeRef;
export declare function _LLVMGetIntTypeWidth(IntegerTy: LLVMTypeRef): unsigned;
export declare function _LLVMHalfTypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMBFloatTypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMFloatTypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMDoubleTypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMX86FP80TypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMFP128TypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMPPCFP128TypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMHalfType(): LLVMTypeRef;
export declare function _LLVMBFloatType(): LLVMTypeRef;
export declare function _LLVMFloatType(): LLVMTypeRef;
export declare function _LLVMDoubleType(): LLVMTypeRef;
export declare function _LLVMX86FP80Type(): LLVMTypeRef;
export declare function _LLVMFP128Type(): LLVMTypeRef;
export declare function _LLVMPPCFP128Type(): LLVMTypeRef;
export declare function _LLVMFunctionType(ReturnType: LLVMTypeRef, ParamTypes: LLVMTypeRef, ParamCount: number, IsVarArg: LLVMBool): LLVMTypeRef;
export declare function _LLVMIsFunctionVarArg(FunctionTy: LLVMTypeRef): LLVMBool;
export declare function _LLVMGetReturnType(FunctionTy: LLVMTypeRef): LLVMTypeRef;
export declare function _LLVMCountParamTypes(FunctionTy: LLVMTypeRef): unsigned;
export declare function _LLVMGetParamTypes(FunctionTy: LLVMTypeRef, Dest: LLVMTypeRef): void;
export declare function _LLVMStructTypeInContext(C: LLVMContextRef, ElementTypes: LLVMTypeRef, ElementCount: number, Packed: LLVMBool): LLVMTypeRef;
export declare function _LLVMStructType(ElementTypes: LLVMTypeRef, ElementCount: number, Packed: LLVMBool): LLVMTypeRef;
export declare function _LLVMStructCreateNamed(C: LLVMContextRef, Name: string): LLVMTypeRef;
export declare function _LLVMGetStructName(Ty: LLVMTypeRef): const;
export declare function _LLVMStructSetBody(StructTy: LLVMTypeRef, ElementTypes: LLVMTypeRef, ElementCount: number, Packed: LLVMBool): void;
export declare function _LLVMCountStructElementTypes(StructTy: LLVMTypeRef): unsigned;
export declare function _LLVMGetStructElementTypes(StructTy: LLVMTypeRef, Dest: LLVMTypeRef): void;
export declare function _LLVMStructGetTypeAtIndex(StructTy: LLVMTypeRef, i: number): LLVMTypeRef;
export declare function _LLVMIsPackedStruct(StructTy: LLVMTypeRef): LLVMBool;
export declare function _LLVMIsOpaqueStruct(StructTy: LLVMTypeRef): LLVMBool;
export declare function _LLVMIsLiteralStruct(StructTy: LLVMTypeRef): LLVMBool;
export declare function _LLVMGetElementType(Ty: LLVMTypeRef): LLVMTypeRef;
export declare function _LLVMGetSubtypes(Tp: LLVMTypeRef, Arr: LLVMTypeRef): void;
export declare function _LLVMGetNumContainedTypes(Tp: LLVMTypeRef): unsigned;
export declare function _LLVMArrayType(ElementType: LLVMTypeRef, ElementCount: number): LLVMTypeRef;
export declare function _LLVMArrayType2(ElementType: LLVMTypeRef, ElementCount: number): LLVMTypeRef;
export declare function _LLVMGetArrayLength(ArrayTy: LLVMTypeRef): unsigned;
export declare function _LLVMGetArrayLength2(ArrayTy: LLVMTypeRef): uint64_t;
export declare function _LLVMPointerType(ElementType: LLVMTypeRef, AddressSpace: number): LLVMTypeRef;
export declare function _LLVMPointerTypeIsOpaque(Ty: LLVMTypeRef): LLVMBool;
export declare function _LLVMPointerTypeInContext(C: LLVMContextRef, AddressSpace: number): LLVMTypeRef;
export declare function _LLVMGetPointerAddressSpace(PointerTy: LLVMTypeRef): unsigned;
export declare function _LLVMVectorType(ElementType: LLVMTypeRef, ElementCount: number): LLVMTypeRef;
export declare function _LLVMScalableVectorType(ElementType: LLVMTypeRef, ElementCount: number): LLVMTypeRef;
export declare function _LLVMGetVectorSize(VectorTy: LLVMTypeRef): unsigned;
export declare function _LLVMVoidTypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMLabelTypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMX86MMXTypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMX86AMXTypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMTokenTypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMMetadataTypeInContext(C: LLVMContextRef): LLVMTypeRef;
export declare function _LLVMVoidType(): LLVMTypeRef;
export declare function _LLVMLabelType(): LLVMTypeRef;
export declare function _LLVMX86MMXType(): LLVMTypeRef;
export declare function _LLVMX86AMXType(): LLVMTypeRef;
export declare function _LLVMTargetExtTypeInContext(C: LLVMContextRef, Name: string, TypeParams: LLVMTypeRef, TypeParamCount: number, IntParams: any, IntParamCount: number): LLVMTypeRef;
export declare function _LLVMTypeOf(Val: LLVMValueRef): LLVMTypeRef;
export declare function _LLVMGetValueKind(Val: LLVMValueRef): LLVMValueKind;
export declare function _LLVMGetValueName2(Val: LLVMValueRef, Length: any): const;
export declare function _LLVMSetValueName2(Val: LLVMValueRef, Name: string, NameLen: number): void;
export declare function _LLVMDumpValue(Val: LLVMValueRef): void;
export declare function _LLVMPrintValueToString(Val: LLVMValueRef): char;
export declare function _LLVMReplaceAllUsesWith(OldVal: LLVMValueRef, NewVal: LLVMValueRef): void;
export declare function _LLVMIsConstant(Val: LLVMValueRef): LLVMBool;
export declare function _LLVMIsUndef(Val: LLVMValueRef): LLVMBool;
export declare function _LLVMIsPoison(Val: LLVMValueRef): LLVMBool;
export declare function _LLVMIsAArgument(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsABasicBlock(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAInlineAsm(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAUser(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAConstant(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsABlockAddress(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAConstantAggregateZero(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAConstantArray(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAConstantDataSequential(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAConstantDataArray(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAConstantDataVector(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAConstantExpr(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAConstantFP(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAConstantInt(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAConstantPointerNull(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAConstantStruct(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAConstantTokenNone(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAConstantVector(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAGlobalValue(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAGlobalAlias(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAGlobalObject(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAFunction(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAGlobalVariable(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAGlobalIFunc(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAUndefValue(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAPoisonValue(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAInstruction(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAUnaryOperator(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsABinaryOperator(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsACallInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAIntrinsicInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsADbgInfoIntrinsic(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsADbgVariableIntrinsic(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsADbgDeclareInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsADbgLabelInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAMemIntrinsic(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAMemCpyInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAMemMoveInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAMemSetInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsACmpInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAFCmpInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAICmpInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAExtractElementInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAGetElementPtrInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAInsertElementInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAInsertValueInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsALandingPadInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAPHINode(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsASelectInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAShuffleVectorInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAStoreInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsABranchInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAIndirectBrInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAInvokeInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAReturnInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsASwitchInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAUnreachableInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAResumeInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsACleanupReturnInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsACatchReturnInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsACatchSwitchInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsACallBrInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAFuncletPadInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsACatchPadInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsACleanupPadInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAUnaryInstruction(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAAllocaInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsACastInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAAddrSpaceCastInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsABitCastInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAFPExtInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAFPToSIInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAFPToUIInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAFPTruncInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAIntToPtrInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAPtrToIntInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsASExtInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsASIToFPInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsATruncInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAUIToFPInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAZExtInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAExtractValueInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsALoadInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAVAArgInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAFreezeInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAAtomicCmpXchgInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAAtomicRMWInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAFenceInst(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAMDNode(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAValueAsMetadata(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsAMDString(Val: LLVMValueRef): LLVMValueRef;
export declare function _LLVMGetValueName(Val: LLVMValueRef): const;
export declare function _LLVMSetValueName(Val: LLVMValueRef, Name: string): void;
export declare function _LLVMGetFirstUse(Val: LLVMValueRef): LLVMUseRef;
export declare function _LLVMGetNextUse(U: LLVMUseRef): LLVMUseRef;
export declare function _LLVMGetUser(U: LLVMUseRef): LLVMValueRef;
export declare function _LLVMGetUsedValue(U: LLVMUseRef): LLVMValueRef;
export declare function _LLVMGetOperand(Val: LLVMValueRef, Index: number): LLVMValueRef;
export declare function _LLVMGetOperandUse(Val: LLVMValueRef, Index: number): LLVMUseRef;
export declare function _LLVMSetOperand(User: LLVMValueRef, Index: number, Val: LLVMValueRef): void;
export declare function _LLVMGetNumOperands(Val: LLVMValueRef): int;
export declare function _LLVMConstNull(Ty: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstAllOnes(Ty: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMGetUndef(Ty: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMGetPoison(Ty: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMIsNull(Val: LLVMValueRef): LLVMBool;
export declare function _LLVMConstPointerNull(Ty: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstInt(IntTy: LLVMTypeRef, N: number, SignExtend: LLVMBool): LLVMValueRef;
export declare function _LLVMConstIntOfArbitraryPrecision(IntTy: LLVMTypeRef, NumWords: number, Words: any): LLVMValueRef;
export declare function _LLVMConstIntOfString(IntTy: LLVMTypeRef, Text: string, Radix: number): LLVMValueRef;
export declare function _LLVMConstIntOfStringAndSize(IntTy: LLVMTypeRef, Text: string, SLen: number, Radix: number): LLVMValueRef;
export declare function _LLVMConstReal(RealTy: LLVMTypeRef, N: number): LLVMValueRef;
export declare function _LLVMConstRealOfString(RealTy: LLVMTypeRef, Text: string): LLVMValueRef;
export declare function _LLVMConstRealOfStringAndSize(RealTy: LLVMTypeRef, Text: string, SLen: number): LLVMValueRef;
export declare function _LLVMConstIntGetZExtValue(ConstantVal: LLVMValueRef): unsigned;
export declare function _LLVMConstIntGetSExtValue(ConstantVal: LLVMValueRef): long;
export declare function _LLVMConstRealGetDouble(ConstantVal: LLVMValueRef, losesInfo: LLVMBool): double;
export declare function _LLVMConstStringInContext(C: LLVMContextRef, Str: string, Length: number, DontNullTerminate: LLVMBool): LLVMValueRef;
export declare function _LLVMConstString(Str: string, Length: number, DontNullTerminate: LLVMBool): LLVMValueRef;
export declare function _LLVMIsConstantString(c: LLVMValueRef): LLVMBool;
export declare function _LLVMGetAsString(c: LLVMValueRef, Length: any): const;
export declare function _LLVMConstStructInContext(C: LLVMContextRef, ConstantVals: LLVMValueRef, Count: number, Packed: LLVMBool): LLVMValueRef;
export declare function _LLVMConstStruct(ConstantVals: LLVMValueRef, Count: number, Packed: LLVMBool): LLVMValueRef;
export declare function _LLVMConstArray(ElementTy: LLVMTypeRef, ConstantVals: LLVMValueRef, Length: number): LLVMValueRef;
export declare function _LLVMConstArray2(ElementTy: LLVMTypeRef, ConstantVals: LLVMValueRef, Length: number): LLVMValueRef;
export declare function _LLVMConstNamedStruct(StructTy: LLVMTypeRef, ConstantVals: LLVMValueRef, Count: number): LLVMValueRef;
export declare function _LLVMGetAggregateElement(C: LLVMValueRef, Idx: number): LLVMValueRef;
export declare function _LLVMGetElementAsConstant(C: LLVMValueRef, idx: number): LLVMValueRef;
export declare function _LLVMConstVector(ScalarConstantVals: LLVMValueRef, Size: number): LLVMValueRef;
export declare function _LLVMGetConstOpcode(ConstantVal: LLVMValueRef): LLVMOpcode;
export declare function _LLVMAlignOf(Ty: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMSizeOf(Ty: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstNeg(ConstantVal: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstNSWNeg(ConstantVal: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstNUWNeg(ConstantVal: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstNot(ConstantVal: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstNSWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstNUWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstNSWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstNUWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstNSWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstNUWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstAnd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstOr(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstXor(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstICmp(Predicate: LLVMIntPredicate, LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstFCmp(Predicate: LLVMRealPredicate, LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstShl(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstLShr(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstAShr(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstGEP2(Ty: LLVMTypeRef, ConstantVal: LLVMValueRef, ConstantIndices: LLVMValueRef, NumIndices: number): LLVMValueRef;
export declare function _LLVMConstInBoundsGEP2(Ty: LLVMTypeRef, ConstantVal: LLVMValueRef, ConstantIndices: LLVMValueRef, NumIndices: number): LLVMValueRef;
export declare function _LLVMConstTrunc(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstSExt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstZExt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstFPTrunc(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstFPExt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstUIToFP(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstSIToFP(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstFPToUI(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstFPToSI(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstPtrToInt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstIntToPtr(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstAddrSpaceCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstZExtOrBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstSExtOrBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstTruncOrBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstPointerCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstIntCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef, isSigned: LLVMBool): LLVMValueRef;
export declare function _LLVMConstFPCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef;
export declare function _LLVMConstSelect(ConstantCondition: LLVMValueRef, ConstantIfTrue: LLVMValueRef, ConstantIfFalse: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstExtractElement(VectorConstant: LLVMValueRef, IndexConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstInsertElement(VectorConstant: LLVMValueRef, ElementValueConstant: LLVMValueRef, IndexConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMConstShuffleVector(VectorAConstant: LLVMValueRef, VectorBConstant: LLVMValueRef, MaskConstant: LLVMValueRef): LLVMValueRef;
export declare function _LLVMBlockAddress(F: LLVMValueRef, BB: LLVMBasicBlockRef): LLVMValueRef;
export declare function _LLVMConstInlineAsm(Ty: LLVMTypeRef, AsmString: string, Constraints: string, HasSideEffects: LLVMBool, IsAlignStack: LLVMBool): LLVMValueRef;
export declare function _LLVMGetGlobalParent(Global: LLVMValueRef): LLVMModuleRef;
export declare function _LLVMIsDeclaration(Global: LLVMValueRef): LLVMBool;
export declare function _LLVMGetLinkage(Global: LLVMValueRef): LLVMLinkage;
export declare function _LLVMSetLinkage(Global: LLVMValueRef, Linkage: LLVMLinkage): void;
export declare function _LLVMGetSection(Global: LLVMValueRef): const;
export declare function _LLVMSetSection(Global: LLVMValueRef, Section: string): void;
export declare function _LLVMGetVisibility(Global: LLVMValueRef): LLVMVisibility;
export declare function _LLVMSetVisibility(Global: LLVMValueRef, Viz: LLVMVisibility): void;
export declare function _LLVMGetDLLStorageClass(Global: LLVMValueRef): LLVMDLLStorageClass;
export declare function _LLVMSetDLLStorageClass(Global: LLVMValueRef, Class: LLVMDLLStorageClass): void;
export declare function _LLVMGetUnnamedAddress(Global: LLVMValueRef): LLVMUnnamedAddr;
export declare function _LLVMSetUnnamedAddress(Global: LLVMValueRef, UnnamedAddr: LLVMUnnamedAddr): void;
export declare function _LLVMGlobalGetValueType(Global: LLVMValueRef): LLVMTypeRef;
export declare function _LLVMHasUnnamedAddr(Global: LLVMValueRef): LLVMBool;
export declare function _LLVMSetUnnamedAddr(Global: LLVMValueRef, HasUnnamedAddr: LLVMBool): void;
export declare function _LLVMGetAlignment(V: LLVMValueRef): unsigned;
export declare function _LLVMSetAlignment(V: LLVMValueRef, Bytes: number): void;
export declare function _LLVMGlobalSetMetadata(Global: LLVMValueRef, Kind: number, MD: LLVMMetadataRef): void;
export declare function _LLVMGlobalEraseMetadata(Global: LLVMValueRef, Kind: number): void;
export declare function _LLVMGlobalClearMetadata(Global: LLVMValueRef): void;
export declare function _LLVMGlobalCopyAllMetadata(Value: LLVMValueRef, NumEntries: any): LLVMValueMetadataEntry;
export declare function _LLVMDisposeValueMetadataEntries(Entries: LLVMValueMetadataEntry): void;
export declare function _LLVMValueMetadataEntriesGetKind(Entries: LLVMValueMetadataEntry, Index: number): unsigned;
export declare function _LLVMValueMetadataEntriesGetMetadata(Entries: LLVMValueMetadataEntry, Index: number): LLVMMetadataRef;
export declare function _LLVMAddGlobal(M: LLVMModuleRef, Ty: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMAddGlobalInAddressSpace(M: LLVMModuleRef, Ty: LLVMTypeRef, Name: string, AddressSpace: number): LLVMValueRef;
export declare function _LLVMGetNamedGlobal(M: LLVMModuleRef, Name: string): LLVMValueRef;
export declare function _LLVMGetFirstGlobal(M: LLVMModuleRef): LLVMValueRef;
export declare function _LLVMGetLastGlobal(M: LLVMModuleRef): LLVMValueRef;
export declare function _LLVMGetNextGlobal(GlobalVar: LLVMValueRef): LLVMValueRef;
export declare function _LLVMGetPreviousGlobal(GlobalVar: LLVMValueRef): LLVMValueRef;
export declare function _LLVMDeleteGlobal(GlobalVar: LLVMValueRef): void;
export declare function _LLVMGetInitializer(GlobalVar: LLVMValueRef): LLVMValueRef;
export declare function _LLVMSetInitializer(GlobalVar: LLVMValueRef, ConstantVal: LLVMValueRef): void;
export declare function _LLVMIsThreadLocal(GlobalVar: LLVMValueRef): LLVMBool;
export declare function _LLVMSetThreadLocal(GlobalVar: LLVMValueRef, IsThreadLocal: LLVMBool): void;
export declare function _LLVMIsGlobalConstant(GlobalVar: LLVMValueRef): LLVMBool;
export declare function _LLVMSetGlobalConstant(GlobalVar: LLVMValueRef, IsConstant: LLVMBool): void;
export declare function _LLVMGetThreadLocalMode(GlobalVar: LLVMValueRef): LLVMThreadLocalMode;
export declare function _LLVMSetThreadLocalMode(GlobalVar: LLVMValueRef, Mode: LLVMThreadLocalMode): void;
export declare function _LLVMIsExternallyInitialized(GlobalVar: LLVMValueRef): LLVMBool;
export declare function _LLVMSetExternallyInitialized(GlobalVar: LLVMValueRef, IsExtInit: LLVMBool): void;
export declare function _LLVMAddAlias2(M: LLVMModuleRef, ValueTy: LLVMTypeRef, AddrSpace: number, Aliasee: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMGetNamedGlobalAlias(M: LLVMModuleRef, Name: string, NameLen: number): LLVMValueRef;
export declare function _LLVMGetFirstGlobalAlias(M: LLVMModuleRef): LLVMValueRef;
export declare function _LLVMGetLastGlobalAlias(M: LLVMModuleRef): LLVMValueRef;
export declare function _LLVMGetNextGlobalAlias(GA: LLVMValueRef): LLVMValueRef;
export declare function _LLVMGetPreviousGlobalAlias(GA: LLVMValueRef): LLVMValueRef;
export declare function _LLVMAliasGetAliasee(Alias: LLVMValueRef): LLVMValueRef;
export declare function _LLVMAliasSetAliasee(Alias: LLVMValueRef, Aliasee: LLVMValueRef): void;
export declare function _LLVMDeleteFunction(Fn: LLVMValueRef): void;
export declare function _LLVMHasPersonalityFn(Fn: LLVMValueRef): LLVMBool;
export declare function _LLVMGetPersonalityFn(Fn: LLVMValueRef): LLVMValueRef;
export declare function _LLVMSetPersonalityFn(Fn: LLVMValueRef, PersonalityFn: LLVMValueRef): void;
export declare function _LLVMLookupIntrinsicID(Name: string, NameLen: number): unsigned;
export declare function _LLVMGetIntrinsicID(Fn: LLVMValueRef): unsigned;
export declare function _LLVMGetIntrinsicDeclaration(Mod: LLVMModuleRef, ID: number, ParamTypes: LLVMTypeRef, ParamCount: number): LLVMValueRef;
export declare function _LLVMIntrinsicGetType(Ctx: LLVMContextRef, ID: number, ParamTypes: LLVMTypeRef, ParamCount: number): LLVMTypeRef;
export declare function _LLVMIntrinsicGetName(ID: number, NameLength: any): const;
export declare function _LLVMIntrinsicCopyOverloadedName(ID: number, ParamTypes: LLVMTypeRef, ParamCount: number, NameLength: any): const;
export declare function _LLVMIntrinsicCopyOverloadedName2(Mod: LLVMModuleRef, ID: number, ParamTypes: LLVMTypeRef, ParamCount: number, NameLength: any): const;
export declare function _LLVMIntrinsicIsOverloaded(ID: number): LLVMBool;
export declare function _LLVMGetFunctionCallConv(Fn: LLVMValueRef): unsigned;
export declare function _LLVMSetFunctionCallConv(Fn: LLVMValueRef, CC: number): void;
export declare function _LLVMGetGC(Fn: LLVMValueRef): const;
export declare function _LLVMSetGC(Fn: LLVMValueRef, Name: string): void;
export declare function _LLVMAddAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, A: LLVMAttributeRef): void;
export declare function _LLVMGetAttributeCountAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex): unsigned;
export declare function _LLVMGetAttributesAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, Attrs: LLVMAttributeRef): void;
export declare function _LLVMGetEnumAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: number): LLVMAttributeRef;
export declare function _LLVMGetStringAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, K: string, KLen: number): LLVMAttributeRef;
export declare function _LLVMRemoveEnumAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: number): void;
export declare function _LLVMRemoveStringAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, K: string, KLen: number): void;
export declare function _LLVMAddTargetDependentFunctionAttr(Fn: LLVMValueRef, A: string, V: string): void;
export declare function _LLVMCountParams(Fn: LLVMValueRef): unsigned;
export declare function _LLVMGetParams(Fn: LLVMValueRef, Params: LLVMValueRef): void;
export declare function _LLVMGetParam(Fn: LLVMValueRef, Index: number): LLVMValueRef;
export declare function _LLVMGetParamParent(Inst: LLVMValueRef): LLVMValueRef;
export declare function _LLVMGetFirstParam(Fn: LLVMValueRef): LLVMValueRef;
export declare function _LLVMGetLastParam(Fn: LLVMValueRef): LLVMValueRef;
export declare function _LLVMGetNextParam(Arg: LLVMValueRef): LLVMValueRef;
export declare function _LLVMGetPreviousParam(Arg: LLVMValueRef): LLVMValueRef;
export declare function _LLVMSetParamAlignment(Arg: LLVMValueRef, Align: number): void;
export declare function _LLVMAddGlobalIFunc(M: LLVMModuleRef, Name: string, NameLen: number, Ty: LLVMTypeRef, AddrSpace: number, Resolver: LLVMValueRef): LLVMValueRef;
export declare function _LLVMGetNamedGlobalIFunc(M: LLVMModuleRef, Name: string, NameLen: number): LLVMValueRef;
export declare function _LLVMGetFirstGlobalIFunc(M: LLVMModuleRef): LLVMValueRef;
export declare function _LLVMGetLastGlobalIFunc(M: LLVMModuleRef): LLVMValueRef;
export declare function _LLVMGetNextGlobalIFunc(IFunc: LLVMValueRef): LLVMValueRef;
export declare function _LLVMGetPreviousGlobalIFunc(IFunc: LLVMValueRef): LLVMValueRef;
export declare function _LLVMGetGlobalIFuncResolver(IFunc: LLVMValueRef): LLVMValueRef;
export declare function _LLVMSetGlobalIFuncResolver(IFunc: LLVMValueRef, Resolver: LLVMValueRef): void;
export declare function _LLVMEraseGlobalIFunc(IFunc: LLVMValueRef): void;
export declare function _LLVMRemoveGlobalIFunc(IFunc: LLVMValueRef): void;
export declare function _LLVMMDStringInContext2(C: LLVMContextRef, Str: string, SLen: number): LLVMMetadataRef;
export declare function _LLVMMDNodeInContext2(C: LLVMContextRef, MDs: LLVMMetadataRef, Count: number): LLVMMetadataRef;
export declare function _LLVMMetadataAsValue(C: LLVMContextRef, MD: LLVMMetadataRef): LLVMValueRef;
export declare function _LLVMValueAsMetadata(Val: LLVMValueRef): LLVMMetadataRef;
export declare function _LLVMGetMDString(V: LLVMValueRef, Length: any): const;
export declare function _LLVMGetMDNodeNumOperands(V: LLVMValueRef): unsigned;
export declare function _LLVMGetMDNodeOperands(V: LLVMValueRef, Dest: LLVMValueRef): void;
export declare function _LLVMReplaceMDNodeOperandWith(V: LLVMValueRef, Index: number, Replacement: LLVMMetadataRef): void;
export declare function _LLVMMDStringInContext(C: LLVMContextRef, Str: string, SLen: number): LLVMValueRef;
export declare function _LLVMMDString(Str: string, SLen: number): LLVMValueRef;
export declare function _LLVMMDNodeInContext(C: LLVMContextRef, Vals: LLVMValueRef, Count: number): LLVMValueRef;
export declare function _LLVMMDNode(Vals: LLVMValueRef, Count: number): LLVMValueRef;
export declare function _LLVMBasicBlockAsValue(BB: LLVMBasicBlockRef): LLVMValueRef;
export declare function _LLVMValueIsBasicBlock(Val: LLVMValueRef): LLVMBool;
export declare function _LLVMValueAsBasicBlock(Val: LLVMValueRef): LLVMBasicBlockRef;
export declare function _LLVMGetBasicBlockName(BB: LLVMBasicBlockRef): const;
export declare function _LLVMGetBasicBlockParent(BB: LLVMBasicBlockRef): LLVMValueRef;
export declare function _LLVMGetBasicBlockTerminator(BB: LLVMBasicBlockRef): LLVMValueRef;
export declare function _LLVMCountBasicBlocks(Fn: LLVMValueRef): unsigned;
export declare function _LLVMGetBasicBlocks(Fn: LLVMValueRef, BasicBlocks: LLVMBasicBlockRef): void;
export declare function _LLVMGetFirstBasicBlock(Fn: LLVMValueRef): LLVMBasicBlockRef;
export declare function _LLVMGetLastBasicBlock(Fn: LLVMValueRef): LLVMBasicBlockRef;
export declare function _LLVMGetNextBasicBlock(BB: LLVMBasicBlockRef): LLVMBasicBlockRef;
export declare function _LLVMGetPreviousBasicBlock(BB: LLVMBasicBlockRef): LLVMBasicBlockRef;
export declare function _LLVMGetEntryBasicBlock(Fn: LLVMValueRef): LLVMBasicBlockRef;
export declare function _LLVMInsertExistingBasicBlockAfterInsertBlock(Builder: LLVMBuilderRef, BB: LLVMBasicBlockRef): void;
export declare function _LLVMAppendExistingBasicBlock(Fn: LLVMValueRef, BB: LLVMBasicBlockRef): void;
export declare function _LLVMCreateBasicBlockInContext(C: LLVMContextRef, Name: string): LLVMBasicBlockRef;
export declare function _LLVMAppendBasicBlockInContext(C: LLVMContextRef, Fn: LLVMValueRef, Name: string): LLVMBasicBlockRef;
export declare function _LLVMAppendBasicBlock(Fn: LLVMValueRef, Name: string): LLVMBasicBlockRef;
export declare function _LLVMInsertBasicBlockInContext(C: LLVMContextRef, BB: LLVMBasicBlockRef, Name: string): LLVMBasicBlockRef;
export declare function _LLVMInsertBasicBlock(InsertBeforeBB: LLVMBasicBlockRef, Name: string): LLVMBasicBlockRef;
export declare function _LLVMDeleteBasicBlock(BB: LLVMBasicBlockRef): void;
export declare function _LLVMRemoveBasicBlockFromParent(BB: LLVMBasicBlockRef): void;
export declare function _LLVMMoveBasicBlockBefore(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef): void;
export declare function _LLVMMoveBasicBlockAfter(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef): void;
export declare function _LLVMGetFirstInstruction(BB: LLVMBasicBlockRef): LLVMValueRef;
export declare function _LLVMGetLastInstruction(BB: LLVMBasicBlockRef): LLVMValueRef;
export declare function _LLVMHasMetadata(Val: LLVMValueRef): int;
export declare function _LLVMGetMetadata(Val: LLVMValueRef, KindID: number): LLVMValueRef;
export declare function _LLVMSetMetadata(Val: LLVMValueRef, KindID: number, Node: LLVMValueRef): void;
export declare function _LLVMInstructionGetAllMetadataOtherThanDebugLoc(Instr: LLVMValueRef, NumEntries: any): LLVMValueMetadataEntry;
export declare function _LLVMGetInstructionParent(Inst: LLVMValueRef): LLVMBasicBlockRef;
export declare function _LLVMGetNextInstruction(Inst: LLVMValueRef): LLVMValueRef;
export declare function _LLVMGetPreviousInstruction(Inst: LLVMValueRef): LLVMValueRef;
export declare function _LLVMInstructionRemoveFromParent(Inst: LLVMValueRef): void;
export declare function _LLVMInstructionEraseFromParent(Inst: LLVMValueRef): void;
export declare function _LLVMDeleteInstruction(Inst: LLVMValueRef): void;
export declare function _LLVMGetInstructionOpcode(Inst: LLVMValueRef): LLVMOpcode;
export declare function _LLVMGetICmpPredicate(Inst: LLVMValueRef): LLVMIntPredicate;
export declare function _LLVMGetFCmpPredicate(Inst: LLVMValueRef): LLVMRealPredicate;
export declare function _LLVMInstructionClone(Inst: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsATerminatorInst(Inst: LLVMValueRef): LLVMValueRef;
export declare function _LLVMGetNumArgOperands(Instr: LLVMValueRef): unsigned;
export declare function _LLVMSetInstructionCallConv(Instr: LLVMValueRef, CC: number): void;
export declare function _LLVMGetInstructionCallConv(Instr: LLVMValueRef): unsigned;
export declare function _LLVMSetInstrParamAlignment(Instr: LLVMValueRef, Idx: LLVMAttributeIndex, Align: number): void;
export declare function _LLVMAddCallSiteAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, A: LLVMAttributeRef): void;
export declare function _LLVMGetCallSiteAttributeCount(C: LLVMValueRef, Idx: LLVMAttributeIndex): unsigned;
export declare function _LLVMGetCallSiteAttributes(C: LLVMValueRef, Idx: LLVMAttributeIndex, Attrs: LLVMAttributeRef): void;
export declare function _LLVMGetCallSiteEnumAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: number): LLVMAttributeRef;
export declare function _LLVMGetCallSiteStringAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, K: string, KLen: number): LLVMAttributeRef;
export declare function _LLVMRemoveCallSiteEnumAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, KindID: number): void;
export declare function _LLVMRemoveCallSiteStringAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, K: string, KLen: number): void;
export declare function _LLVMGetCalledFunctionType(C: LLVMValueRef): LLVMTypeRef;
export declare function _LLVMGetCalledValue(Instr: LLVMValueRef): LLVMValueRef;
export declare function _LLVMIsTailCall(CallInst: LLVMValueRef): LLVMBool;
export declare function _LLVMSetTailCall(CallInst: LLVMValueRef, IsTailCall: LLVMBool): void;
export declare function _LLVMGetNormalDest(InvokeInst: LLVMValueRef): LLVMBasicBlockRef;
export declare function _LLVMGetUnwindDest(InvokeInst: LLVMValueRef): LLVMBasicBlockRef;
export declare function _LLVMSetNormalDest(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef): void;
export declare function _LLVMSetUnwindDest(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef): void;
export declare function _LLVMGetNumSuccessors(Term: LLVMValueRef): unsigned;
export declare function _LLVMGetSuccessor(Term: LLVMValueRef, i: number): LLVMBasicBlockRef;
export declare function _LLVMSetSuccessor(Term: LLVMValueRef, i: number, block: LLVMBasicBlockRef): void;
export declare function _LLVMIsConditional(Branch: LLVMValueRef): LLVMBool;
export declare function _LLVMGetCondition(Branch: LLVMValueRef): LLVMValueRef;
export declare function _LLVMSetCondition(Branch: LLVMValueRef, Cond: LLVMValueRef): void;
export declare function _LLVMGetSwitchDefaultDest(SwitchInstr: LLVMValueRef): LLVMBasicBlockRef;
export declare function _LLVMGetAllocatedType(Alloca: LLVMValueRef): LLVMTypeRef;
export declare function _LLVMIsInBounds(GEP: LLVMValueRef): LLVMBool;
export declare function _LLVMSetIsInBounds(GEP: LLVMValueRef, InBounds: LLVMBool): void;
export declare function _LLVMGetGEPSourceElementType(GEP: LLVMValueRef): LLVMTypeRef;
export declare function _LLVMAddIncoming(PhiNode: LLVMValueRef, IncomingValues: LLVMValueRef, IncomingBlocks: LLVMBasicBlockRef, Count: number): void;
export declare function _LLVMCountIncoming(PhiNode: LLVMValueRef): unsigned;
export declare function _LLVMGetIncomingValue(PhiNode: LLVMValueRef, Index: number): LLVMValueRef;
export declare function _LLVMGetIncomingBlock(PhiNode: LLVMValueRef, Index: number): LLVMBasicBlockRef;
export declare function _LLVMGetNumIndices(Inst: LLVMValueRef): unsigned;
export declare function _LLVMGetIndices(Inst: LLVMValueRef): const;
export declare function _LLVMCreateBuilderInContext(C: LLVMContextRef): LLVMBuilderRef;
export declare function _LLVMCreateBuilder(): LLVMBuilderRef;
export declare function _LLVMPositionBuilder(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef, Instr: LLVMValueRef): void;
export declare function _LLVMPositionBuilderBefore(Builder: LLVMBuilderRef, Instr: LLVMValueRef): void;
export declare function _LLVMPositionBuilderAtEnd(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef): void;
export declare function _LLVMGetInsertBlock(Builder: LLVMBuilderRef): LLVMBasicBlockRef;
export declare function _LLVMClearInsertionPosition(Builder: LLVMBuilderRef): void;
export declare function _LLVMInsertIntoBuilder(Builder: LLVMBuilderRef, Instr: LLVMValueRef): void;
export declare function _LLVMInsertIntoBuilderWithName(Builder: LLVMBuilderRef, Instr: LLVMValueRef, Name: string): void;
export declare function _LLVMDisposeBuilder(Builder: LLVMBuilderRef): void;
export declare function _LLVMGetCurrentDebugLocation2(Builder: LLVMBuilderRef): LLVMMetadataRef;
export declare function _LLVMSetCurrentDebugLocation2(Builder: LLVMBuilderRef, Loc: LLVMMetadataRef): void;
export declare function _LLVMSetInstDebugLocation(Builder: LLVMBuilderRef, Inst: LLVMValueRef): void;
export declare function _LLVMAddMetadataToInst(Builder: LLVMBuilderRef, Inst: LLVMValueRef): void;
export declare function _LLVMBuilderGetDefaultFPMathTag(Builder: LLVMBuilderRef): LLVMMetadataRef;
export declare function _LLVMBuilderSetDefaultFPMathTag(Builder: LLVMBuilderRef, FPMathTag: LLVMMetadataRef): void;
export declare function _LLVMSetCurrentDebugLocation(Builder: LLVMBuilderRef, L: LLVMValueRef): void;
export declare function _LLVMGetCurrentDebugLocation(Builder: LLVMBuilderRef): LLVMValueRef;
export declare function _LLVMBuildRetVoid(undefined: LLVMBuilderRef): LLVMValueRef;
export declare function _LLVMBuildRet(undefined: LLVMBuilderRef, V: LLVMValueRef): LLVMValueRef;
export declare function _LLVMBuildAggregateRet(undefined: LLVMBuilderRef, RetVals: LLVMValueRef, N: number): LLVMValueRef;
export declare function _LLVMBuildBr(undefined: LLVMBuilderRef, Dest: LLVMBasicBlockRef): LLVMValueRef;
export declare function _LLVMBuildCondBr(undefined: LLVMBuilderRef, If: LLVMValueRef, Then: LLVMBasicBlockRef, Else: LLVMBasicBlockRef): LLVMValueRef;
export declare function _LLVMBuildSwitch(undefined: LLVMBuilderRef, V: LLVMValueRef, Else: LLVMBasicBlockRef, NumCases: number): LLVMValueRef;
export declare function _LLVMBuildIndirectBr(B: LLVMBuilderRef, Addr: LLVMValueRef, NumDests: number): LLVMValueRef;
export declare function _LLVMBuildInvoke2(undefined: LLVMBuilderRef, Ty: LLVMTypeRef, Fn: LLVMValueRef, Args: LLVMValueRef, NumArgs: number, Then: LLVMBasicBlockRef, Catch: LLVMBasicBlockRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildUnreachable(undefined: LLVMBuilderRef): LLVMValueRef;
export declare function _LLVMBuildResume(B: LLVMBuilderRef, Exn: LLVMValueRef): LLVMValueRef;
export declare function _LLVMBuildLandingPad(B: LLVMBuilderRef, Ty: LLVMTypeRef, PersFn: LLVMValueRef, NumClauses: number, Name: string): LLVMValueRef;
export declare function _LLVMBuildCleanupRet(B: LLVMBuilderRef, CatchPad: LLVMValueRef, BB: LLVMBasicBlockRef): LLVMValueRef;
export declare function _LLVMBuildCatchRet(B: LLVMBuilderRef, CatchPad: LLVMValueRef, BB: LLVMBasicBlockRef): LLVMValueRef;
export declare function _LLVMBuildCatchPad(B: LLVMBuilderRef, ParentPad: LLVMValueRef, Args: LLVMValueRef, NumArgs: number, Name: string): LLVMValueRef;
export declare function _LLVMBuildCleanupPad(B: LLVMBuilderRef, ParentPad: LLVMValueRef, Args: LLVMValueRef, NumArgs: number, Name: string): LLVMValueRef;
export declare function _LLVMBuildCatchSwitch(B: LLVMBuilderRef, ParentPad: LLVMValueRef, UnwindBB: LLVMBasicBlockRef, NumHandlers: number, Name: string): LLVMValueRef;
export declare function _LLVMAddCase(Switch: LLVMValueRef, OnVal: LLVMValueRef, Dest: LLVMBasicBlockRef): void;
export declare function _LLVMAddDestination(IndirectBr: LLVMValueRef, Dest: LLVMBasicBlockRef): void;
export declare function _LLVMGetNumClauses(LandingPad: LLVMValueRef): unsigned;
export declare function _LLVMGetClause(LandingPad: LLVMValueRef, Idx: number): LLVMValueRef;
export declare function _LLVMAddClause(LandingPad: LLVMValueRef, ClauseVal: LLVMValueRef): void;
export declare function _LLVMIsCleanup(LandingPad: LLVMValueRef): LLVMBool;
export declare function _LLVMSetCleanup(LandingPad: LLVMValueRef, Val: LLVMBool): void;
export declare function _LLVMAddHandler(CatchSwitch: LLVMValueRef, Dest: LLVMBasicBlockRef): void;
export declare function _LLVMGetNumHandlers(CatchSwitch: LLVMValueRef): unsigned;
export declare function _LLVMGetHandlers(CatchSwitch: LLVMValueRef, Handlers: LLVMBasicBlockRef): void;
export declare function _LLVMGetArgOperand(Funclet: LLVMValueRef, i: number): LLVMValueRef;
export declare function _LLVMSetArgOperand(Funclet: LLVMValueRef, i: number, value: LLVMValueRef): void;
export declare function _LLVMGetParentCatchSwitch(CatchPad: LLVMValueRef): LLVMValueRef;
export declare function _LLVMSetParentCatchSwitch(CatchPad: LLVMValueRef, CatchSwitch: LLVMValueRef): void;
export declare function _LLVMBuildAdd(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildNSWAdd(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildNUWAdd(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildFAdd(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildSub(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildNSWSub(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildNUWSub(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildFSub(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildMul(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildNSWMul(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildNUWMul(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildFMul(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildUDiv(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildExactUDiv(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildSDiv(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildExactSDiv(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildFDiv(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildURem(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildSRem(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildFRem(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildShl(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildLShr(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildAShr(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildAnd(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildOr(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildXor(undefined: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildBinOp(B: LLVMBuilderRef, Op: LLVMOpcode, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildNeg(undefined: LLVMBuilderRef, V: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildNSWNeg(B: LLVMBuilderRef, V: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildNUWNeg(B: LLVMBuilderRef, V: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildFNeg(undefined: LLVMBuilderRef, V: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildNot(undefined: LLVMBuilderRef, V: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildMalloc(undefined: LLVMBuilderRef, Ty: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildArrayMalloc(undefined: LLVMBuilderRef, Ty: LLVMTypeRef, Val: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildMemSet(B: LLVMBuilderRef, Ptr: LLVMValueRef, Val: LLVMValueRef, Len: LLVMValueRef, Align: number): LLVMValueRef;
export declare function _LLVMBuildMemCpy(B: LLVMBuilderRef, Dst: LLVMValueRef, DstAlign: number, Src: LLVMValueRef, SrcAlign: number, Size: LLVMValueRef): LLVMValueRef;
export declare function _LLVMBuildMemMove(B: LLVMBuilderRef, Dst: LLVMValueRef, DstAlign: number, Src: LLVMValueRef, SrcAlign: number, Size: LLVMValueRef): LLVMValueRef;
export declare function _LLVMBuildAlloca(undefined: LLVMBuilderRef, Ty: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildArrayAlloca(undefined: LLVMBuilderRef, Ty: LLVMTypeRef, Val: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildFree(undefined: LLVMBuilderRef, PointerVal: LLVMValueRef): LLVMValueRef;
export declare function _LLVMBuildLoad2(undefined: LLVMBuilderRef, Ty: LLVMTypeRef, PointerVal: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildStore(undefined: LLVMBuilderRef, Val: LLVMValueRef, Ptr: LLVMValueRef): LLVMValueRef;
export declare function _LLVMBuildGEP2(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: LLVMValueRef, NumIndices: number, Name: string): LLVMValueRef;
export declare function _LLVMBuildInBoundsGEP2(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Indices: LLVMValueRef, NumIndices: number, Name: string): LLVMValueRef;
export declare function _LLVMBuildStructGEP2(B: LLVMBuilderRef, Ty: LLVMTypeRef, Pointer: LLVMValueRef, Idx: number, Name: string): LLVMValueRef;
export declare function _LLVMBuildGlobalString(B: LLVMBuilderRef, Str: string, Name: string): LLVMValueRef;
export declare function _LLVMBuildGlobalStringPtr(B: LLVMBuilderRef, Str: string, Name: string): LLVMValueRef;
export declare function _LLVMGetVolatile(MemoryAccessInst: LLVMValueRef): LLVMBool;
export declare function _LLVMSetVolatile(MemoryAccessInst: LLVMValueRef, IsVolatile: LLVMBool): void;
export declare function _LLVMGetWeak(CmpXchgInst: LLVMValueRef): LLVMBool;
export declare function _LLVMSetWeak(CmpXchgInst: LLVMValueRef, IsWeak: LLVMBool): void;
export declare function _LLVMGetOrdering(MemoryAccessInst: LLVMValueRef): LLVMAtomicOrdering;
export declare function _LLVMSetOrdering(MemoryAccessInst: LLVMValueRef, Ordering: LLVMAtomicOrdering): void;
export declare function _LLVMGetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef): LLVMAtomicRMWBinOp;
export declare function _LLVMSetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef, BinOp: LLVMAtomicRMWBinOp): void;
export declare function _LLVMBuildTrunc(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildZExt(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildSExt(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildFPToUI(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildFPToSI(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildUIToFP(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildSIToFP(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildFPTrunc(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildFPExt(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildPtrToInt(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildIntToPtr(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildBitCast(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildAddrSpaceCast(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildZExtOrBitCast(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildSExtOrBitCast(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildTruncOrBitCast(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildCast(B: LLVMBuilderRef, Op: LLVMOpcode, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildPointerCast(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildIntCast2(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, IsSigned: LLVMBool, Name: string): LLVMValueRef;
export declare function _LLVMBuildFPCast(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildIntCast(undefined: LLVMBuilderRef, Val: LLVMValueRef, DestTy: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMGetCastOpcode(Src: LLVMValueRef, SrcIsSigned: LLVMBool, DestTy: LLVMTypeRef, DestIsSigned: LLVMBool): LLVMOpcode;
export declare function _LLVMBuildICmp(undefined: LLVMBuilderRef, Op: LLVMIntPredicate, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildFCmp(undefined: LLVMBuilderRef, Op: LLVMRealPredicate, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildPhi(undefined: LLVMBuilderRef, Ty: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildCall2(undefined: LLVMBuilderRef, undefined: LLVMTypeRef, Fn: LLVMValueRef, Args: LLVMValueRef, NumArgs: number, Name: string): LLVMValueRef;
export declare function _LLVMBuildSelect(undefined: LLVMBuilderRef, If: LLVMValueRef, Then: LLVMValueRef, Else: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildVAArg(undefined: LLVMBuilderRef, List: LLVMValueRef, Ty: LLVMTypeRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildExtractElement(undefined: LLVMBuilderRef, VecVal: LLVMValueRef, Index: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildInsertElement(undefined: LLVMBuilderRef, VecVal: LLVMValueRef, EltVal: LLVMValueRef, Index: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildShuffleVector(undefined: LLVMBuilderRef, V1: LLVMValueRef, V2: LLVMValueRef, Mask: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildExtractValue(undefined: LLVMBuilderRef, AggVal: LLVMValueRef, Index: number, Name: string): LLVMValueRef;
export declare function _LLVMBuildInsertValue(undefined: LLVMBuilderRef, AggVal: LLVMValueRef, EltVal: LLVMValueRef, Index: number, Name: string): LLVMValueRef;
export declare function _LLVMBuildFreeze(undefined: LLVMBuilderRef, Val: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildIsNull(undefined: LLVMBuilderRef, Val: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildIsNotNull(undefined: LLVMBuilderRef, Val: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildPtrDiff2(undefined: LLVMBuilderRef, ElemTy: LLVMTypeRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: string): LLVMValueRef;
export declare function _LLVMBuildFence(B: LLVMBuilderRef, ordering: LLVMAtomicOrdering, singleThread: LLVMBool, Name: string): LLVMValueRef;
export declare function _LLVMBuildAtomicRMW(B: LLVMBuilderRef, op: LLVMAtomicRMWBinOp, PTR: LLVMValueRef, Val: LLVMValueRef, ordering: LLVMAtomicOrdering, singleThread: LLVMBool): LLVMValueRef;
export declare function _LLVMBuildAtomicCmpXchg(B: LLVMBuilderRef, Ptr: LLVMValueRef, Cmp: LLVMValueRef, New: LLVMValueRef, SuccessOrdering: LLVMAtomicOrdering, FailureOrdering: LLVMAtomicOrdering, SingleThread: LLVMBool): LLVMValueRef;
export declare function _LLVMGetNumMaskElements(ShuffleVectorInst: LLVMValueRef): unsigned;
export declare function _LLVMGetUndefMaskElem(): int;
export declare function _LLVMGetMaskValue(ShuffleVectorInst: LLVMValueRef, Elt: number): int;
export declare function _LLVMIsAtomicSingleThread(AtomicInst: LLVMValueRef): LLVMBool;
export declare function _LLVMSetAtomicSingleThread(AtomicInst: LLVMValueRef, SingleThread: LLVMBool): void;
export declare function _LLVMGetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef): LLVMAtomicOrdering;
export declare function _LLVMSetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering): void;
export declare function _LLVMGetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef): LLVMAtomicOrdering;
export declare function _LLVMSetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering): void;
export declare function _LLVMCreateModuleProviderForExistingModule(M: LLVMModuleRef): LLVMModuleProviderRef;
export declare function _LLVMDisposeModuleProvider(M: LLVMModuleProviderRef): void;
export declare function _LLVMCreateMemoryBufferWithContentsOfFile(Path: string, OutMemBuf: LLVMMemoryBufferRef, OutMessage: string[]): LLVMBool;
export declare function _LLVMCreateMemoryBufferWithSTDIN(OutMemBuf: LLVMMemoryBufferRef, OutMessage: string[]): LLVMBool;
export declare function _LLVMCreateMemoryBufferWithMemoryRange(InputData: string, InputDataLength: number, BufferName: string, RequiresNullTerminator: LLVMBool): LLVMMemoryBufferRef;
export declare function _LLVMCreateMemoryBufferWithMemoryRangeCopy(InputData: string, InputDataLength: number, BufferName: string): LLVMMemoryBufferRef;
export declare function _LLVMGetBufferStart(MemBuf: LLVMMemoryBufferRef): const;
export declare function _LLVMGetBufferSize(MemBuf: LLVMMemoryBufferRef): size_t;
export declare function _LLVMDisposeMemoryBuffer(MemBuf: LLVMMemoryBufferRef): void;
export declare function _LLVMGetGlobalPassRegistry(): LLVMPassRegistryRef;
export declare function _LLVMCreatePassManager(): LLVMPassManagerRef;
export declare function _LLVMCreateFunctionPassManagerForModule(M: LLVMModuleRef): LLVMPassManagerRef;
export declare function _LLVMCreateFunctionPassManager(MP: LLVMModuleProviderRef): LLVMPassManagerRef;
export declare function _LLVMRunPassManager(PM: LLVMPassManagerRef, M: LLVMModuleRef): LLVMBool;
export declare function _LLVMInitializeFunctionPassManager(FPM: LLVMPassManagerRef): LLVMBool;
export declare function _LLVMRunFunctionPassManager(FPM: LLVMPassManagerRef, F: LLVMValueRef): LLVMBool;
export declare function _LLVMFinalizeFunctionPassManager(FPM: LLVMPassManagerRef): LLVMBool;
export declare function _LLVMDisposePassManager(PM: LLVMPassManagerRef): void;
export declare function _LLVMStartMultithreaded(): LLVMBool;
export declare function _LLVMStopMultithreaded(): void;
export declare function _LLVMIsMultithreaded(): LLVMBool;
export declare function _LLVMDebugMetadataVersion(): unsigned;
export declare function _LLVMGetModuleDebugMetadataVersion(Module: LLVMModuleRef): unsigned;
export declare function _LLVMStripModuleDebugInfo(Module: LLVMModuleRef): LLVMBool;
export declare function _LLVMCreateDIBuilderDisallowUnresolved(M: LLVMModuleRef): LLVMDIBuilderRef;
export declare function _LLVMCreateDIBuilder(M: LLVMModuleRef): LLVMDIBuilderRef;
export declare function _LLVMDisposeDIBuilder(Builder: LLVMDIBuilderRef): void;
export declare function _LLVMDIBuilderFinalize(Builder: LLVMDIBuilderRef): void;
export declare function _LLVMDIBuilderFinalizeSubprogram(Builder: LLVMDIBuilderRef, Subprogram: LLVMMetadataRef): void;
export declare function _LLVMDIBuilderCreateCompileUnit(Builder: LLVMDIBuilderRef, Lang: LLVMDWARFSourceLanguage, FileRef: LLVMMetadataRef, Producer: string, ProducerLen: number, isOptimized: LLVMBool, Flags: string, FlagsLen: number, RuntimeVer: number, SplitName: string, SplitNameLen: number, Kind: LLVMDWARFEmissionKind, DWOId: number, SplitDebugInlining: LLVMBool, DebugInfoForProfiling: LLVMBool, SysRoot: string, SysRootLen: number, SDK: string, SDKLen: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateFile(Builder: LLVMDIBuilderRef, Filename: string, FilenameLen: number, Directory: string, DirectoryLen: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateModule(Builder: LLVMDIBuilderRef, ParentScope: LLVMMetadataRef, Name: string, NameLen: number, ConfigMacros: string, ConfigMacrosLen: number, IncludePath: string, IncludePathLen: number, APINotesFile: string, APINotesFileLen: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateNameSpace(Builder: LLVMDIBuilderRef, ParentScope: LLVMMetadataRef, Name: string, NameLen: number, ExportSymbols: LLVMBool): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateFunction(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: string, NameLen: number, LinkageName: string, LinkageNameLen: number, File: LLVMMetadataRef, LineNo: number, Ty: LLVMMetadataRef, IsLocalToUnit: LLVMBool, IsDefinition: LLVMBool, ScopeLine: number, Flags: LLVMDIFlags, IsOptimized: LLVMBool): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateLexicalBlock(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: number, Column: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateLexicalBlockFile(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Discriminator: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateImportedModuleFromNamespace(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, NS: LLVMMetadataRef, File: LLVMMetadataRef, Line: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateImportedModuleFromAlias(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, ImportedEntity: LLVMMetadataRef, File: LLVMMetadataRef, Line: number, Elements: LLVMMetadataRef, NumElements: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateImportedModuleFromModule(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, M: LLVMMetadataRef, File: LLVMMetadataRef, Line: number, Elements: LLVMMetadataRef, NumElements: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateImportedDeclaration(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Decl: LLVMMetadataRef, File: LLVMMetadataRef, Line: number, Name: string, NameLen: number, Elements: LLVMMetadataRef, NumElements: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateDebugLocation(Ctx: LLVMContextRef, Line: number, Column: number, Scope: LLVMMetadataRef, InlinedAt: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDILocationGetLine(Location: LLVMMetadataRef): unsigned;
export declare function _LLVMDILocationGetColumn(Location: LLVMMetadataRef): unsigned;
export declare function _LLVMDILocationGetScope(Location: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDILocationGetInlinedAt(Location: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIScopeGetFile(Scope: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIFileGetDirectory(File: LLVMMetadataRef, Len: any): const;
export declare function _LLVMDIFileGetFilename(File: LLVMMetadataRef, Len: any): const;
export declare function _LLVMDIFileGetSource(File: LLVMMetadataRef, Len: any): const;
export declare function _LLVMDIBuilderGetOrCreateTypeArray(Builder: LLVMDIBuilderRef, Data: LLVMMetadataRef, NumElements: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateSubroutineType(Builder: LLVMDIBuilderRef, File: LLVMMetadataRef, ParameterTypes: LLVMMetadataRef, NumParameterTypes: number, Flags: LLVMDIFlags): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateMacro(Builder: LLVMDIBuilderRef, ParentMacroFile: LLVMMetadataRef, Line: number, RecordType: LLVMDWARFMacinfoRecordType, Name: string, NameLen: number, Value: string, ValueLen: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateTempMacroFile(Builder: LLVMDIBuilderRef, ParentMacroFile: LLVMMetadataRef, Line: number, File: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateEnumerator(Builder: LLVMDIBuilderRef, Name: string, NameLen: number, Value: number, IsUnsigned: LLVMBool): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateEnumerationType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: string, NameLen: number, File: LLVMMetadataRef, LineNumber: number, SizeInBits: number, AlignInBits: number, Elements: LLVMMetadataRef, NumElements: number, ClassTy: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateUnionType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: string, NameLen: number, File: LLVMMetadataRef, LineNumber: number, SizeInBits: number, AlignInBits: number, Flags: LLVMDIFlags, Elements: LLVMMetadataRef, NumElements: number, RunTimeLang: number, UniqueId: string, UniqueIdLen: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateArrayType(Builder: LLVMDIBuilderRef, Size: number, AlignInBits: number, Ty: LLVMMetadataRef, Subscripts: LLVMMetadataRef, NumSubscripts: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateVectorType(Builder: LLVMDIBuilderRef, Size: number, AlignInBits: number, Ty: LLVMMetadataRef, Subscripts: LLVMMetadataRef, NumSubscripts: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateUnspecifiedType(Builder: LLVMDIBuilderRef, Name: string, NameLen: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateBasicType(Builder: LLVMDIBuilderRef, Name: string, NameLen: number, SizeInBits: number, Encoding: LLVMDWARFTypeEncoding, Flags: LLVMDIFlags): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreatePointerType(Builder: LLVMDIBuilderRef, PointeeTy: LLVMMetadataRef, SizeInBits: number, AlignInBits: number, AddressSpace: number, Name: string, NameLen: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateStructType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: string, NameLen: number, File: LLVMMetadataRef, LineNumber: number, SizeInBits: number, AlignInBits: number, Flags: LLVMDIFlags, DerivedFrom: LLVMMetadataRef, Elements: LLVMMetadataRef, NumElements: number, RunTimeLang: number, VTableHolder: LLVMMetadataRef, UniqueId: string, UniqueIdLen: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateMemberType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: string, NameLen: number, File: LLVMMetadataRef, LineNo: number, SizeInBits: number, AlignInBits: number, OffsetInBits: number, Flags: LLVMDIFlags, Ty: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateStaticMemberType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: string, NameLen: number, File: LLVMMetadataRef, LineNumber: number, Type: LLVMMetadataRef, Flags: LLVMDIFlags, ConstantVal: LLVMValueRef, AlignInBits: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateMemberPointerType(Builder: LLVMDIBuilderRef, PointeeType: LLVMMetadataRef, ClassType: LLVMMetadataRef, SizeInBits: number, AlignInBits: number, Flags: LLVMDIFlags): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateObjCIVar(Builder: LLVMDIBuilderRef, Name: string, NameLen: number, File: LLVMMetadataRef, LineNo: number, SizeInBits: number, AlignInBits: number, OffsetInBits: number, Flags: LLVMDIFlags, Ty: LLVMMetadataRef, PropertyNode: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateObjCProperty(Builder: LLVMDIBuilderRef, Name: string, NameLen: number, File: LLVMMetadataRef, LineNo: number, GetterName: string, GetterNameLen: number, SetterName: string, SetterNameLen: number, PropertyAttributes: number, Ty: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateObjectPointerType(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateQualifiedType(Builder: LLVMDIBuilderRef, Tag: number, Type: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateReferenceType(Builder: LLVMDIBuilderRef, Tag: number, Type: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateNullPtrType(Builder: LLVMDIBuilderRef): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateTypedef(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef, Name: string, NameLen: number, File: LLVMMetadataRef, LineNo: number, Scope: LLVMMetadataRef, AlignInBits: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateInheritance(Builder: LLVMDIBuilderRef, Ty: LLVMMetadataRef, BaseTy: LLVMMetadataRef, BaseOffset: number, VBPtrOffset: number, Flags: LLVMDIFlags): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateForwardDecl(Builder: LLVMDIBuilderRef, Tag: number, Name: string, NameLen: number, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: number, RuntimeLang: number, SizeInBits: number, AlignInBits: number, UniqueIdentifier: string, UniqueIdentifierLen: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateReplaceableCompositeType(Builder: LLVMDIBuilderRef, Tag: number, Name: string, NameLen: number, Scope: LLVMMetadataRef, File: LLVMMetadataRef, Line: number, RuntimeLang: number, SizeInBits: number, AlignInBits: number, Flags: LLVMDIFlags, UniqueIdentifier: string, UniqueIdentifierLen: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateBitFieldMemberType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: string, NameLen: number, File: LLVMMetadataRef, LineNumber: number, SizeInBits: number, OffsetInBits: number, StorageOffsetInBits: number, Flags: LLVMDIFlags, Type: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateClassType(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: string, NameLen: number, File: LLVMMetadataRef, LineNumber: number, SizeInBits: number, AlignInBits: number, OffsetInBits: number, Flags: LLVMDIFlags, DerivedFrom: LLVMMetadataRef, Elements: LLVMMetadataRef, NumElements: number, VTableHolder: LLVMMetadataRef, TemplateParamsNode: LLVMMetadataRef, UniqueIdentifier: string, UniqueIdentifierLen: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateArtificialType(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDITypeGetName(DType: LLVMMetadataRef, Length: any): const;
export declare function _LLVMDITypeGetSizeInBits(DType: LLVMMetadataRef): uint64_t;
export declare function _LLVMDITypeGetOffsetInBits(DType: LLVMMetadataRef): uint64_t;
export declare function _LLVMDITypeGetAlignInBits(DType: LLVMMetadataRef): uint32_t;
export declare function _LLVMDITypeGetLine(DType: LLVMMetadataRef): unsigned;
export declare function _LLVMDITypeGetFlags(DType: LLVMMetadataRef): LLVMDIFlags;
export declare function _LLVMDIBuilderGetOrCreateSubrange(Builder: LLVMDIBuilderRef, LowerBound: number, Count: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderGetOrCreateArray(Builder: LLVMDIBuilderRef, Data: LLVMMetadataRef, NumElements: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateExpression(Builder: LLVMDIBuilderRef, Addr: any, Length: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateConstantValueExpression(Builder: LLVMDIBuilderRef, Value: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateGlobalVariableExpression(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: string, NameLen: number, Linkage: string, LinkLen: number, File: LLVMMetadataRef, LineNo: number, Ty: LLVMMetadataRef, LocalToUnit: LLVMBool, Expr: LLVMMetadataRef, Decl: LLVMMetadataRef, AlignInBits: number): LLVMMetadataRef;
export declare function _LLVMGetDINodeTag(MD: LLVMMetadataRef): uint16_t;
export declare function _LLVMDIGlobalVariableExpressionGetVariable(GVE: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIGlobalVariableExpressionGetExpression(GVE: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIVariableGetFile(Var: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIVariableGetScope(Var: LLVMMetadataRef): LLVMMetadataRef;
export declare function _LLVMDIVariableGetLine(Var: LLVMMetadataRef): unsigned;
export declare function _LLVMTemporaryMDNode(Ctx: LLVMContextRef, Data: LLVMMetadataRef, NumElements: number): LLVMMetadataRef;
export declare function _LLVMDisposeTemporaryMDNode(TempNode: LLVMMetadataRef): void;
export declare function _LLVMMetadataReplaceAllUsesWith(TempTargetMetadata: LLVMMetadataRef, Replacement: LLVMMetadataRef): void;
export declare function _LLVMDIBuilderCreateTempGlobalVariableFwdDecl(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: string, NameLen: number, Linkage: string, LnkLen: number, File: LLVMMetadataRef, LineNo: number, Ty: LLVMMetadataRef, LocalToUnit: LLVMBool, Decl: LLVMMetadataRef, AlignInBits: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderInsertDeclareBefore(Builder: LLVMDIBuilderRef, Storage: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Instr: LLVMValueRef): LLVMValueRef;
export declare function _LLVMDIBuilderInsertDeclareAtEnd(Builder: LLVMDIBuilderRef, Storage: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Block: LLVMBasicBlockRef): LLVMValueRef;
export declare function _LLVMDIBuilderInsertDbgValueBefore(Builder: LLVMDIBuilderRef, Val: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Instr: LLVMValueRef): LLVMValueRef;
export declare function _LLVMDIBuilderInsertDbgValueAtEnd(Builder: LLVMDIBuilderRef, Val: LLVMValueRef, VarInfo: LLVMMetadataRef, Expr: LLVMMetadataRef, DebugLoc: LLVMMetadataRef, Block: LLVMBasicBlockRef): LLVMValueRef;
export declare function _LLVMDIBuilderCreateAutoVariable(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: string, NameLen: number, File: LLVMMetadataRef, LineNo: number, Ty: LLVMMetadataRef, AlwaysPreserve: LLVMBool, Flags: LLVMDIFlags, AlignInBits: number): LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateParameterVariable(Builder: LLVMDIBuilderRef, Scope: LLVMMetadataRef, Name: string, NameLen: number, ArgNo: number, File: LLVMMetadataRef, LineNo: number, Ty: LLVMMetadataRef, AlwaysPreserve: LLVMBool, Flags: LLVMDIFlags): LLVMMetadataRef;
export declare function _LLVMGetSubprogram(Func: LLVMValueRef): LLVMMetadataRef;
export declare function _LLVMSetSubprogram(Func: LLVMValueRef, SP: LLVMMetadataRef): void;
export declare function _LLVMDISubprogramGetLine(Subprogram: LLVMMetadataRef): unsigned;
export declare function _LLVMInstructionGetDebugLoc(Inst: LLVMValueRef): LLVMMetadataRef;
export declare function _LLVMInstructionSetDebugLoc(Inst: LLVMValueRef, Loc: LLVMMetadataRef): void;
export declare function _LLVMGetMetadataKind(Metadata: LLVMMetadataRef): LLVMMetadataKind;
export declare function _LLVMCreateDisasm(TripleName: string, DisInfo: any, TagType: number, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback): LLVMDisasmContextRef;
export declare function _LLVMCreateDisasmCPU(Triple: string, CPU: string, DisInfo: any, TagType: number, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback): LLVMDisasmContextRef;
export declare function _LLVMCreateDisasmCPUFeatures(Triple: string, CPU: string, Features: string, DisInfo: any, TagType: number, GetOpInfo: LLVMOpInfoCallback, SymbolLookUp: LLVMSymbolLookupCallback): LLVMDisasmContextRef;
export declare function _LLVMSetDisasmOptions(DC: LLVMDisasmContextRef, Options: number): int;
export declare function _LLVMDisasmDispose(DC: LLVMDisasmContextRef): void;
export declare function _LLVMDisasmInstruction(DC: LLVMDisasmContextRef, Bytes: uint8_t, BytesSize: number, PC: number, OutString: any, OutStringSize: number): size_t;
export declare function _LLVMGetErrorTypeId(Err: LLVMErrorRef): LLVMErrorTypeId;
export declare function _LLVMConsumeError(Err: LLVMErrorRef): void;
export declare function _LLVMGetErrorMessage(Err: LLVMErrorRef): char;
export declare function _LLVMDisposeErrorMessage(ErrMsg: any): void;
export declare function _LLVMGetStringErrorTypeId(): LLVMErrorTypeId;
export declare function _LLVMCreateStringError(ErrMsg: string): LLVMErrorRef;
export declare function _LLVMInitializeWebAssemblyTargetInfo(): void;
export declare function _LLVMInitializeWebAssemblyTarget(): void;
export declare function _LLVMInitializeWebAssemblyTargetMC(): void;
export declare function _LLVMInitializeWebAssemblyAsmPrinter(): void;
export declare function _LLVMInitializeWebAssemblyAsmParser(): void;
export declare function _LLVMInitializeWebAssemblyDisassembler(): void;
export declare function _LLVMGetModuleDataLayout(M: LLVMModuleRef): LLVMTargetDataRef;
export declare function _LLVMSetModuleDataLayout(M: LLVMModuleRef, DL: LLVMTargetDataRef): void;
export declare function _LLVMCreateTargetData(StringRep: string): LLVMTargetDataRef;
export declare function _LLVMDisposeTargetData(TD: LLVMTargetDataRef): void;
export declare function _LLVMAddTargetLibraryInfo(TLI: LLVMTargetLibraryInfoRef, PM: LLVMPassManagerRef): void;
export declare function _LLVMCopyStringRepOfTargetData(TD: LLVMTargetDataRef): char;
export declare function _LLVMByteOrder(TD: LLVMTargetDataRef): enum;
export declare function _LLVMPointerSize(TD: LLVMTargetDataRef): unsigned;
export declare function _LLVMPointerSizeForAS(TD: LLVMTargetDataRef, AS: number): unsigned;
export declare function _LLVMIntPtrType(TD: LLVMTargetDataRef): LLVMTypeRef;
export declare function _LLVMIntPtrTypeForAS(TD: LLVMTargetDataRef, AS: number): LLVMTypeRef;
export declare function _LLVMIntPtrTypeInContext(C: LLVMContextRef, TD: LLVMTargetDataRef): LLVMTypeRef;
export declare function _LLVMIntPtrTypeForASInContext(C: LLVMContextRef, TD: LLVMTargetDataRef, AS: number): LLVMTypeRef;
export declare function _LLVMSizeOfTypeInBits(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): unsigned;
export declare function _LLVMStoreSizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): unsigned;
export declare function _LLVMABISizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): unsigned;
export declare function _LLVMABIAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): unsigned;
export declare function _LLVMCallFrameAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): unsigned;
export declare function _LLVMPreferredAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): unsigned;
export declare function _LLVMPreferredAlignmentOfGlobal(TD: LLVMTargetDataRef, GlobalVar: LLVMValueRef): unsigned;
export declare function _LLVMElementAtOffset(TD: LLVMTargetDataRef, StructTy: LLVMTypeRef, Offset: number): unsigned;
export declare function _LLVMOffsetOfElement(TD: LLVMTargetDataRef, StructTy: LLVMTypeRef, Element: number): unsigned;
export declare function _LLVMGetFirstTarget(): LLVMTargetRef;
export declare function _LLVMGetNextTarget(T: LLVMTargetRef): LLVMTargetRef;
export declare function _LLVMGetTargetFromName(Name: string): LLVMTargetRef;
export declare function _LLVMGetTargetFromTriple(Triple: string, T: LLVMTargetRef, ErrorMessage: string[]): LLVMBool;
export declare function _LLVMGetTargetName(T: LLVMTargetRef): const;
export declare function _LLVMGetTargetDescription(T: LLVMTargetRef): const;
export declare function _LLVMTargetHasJIT(T: LLVMTargetRef): LLVMBool;
export declare function _LLVMTargetHasTargetMachine(T: LLVMTargetRef): LLVMBool;
export declare function _LLVMTargetHasAsmBackend(T: LLVMTargetRef): LLVMBool;
export declare function _LLVMCreateTargetMachine(T: LLVMTargetRef, Triple: string, CPU: string, Features: string, Level: LLVMCodeGenOptLevel, Reloc: LLVMRelocMode, CodeModel: LLVMCodeModel): LLVMTargetMachineRef;
export declare function _LLVMDisposeTargetMachine(T: LLVMTargetMachineRef): void;
export declare function _LLVMGetTargetMachineTarget(T: LLVMTargetMachineRef): LLVMTargetRef;
export declare function _LLVMGetTargetMachineTriple(T: LLVMTargetMachineRef): char;
export declare function _LLVMGetTargetMachineCPU(T: LLVMTargetMachineRef): char;
export declare function _LLVMGetTargetMachineFeatureString(T: LLVMTargetMachineRef): char;
export declare function _LLVMCreateTargetDataLayout(T: LLVMTargetMachineRef): LLVMTargetDataRef;
export declare function _LLVMSetTargetMachineAsmVerbosity(T: LLVMTargetMachineRef, VerboseAsm: LLVMBool): void;
export declare function _LLVMTargetMachineEmitToFile(T: LLVMTargetMachineRef, M: LLVMModuleRef, Filename: string, codegen: LLVMCodeGenFileType, ErrorMessage: string[]): LLVMBool;
export declare function _LLVMTargetMachineEmitToMemoryBuffer(T: LLVMTargetMachineRef, M: LLVMModuleRef, codegen: LLVMCodeGenFileType, ErrorMessage: string[], OutMemBuf: LLVMMemoryBufferRef): LLVMBool;
export declare function _LLVMGetDefaultTargetTriple(): char;
export declare function _LLVMNormalizeTargetTriple(triple: string): char;
export declare function _LLVMGetHostCPUName(): char;
export declare function _LLVMGetHostCPUFeatures(): char;
export declare function _LLVMAddAnalysisPasses(T: LLVMTargetMachineRef, PM: LLVMPassManagerRef): void;
export declare function _LLVMLinkInMCJIT(): void;
export declare function _LLVMLinkInInterpreter(): void;
export declare function _LLVMCreateGenericValueOfInt(Ty: LLVMTypeRef, N: number, IsSigned: LLVMBool): LLVMGenericValueRef;
export declare function _LLVMCreateGenericValueOfPointer(P: any): LLVMGenericValueRef;
export declare function _LLVMCreateGenericValueOfFloat(Ty: LLVMTypeRef, N: number): LLVMGenericValueRef;
export declare function _LLVMGenericValueIntWidth(GenValRef: LLVMGenericValueRef): unsigned;
export declare function _LLVMGenericValueToInt(GenVal: LLVMGenericValueRef, IsSigned: LLVMBool): unsigned;
export declare function _LLVMGenericValueToPointer(GenVal: LLVMGenericValueRef): void;
export declare function _LLVMGenericValueToFloat(TyRef: LLVMTypeRef, GenVal: LLVMGenericValueRef): double;
export declare function _LLVMDisposeGenericValue(GenVal: LLVMGenericValueRef): void;
export declare function _LLVMCreateExecutionEngineForModule(OutEE: LLVMExecutionEngineRef, M: LLVMModuleRef, OutError: string[]): LLVMBool;
export declare function _LLVMCreateInterpreterForModule(OutInterp: LLVMExecutionEngineRef, M: LLVMModuleRef, OutError: string[]): LLVMBool;
export declare function _LLVMCreateJITCompilerForModule(OutJIT: LLVMExecutionEngineRef, M: LLVMModuleRef, OptLevel: number, OutError: string[]): LLVMBool;
export declare function _LLVMInitializeMCJITCompilerOptions(Options: any, SizeOfOptions: number): void;
export declare function _LLVMCreateMCJITCompilerForModule(OutJIT: LLVMExecutionEngineRef, M: LLVMModuleRef, Options: any, SizeOfOptions: number, OutError: string[]): LLVMBool;
export declare function _LLVMDisposeExecutionEngine(EE: LLVMExecutionEngineRef): void;
export declare function _LLVMRunStaticConstructors(EE: LLVMExecutionEngineRef): void;
export declare function _LLVMRunStaticDestructors(EE: LLVMExecutionEngineRef): void;
export declare function _LLVMRunFunctionAsMain(EE: LLVMExecutionEngineRef, F: LLVMValueRef, ArgC: number, ArgV: any, EnvP: any): int;
export declare function _LLVMRunFunction(EE: LLVMExecutionEngineRef, F: LLVMValueRef, NumArgs: number, Args: LLVMGenericValueRef): LLVMGenericValueRef;
export declare function _LLVMFreeMachineCodeForFunction(EE: LLVMExecutionEngineRef, F: LLVMValueRef): void;
export declare function _LLVMAddModule(EE: LLVMExecutionEngineRef, M: LLVMModuleRef): void;
export declare function _LLVMRemoveModule(EE: LLVMExecutionEngineRef, M: LLVMModuleRef, OutMod: LLVMModuleRef, OutError: string[]): LLVMBool;
export declare function _LLVMFindFunction(EE: LLVMExecutionEngineRef, Name: string, OutFn: LLVMValueRef): LLVMBool;
export declare function _LLVMRecompileAndRelinkFunction(EE: LLVMExecutionEngineRef, Fn: LLVMValueRef): void;
export declare function _LLVMGetExecutionEngineTargetData(EE: LLVMExecutionEngineRef): LLVMTargetDataRef;
export declare function _LLVMGetExecutionEngineTargetMachine(EE: LLVMExecutionEngineRef): LLVMTargetMachineRef;
export declare function _LLVMAddGlobalMapping(EE: LLVMExecutionEngineRef, Global: LLVMValueRef, Addr: any): void;
export declare function _LLVMGetPointerToGlobal(EE: LLVMExecutionEngineRef, Global: LLVMValueRef): void;
export declare function _LLVMGetGlobalValueAddress(EE: LLVMExecutionEngineRef, Name: string): uint64_t;
export declare function _LLVMGetFunctionAddress(EE: LLVMExecutionEngineRef, Name: string): uint64_t;
export declare function _LLVMExecutionEngineGetErrMsg(EE: LLVMExecutionEngineRef, OutError: string[]): LLVMBool;
export declare function _LLVMCreateSimpleMCJITMemoryManager(Opaque: any, AllocateCodeSection: LLVMMemoryManagerAllocateCodeSectionCallback, AllocateDataSection: LLVMMemoryManagerAllocateDataSectionCallback, FinalizeMemory: LLVMMemoryManagerFinalizeMemoryCallback, Destroy: LLVMMemoryManagerDestroyCallback): LLVMMCJITMemoryManagerRef;
export declare function _LLVMDisposeMCJITMemoryManager(MM: LLVMMCJITMemoryManagerRef): void;
export declare function _LLVMCreateGDBRegistrationListener(): LLVMJITEventListenerRef;
export declare function _LLVMCreateIntelJITEventListener(): LLVMJITEventListenerRef;
export declare function _LLVMCreateOProfileJITEventListener(): LLVMJITEventListenerRef;
export declare function _LLVMCreatePerfJITEventListener(): LLVMJITEventListenerRef;
export declare function _LLVMInitializeCore(R: LLVMPassRegistryRef): void;
export declare function _LLVMInitializeTransformUtils(R: LLVMPassRegistryRef): void;
export declare function _LLVMInitializeScalarOpts(R: LLVMPassRegistryRef): void;
export declare function _LLVMInitializeVectorization(R: LLVMPassRegistryRef): void;
export declare function _LLVMInitializeInstCombine(R: LLVMPassRegistryRef): void;
export declare function _LLVMInitializeIPO(R: LLVMPassRegistryRef): void;
export declare function _LLVMInitializeAnalysis(R: LLVMPassRegistryRef): void;
export declare function _LLVMInitializeIPA(R: LLVMPassRegistryRef): void;
export declare function _LLVMInitializeCodeGen(R: LLVMPassRegistryRef): void;
export declare function _LLVMInitializeTarget(R: LLVMPassRegistryRef): void;
export declare function _LLVMParseIRInContext(ContextRef: LLVMContextRef, MemBuf: LLVMMemoryBufferRef, OutM: LLVMModuleRef, OutMessage: string[]): LLVMBool;
export declare function _LLVMLinkModules2(Dest: LLVMModuleRef, Src: LLVMModuleRef): LLVMBool;
export declare function _LLVMCreateBinary(MemBuf: LLVMMemoryBufferRef, Context: LLVMContextRef, ErrorMessage: string[]): LLVMBinaryRef;
export declare function _LLVMDisposeBinary(BR: LLVMBinaryRef): void;
export declare function _LLVMBinaryCopyMemoryBuffer(BR: LLVMBinaryRef): LLVMMemoryBufferRef;
export declare function _LLVMBinaryGetType(BR: LLVMBinaryRef): LLVMBinaryType;
export declare function _LLVMMachOUniversalBinaryCopyObjectForArch(BR: LLVMBinaryRef, Arch: string, ArchLen: number, ErrorMessage: string[]): LLVMBinaryRef;
export declare function _LLVMObjectFileCopySectionIterator(BR: LLVMBinaryRef): LLVMSectionIteratorRef;
export declare function _LLVMObjectFileIsSectionIteratorAtEnd(BR: LLVMBinaryRef, SI: LLVMSectionIteratorRef): LLVMBool;
export declare function _LLVMObjectFileCopySymbolIterator(BR: LLVMBinaryRef): LLVMSymbolIteratorRef;
export declare function _LLVMObjectFileIsSymbolIteratorAtEnd(BR: LLVMBinaryRef, SI: LLVMSymbolIteratorRef): LLVMBool;
export declare function _LLVMDisposeSectionIterator(SI: LLVMSectionIteratorRef): void;
export declare function _LLVMMoveToNextSection(SI: LLVMSectionIteratorRef): void;
export declare function _LLVMMoveToContainingSection(Sect: LLVMSectionIteratorRef, Sym: LLVMSymbolIteratorRef): void;
export declare function _LLVMDisposeSymbolIterator(SI: LLVMSymbolIteratorRef): void;
export declare function _LLVMMoveToNextSymbol(SI: LLVMSymbolIteratorRef): void;
export declare function _LLVMGetSectionName(SI: LLVMSectionIteratorRef): const;
export declare function _LLVMGetSectionSize(SI: LLVMSectionIteratorRef): uint64_t;
export declare function _LLVMGetSectionContents(SI: LLVMSectionIteratorRef): const;
export declare function _LLVMGetSectionAddress(SI: LLVMSectionIteratorRef): uint64_t;
export declare function _LLVMGetSectionContainsSymbol(SI: LLVMSectionIteratorRef, Sym: LLVMSymbolIteratorRef): LLVMBool;
export declare function _LLVMGetRelocations(Section: LLVMSectionIteratorRef): LLVMRelocationIteratorRef;
export declare function _LLVMDisposeRelocationIterator(RI: LLVMRelocationIteratorRef): void;
export declare function _LLVMIsRelocationIteratorAtEnd(Section: LLVMSectionIteratorRef, RI: LLVMRelocationIteratorRef): LLVMBool;
export declare function _LLVMMoveToNextRelocation(RI: LLVMRelocationIteratorRef): void;
export declare function _LLVMGetSymbolName(SI: LLVMSymbolIteratorRef): const;
export declare function _LLVMGetSymbolAddress(SI: LLVMSymbolIteratorRef): uint64_t;
export declare function _LLVMGetSymbolSize(SI: LLVMSymbolIteratorRef): uint64_t;
export declare function _LLVMGetRelocationOffset(RI: LLVMRelocationIteratorRef): uint64_t;
export declare function _LLVMGetRelocationSymbol(RI: LLVMRelocationIteratorRef): LLVMSymbolIteratorRef;
export declare function _LLVMGetRelocationType(RI: LLVMRelocationIteratorRef): uint64_t;
export declare function _LLVMGetRelocationTypeName(RI: LLVMRelocationIteratorRef): const;
export declare function _LLVMGetRelocationValueString(RI: LLVMRelocationIteratorRef): const;
export declare function _LLVMCreateObjectFile(MemBuf: LLVMMemoryBufferRef): LLVMObjectFileRef;
export declare function _LLVMDisposeObjectFile(ObjectFile: LLVMObjectFileRef): void;
export declare function _LLVMGetSections(ObjectFile: LLVMObjectFileRef): LLVMSectionIteratorRef;
export declare function _LLVMIsSectionIteratorAtEnd(ObjectFile: LLVMObjectFileRef, SI: LLVMSectionIteratorRef): LLVMBool;
export declare function _LLVMGetSymbols(ObjectFile: LLVMObjectFileRef): LLVMSymbolIteratorRef;
export declare function _LLVMIsSymbolIteratorAtEnd(ObjectFile: LLVMObjectFileRef, SI: LLVMSymbolIteratorRef): LLVMBool;
export declare function _LLVMLoadLibraryPermanently(Filename: string): LLVMBool;
export declare function _LLVMParseCommandLineOptions(argc: number, argv: any, Overview: string): void;
export declare function _LLVMSearchForAddressOfSymbol(symbolName: string): void;
export declare function _LLVMAddSymbol(symbolName: string, symbolValue: any): void;


export function lower(str: string): LLVMStringRef {
  str += " ";
  const length = Buffer.byteLength(str);
  const ptr = LLVM._malloc<"LLVMStringRef">(length);
  Buffer.from(LLVM.HEAPU8.buffer, ptr).write(str, "utf-8");
  return ptr;
}

export function lift(ptr: Pointer<"LLVMStringRef">): string {
  const index = LLVM.HEAPU8.indexOf(0, ptr);
  return Buffer.from(LLVM.HEAPU8.buffer).toString("utf-8", ptr, index);
}

export function lowerTypeArray(elements: LLVMTypeRef[]): Pointer<LLVMTypeRef> {
  const elementCount = elements.length;
  const ptr = LLVM._malloc<LLVMTypeRef>(elementCount << 2);
  for (let i = 0; i < elementCount; i++) {
    LLVM.HEAPU32[ptr >>> 2] = elements[i];
  }
  return ptr;
}

