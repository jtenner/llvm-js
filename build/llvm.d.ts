//@ts-ignore
import llvm from "./llvm-wasm.mjs";
export default llvm as Promise<Module>;
const LLVM = await (llvm as Promise<Module>);
export type Pointer<T> = number & { type: T };

export type _LLVMBool = Pointer<"_LLVMBool">;
export type _LLVMMemoryBufferRef = Pointer<"_LLVMMemoryBufferRef">;
export type _LLVMContextRef = Pointer<"_LLVMContextRef">;
export type _LLVMModuleRef = Pointer<"_LLVMModuleRef">;
export type _LLVMTypeRef = Pointer<"_LLVMTypeRef">;
export type _LLVMValueRef = Pointer<"_LLVMValueRef">;
export type _LLVMBasicBlockRef = Pointer<"_LLVMBasicBlockRef">;
export type _LLVMMetadataRef = Pointer<"_LLVMMetadataRef">;
export type _LLVMNamedMDNodeRef = Pointer<"_LLVMNamedMDNodeRef">;
export type _LLVMValueMetadataEntry = Pointer<"_LLVMValueMetadataEntry">;
export type _LLVMBuilderRef = Pointer<"_LLVMBuilderRef">;
export type _LLVMDIBuilderRef = Pointer<"_LLVMDIBuilderRef">;
export type _LLVMModuleProviderRef = Pointer<"_LLVMModuleProviderRef">;
export type _LLVMPassManagerRef = Pointer<"_LLVMPassManagerRef">;
export type _LLVMPassRegistryRef = Pointer<"_LLVMPassRegistryRef">;
export type _LLVMUseRef = Pointer<"_LLVMUseRef">;
export type _LLVMAttributeRef = Pointer<"_LLVMAttributeRef">;
export type _LLVMDiagnosticInfoRef = Pointer<"_LLVMDiagnosticInfoRef">;
export type _LLVMComdatRef = Pointer<"_LLVMComdatRef">;
export type _LLVMModuleFlagEntry = Pointer<"_LLVMModuleFlagEntry">;
export type _LLVMJITEventListenerRef = Pointer<"_LLVMJITEventListenerRef">;
export type _LLVMBinaryRef = Pointer<"_LLVMBinaryRef">;
export type _LLVMVerifierFailureAction = Pointer<"_LLVMVerifierFailureAction">;
export type _LLVMComdatSelectionKind = Pointer<"_LLVMComdatSelectionKind">;
export type _LLVMFatalErrorHandler = Pointer<"_LLVMFatalErrorHandler">;
export type _LLVMOpcode = Pointer<"_LLVMOpcode">;
export type _LLVMTypeKind = Pointer<"_LLVMTypeKind">;
export type _LLVMLinkage = Pointer<"_LLVMLinkage">;
export type _LLVMVisibility = Pointer<"_LLVMVisibility">;
export type _LLVMUnnamedAddr = Pointer<"_LLVMUnnamedAddr">;
export type _LLVMDLLStorageClass = Pointer<"_LLVMDLLStorageClass">;
export type _LLVMCallConv = Pointer<"_LLVMCallConv">;
export type _LLVMValueKind = Pointer<"_LLVMValueKind">;
export type _LLVMIntPredicate = Pointer<"_LLVMIntPredicate">;
export type _LLVMRealPredicate = Pointer<"_LLVMRealPredicate">;
export type _LLVMLandingPadClauseTy = Pointer<"_LLVMLandingPadClauseTy">;
export type _LLVMThreadLocalMode = Pointer<"_LLVMThreadLocalMode">;
export type _LLVMAtomicOrdering = Pointer<"_LLVMAtomicOrdering">;
export type _LLVMAtomicRMWBinOp = Pointer<"_LLVMAtomicRMWBinOp">;
export type _LLVMDiagnosticSeverity = Pointer<"_LLVMDiagnosticSeverity">;
export type _LLVMInlineAsmDialect = Pointer<"_LLVMInlineAsmDialect">;
export type _LLVMModuleFlagBehavior = Pointer<"_LLVMModuleFlagBehavior">;
export type _LLVMAttributeIndex = Pointer<"_LLVMAttributeIndex">;
export type _LLVMDiagnosticHandler = Pointer<"_LLVMDiagnosticHandler">;
export type _LLVMYieldCallback = Pointer<"_LLVMYieldCallback">;
export type _LLVMDIFlags = Pointer<"_LLVMDIFlags">;
export type _LLVMDWARFSourceLanguage = Pointer<"_LLVMDWARFSourceLanguage">;
export type _LLVMDWARFEmissionKind = Pointer<"_LLVMDWARFEmissionKind">;
export type _LLVMMetadataKind = Pointer<"_LLVMMetadataKind">;
export type _LLVMDWARFTypeEncoding = Pointer<"_LLVMDWARFTypeEncoding">;
export type _LLVMDWARFMacinfoRecordType = Pointer<"_LLVMDWARFMacinfoRecordType">;
export type _LLVMDisasmContextRef = Pointer<"_LLVMDisasmContextRef">;
export type _LLVMOpInfoCallback = Pointer<"_LLVMOpInfoCallback">;
export type _LLVMSymbolLookupCallback = Pointer<"_LLVMSymbolLookupCallback">;
export type _LLVMErrorRef = Pointer<"_LLVMErrorRef">;
export type _LLVMErrorTypeId = Pointer<"_LLVMErrorTypeId">;
export type _LLVMTargetDataRef = Pointer<"_LLVMTargetDataRef">;
export type _LLVMTargetLibraryInfoRef = Pointer<"_LLVMTargetLibraryInfoRef">;
export type _LLVMTargetMachineRef = Pointer<"_LLVMTargetMachineRef">;
export type _LLVMTargetRef = Pointer<"_LLVMTargetRef">;
export type _LLVMCodeGenOptLevel = Pointer<"_LLVMCodeGenOptLevel">;
export type _LLVMRelocMode = Pointer<"_LLVMRelocMode">;
export type _LLVMCodeModel = Pointer<"_LLVMCodeModel">;
export type _LLVMCodeGenFileType = Pointer<"_LLVMCodeGenFileType">;
export type _LLVMGenericValueRef = Pointer<"_LLVMGenericValueRef">;
export type _LLVMExecutionEngineRef = Pointer<"_LLVMExecutionEngineRef">;
export type _LLVMMCJITMemoryManagerRef = Pointer<"_LLVMMCJITMemoryManagerRef">;
export type _LLVMMemoryManagerAllocateCodeSectionCallback = Pointer<"_LLVMMemoryManagerAllocateCodeSectionCallback">;
export type _LLVMMemoryManagerAllocateDataSectionCallback = Pointer<"_LLVMMemoryManagerAllocateDataSectionCallback">;
export type _LLVMMemoryManagerFinalizeMemoryCallback = Pointer<"_LLVMMemoryManagerFinalizeMemoryCallback">;
export type _LLVMMemoryManagerDestroyCallback = Pointer<"_LLVMMemoryManagerDestroyCallback">;
export type _LLVMLinkerMode = Pointer<"_LLVMLinkerMode">;
export type _LLVMSectionIteratorRef = Pointer<"_LLVMSectionIteratorRef">;
export type _LLVMSymbolIteratorRef = Pointer<"_LLVMSymbolIteratorRef">;
export type _LLVMRelocationIteratorRef = Pointer<"_LLVMRelocationIteratorRef">;
export type _LLVMBinaryType = Pointer<"_LLVMBinaryType">;
export type _LLVMObjectFileRef = Pointer<"_LLVMObjectFileRef">;

export interface Module {
  HEAPU8: Uint8Array;
  HEAPU32: Uint32Array;
  ready(): Promise<Module>;
  _LLVMAppendBasicBlock(func: LLVMFuncRef, name: LLVMStringRef): LLVMBasicBlockRef;

  _LLVMBuildAdd(B: LLVMBuilderRef, LHS: LLVMValueRef, RHS: LLVMValueRef, Name: LLVMStringRef): LLVMValueRef
  _LLVMBuildGlobalStringPtr(builder: LLVMBuilderRef, str: LLVMStringRef, name: LLVMStringRef): LLVMValueRef;
  _LLVMCreateBuilder(): LLVMBuilderRef;
  _LLVMConstInt(type: LLVMTypeRef, value: bigint, signExtend: LLVMBool): LLVMValueRef;
  _LLVMConstReal(type: LLVMTypeRef, value: number): LLVMValueRef;
  _LLVMConstString(str: LLVMStringRef, len: number, doNotNullTerminate: LLVMBool): LLVMValueRef;
  _LLVMGetParam(func: LLVMFuncRef, index: number): LLVMValueRef;
  _LLVMGetPoison(type: LLVMTypeRef): LLVMValueRef;
  _LLVMInt1Type(): LLVMTypeRef;
  _LLVMInt8Type(): LLVMTypeRef;
  _LLVMInt16Type(): LLVMTypeRef;
  _LLVMInt32Type(): LLVMTypeRef;
  _LLVMInt64Type(): LLVMTypeRef;
  _LLVMFloatType(): LLVMTypeRef;
  _LLVMDoubleType(): LLVMTypeRef;
  _LLVMVoidType(): LLVMTypeRef;
  _LLVMAddFunction(mod: LLVMModuleRef, name: LLVMStringRef, funcType: LLVMTypeRef): LLVMFuncRef;
  _LLVMFunctionType(returnType: LLVMTypeRef, parameterTypes: Pointer<LLVMTypeRef>, count: number, isVarArg: LLVMBool): LLVMTypeRef;
  _LLVMModuleCreateWithName(name: LLVMStringRef): LLVMModuleRef;
  _LLVMPositionBuilderAtEnd(builder: LLVMBuilderRef, block: LLVMBasicBlockRef): void;
  _malloc<T>(size: number): Pointer<T>;
  _free(ptr: Pointer<any>): void;
}

export declare function _LLVMVerifyModule(M: _LLVMModuleRef, Action: _LLVMVerifierFailureAction, OutMessage: string[]): _LLVMBool;
export declare function _LLVMVerifyFunction(Fn: _LLVMValueRef, Action: _LLVMVerifierFailureAction): _LLVMBool;
export declare function _LLVMViewFunctionCFG(Fn: _LLVMValueRef): _void;
export declare function _LLVMViewFunctionCFGOnly(Fn: _LLVMValueRef): _void;
export declare function _LLVMParseBitcode(MemBuf: _LLVMMemoryBufferRef, OutModule: _LLVMModuleRef, OutMessage: string[]): _LLVMBool;
export declare function _LLVMParseBitcode2(MemBuf: _LLVMMemoryBufferRef, OutModule: _LLVMModuleRef): _LLVMBool;
export declare function _LLVMParseBitcodeInContext(ContextRef: _LLVMContextRef, MemBuf: _LLVMMemoryBufferRef, OutModule: _LLVMModuleRef, OutMessage: string[]): _LLVMBool;
export declare function _LLVMParseBitcodeInContext2(ContextRef: _LLVMContextRef, MemBuf: _LLVMMemoryBufferRef, OutModule: _LLVMModuleRef): _LLVMBool;
export declare function _LLVMGetBitcodeModuleInContext(ContextRef: _LLVMContextRef, MemBuf: _LLVMMemoryBufferRef, OutM: _LLVMModuleRef, OutMessage: string[]): _LLVMBool;
export declare function _LLVMGetBitcodeModuleInContext2(ContextRef: _LLVMContextRef, MemBuf: _LLVMMemoryBufferRef, OutM: _LLVMModuleRef): _LLVMBool;
export declare function _LLVMGetBitcodeModule(MemBuf: _LLVMMemoryBufferRef, OutM: _LLVMModuleRef, OutMessage: string[]): _LLVMBool;
export declare function _LLVMGetBitcodeModule2(MemBuf: _LLVMMemoryBufferRef, OutM: _LLVMModuleRef): _LLVMBool;
export declare function _LLVMWriteBitcodeToFile(M: _LLVMModuleRef, Path: string): _int;
export declare function _LLVMWriteBitcodeToFD(M: _LLVMModuleRef, FD: number, ShouldClose: number, Unbuffered: number): _int;
export declare function _LLVMWriteBitcodeToFileHandle(M: _LLVMModuleRef, Handle: number): _int;
export declare function _LLVMWriteBitcodeToMemoryBuffer(M: _LLVMModuleRef): _LLVMMemoryBufferRef;
export declare function _LLVMGetOrInsertComdat(M: _LLVMModuleRef, Name: string): _LLVMComdatRef;
export declare function _LLVMGetComdat(V: _LLVMValueRef): _LLVMComdatRef;
export declare function _LLVMSetComdat(V: _LLVMValueRef, C: _LLVMComdatRef): _void;
export declare function _LLVMGetComdatSelectionKind(C: _LLVMComdatRef): _LLVMComdatSelectionKind;
export declare function _LLVMSetComdatSelectionKind(C: _LLVMComdatRef, Kind: _LLVMComdatSelectionKind): _void;
export declare function _LLVMInstallFatalErrorHandler(Handler: _LLVMFatalErrorHandler): _void;
export declare function _LLVMResetFatalErrorHandler(): _void;
export declare function _LLVMEnablePrettyStackTrace(): _void;
export declare function _LLVMInitializeCore(R: _LLVMPassRegistryRef): _void;
export declare function _LLVMShutdown(): _void;
export declare function _LLVMGetVersion(Major: any, Minor: any, Patch: any): _void;
export declare function _LLVMCreateMessage(Message: string): _char;
export declare function _LLVMDisposeMessage(Message: any): _void;
export declare function _LLVMContextCreate(): _LLVMContextRef;
export declare function _LLVMGetGlobalContext(): _LLVMContextRef;
export declare function _LLVMContextSetDiagnosticHandler(C: _LLVMContextRef, Handler: _LLVMDiagnosticHandler, DiagnosticContext: any): _void;
export declare function _LLVMContextGetDiagnosticHandler(C: _LLVMContextRef): _LLVMDiagnosticHandler;
export declare function _LLVMContextGetDiagnosticContext(C: _LLVMContextRef): _void;
export declare function _LLVMContextSetYieldCallback(C: _LLVMContextRef, Callback: _LLVMYieldCallback, OpaqueHandle: any): _void;
export declare function _LLVMContextShouldDiscardValueNames(C: _LLVMContextRef): _LLVMBool;
export declare function _LLVMContextSetDiscardValueNames(C: _LLVMContextRef, Discard: _LLVMBool): _void;
export declare function _LLVMContextDispose(C: _LLVMContextRef): _void;
export declare function _LLVMGetDiagInfoDescription(DI: _LLVMDiagnosticInfoRef): _char;
export declare function _LLVMGetDiagInfoSeverity(DI: _LLVMDiagnosticInfoRef): _LLVMDiagnosticSeverity;
export declare function _LLVMGetMDKindIDInContext(C: _LLVMContextRef, Name: string, SLen: number): _unsigned;
export declare function _LLVMGetMDKindID(Name: string, SLen: number): _unsigned;
export declare function _LLVMGetEnumAttributeKindForName(Name: string, SLen: number): _unsigned;
export declare function _LLVMGetLastEnumAttributeKind(): _unsigned;
export declare function _LLVMCreateEnumAttribute(C: _LLVMContextRef, KindID: number, Val: number): _LLVMAttributeRef;
export declare function _LLVMGetEnumAttributeKind(A: _LLVMAttributeRef): _unsigned;
export declare function _LLVMGetEnumAttributeValue(A: _LLVMAttributeRef): _uint64_t;
export declare function _LLVMCreateTypeAttribute(C: _LLVMContextRef, KindID: number, type_ref: _LLVMTypeRef): _LLVMAttributeRef;
export declare function _LLVMGetTypeAttributeValue(A: _LLVMAttributeRef): _LLVMTypeRef;
export declare function _LLVMCreateStringAttribute(C: _LLVMContextRef, K: string, KLength: number, V: string, VLength: number): _LLVMAttributeRef;
export declare function _LLVMGetStringAttributeKind(A: _LLVMAttributeRef, Length: any): _const;
export declare function _LLVMGetStringAttributeValue(A: _LLVMAttributeRef, Length: any): _const;
export declare function _LLVMIsEnumAttribute(A: _LLVMAttributeRef): _LLVMBool;
export declare function _LLVMIsStringAttribute(A: _LLVMAttributeRef): _LLVMBool;
export declare function _LLVMIsTypeAttribute(A: _LLVMAttributeRef): _LLVMBool;
export declare function _LLVMGetTypeByName2(C: _LLVMContextRef, Name: string): _LLVMTypeRef;
export declare function _LLVMModuleCreateWithName(ModuleID: string): _LLVMModuleRef;
export declare function _LLVMModuleCreateWithNameInContext(ModuleID: string, C: _LLVMContextRef): _LLVMModuleRef;
export declare function _LLVMCloneModule(M: _LLVMModuleRef): _LLVMModuleRef;
export declare function _LLVMDisposeModule(M: _LLVMModuleRef): _void;
export declare function _LLVMGetModuleIdentifier(M: _LLVMModuleRef, Len: any): _const;
export declare function _LLVMSetModuleIdentifier(M: _LLVMModuleRef, Ident: string, Len: number): _void;
export declare function _LLVMGetSourceFileName(M: _LLVMModuleRef, Len: any): _const;
export declare function _LLVMSetSourceFileName(M: _LLVMModuleRef, Name: string, Len: number): _void;
export declare function _LLVMGetDataLayoutStr(M: _LLVMModuleRef): _const;
export declare function _LLVMGetDataLayout(M: _LLVMModuleRef): _const;
export declare function _LLVMSetDataLayout(M: _LLVMModuleRef, DataLayoutStr: string): _void;
export declare function _LLVMGetTarget(M: _LLVMModuleRef): _const;
export declare function _LLVMSetTarget(M: _LLVMModuleRef, Triple: string): _void;
export declare function _LLVMCopyModuleFlagsMetadata(M: _LLVMModuleRef, Len: any): _LLVMModuleFlagEntry;
export declare function _LLVMDisposeModuleFlagsMetadata(Entries: _LLVMModuleFlagEntry): _void;
export declare function _LLVMModuleFlagEntriesGetFlagBehavior(Entries: _LLVMModuleFlagEntry, Index: number): _LLVMModuleFlagBehavior;
export declare function _LLVMModuleFlagEntriesGetKey(Entries: _LLVMModuleFlagEntry, Index: number, Len: any): _const;
export declare function _LLVMModuleFlagEntriesGetMetadata(Entries: _LLVMModuleFlagEntry, Index: number): _LLVMMetadataRef;
export declare function _LLVMGetModuleFlag(M: _LLVMModuleRef, Key: string, KeyLen: number): _LLVMMetadataRef;
export declare function _LLVMAddModuleFlag(M: _LLVMModuleRef, Behavior: _LLVMModuleFlagBehavior, Key: string, KeyLen: number, Val: _LLVMMetadataRef): _void;
export declare function _LLVMDumpModule(M: _LLVMModuleRef): _void;
export declare function _LLVMPrintModuleToFile(M: _LLVMModuleRef, Filename: string, ErrorMessage: string[]): _LLVMBool;
export declare function _LLVMPrintModuleToString(M: _LLVMModuleRef): _char;
export declare function _LLVMGetModuleInlineAsm(M: _LLVMModuleRef, Len: any): _const;
export declare function _LLVMSetModuleInlineAsm2(M: _LLVMModuleRef, Asm: string, Len: number): _void;
export declare function _LLVMAppendModuleInlineAsm(M: _LLVMModuleRef, Asm: string, Len: number): _void;
export declare function _LLVMGetInlineAsm(Ty: _LLVMTypeRef, AsmString: any, AsmStringSize: number, Constraints: any, ConstraintsSize: number, HasSideEffects: _LLVMBool, IsAlignStack: _LLVMBool, Dialect: _LLVMInlineAsmDialect, CanThrow: _LLVMBool): _LLVMValueRef;
export declare function _LLVMGetModuleContext(M: _LLVMModuleRef): _LLVMContextRef;
export declare function _LLVMGetTypeByName(M: _LLVMModuleRef, Name: string): _LLVMTypeRef;
export declare function _LLVMGetFirstNamedMetadata(M: _LLVMModuleRef): _LLVMNamedMDNodeRef;
export declare function _LLVMGetLastNamedMetadata(M: _LLVMModuleRef): _LLVMNamedMDNodeRef;
export declare function _LLVMGetNextNamedMetadata(NamedMDNode: _LLVMNamedMDNodeRef): _LLVMNamedMDNodeRef;
export declare function _LLVMGetPreviousNamedMetadata(NamedMDNode: _LLVMNamedMDNodeRef): _LLVMNamedMDNodeRef;
export declare function _LLVMGetNamedMetadata(M: _LLVMModuleRef, Name: string, NameLen: number): _LLVMNamedMDNodeRef;
export declare function _LLVMGetOrInsertNamedMetadata(M: _LLVMModuleRef, Name: string, NameLen: number): _LLVMNamedMDNodeRef;
export declare function _LLVMGetNamedMetadataName(NamedMD: _LLVMNamedMDNodeRef, NameLen: any): _const;
export declare function _LLVMGetNamedMetadataNumOperands(M: _LLVMModuleRef, Name: string): _unsigned;
export declare function _LLVMGetNamedMetadataOperands(M: _LLVMModuleRef, Name: string, Dest: _LLVMValueRef): _void;
export declare function _LLVMAddNamedMetadataOperand(M: _LLVMModuleRef, Name: string, Val: _LLVMValueRef): _void;
export declare function _LLVMGetDebugLocDirectory(Val: _LLVMValueRef, Length: any): _const;
export declare function _LLVMGetDebugLocFilename(Val: _LLVMValueRef, Length: any): _const;
export declare function _LLVMGetDebugLocLine(Val: _LLVMValueRef): _unsigned;
export declare function _LLVMGetDebugLocColumn(Val: _LLVMValueRef): _unsigned;
export declare function _LLVMAddFunction(M: _LLVMModuleRef, Name: string, FunctionTy: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMGetNamedFunction(M: _LLVMModuleRef, Name: string): _LLVMValueRef;
export declare function _LLVMGetFirstFunction(M: _LLVMModuleRef): _LLVMValueRef;
export declare function _LLVMGetLastFunction(M: _LLVMModuleRef): _LLVMValueRef;
export declare function _LLVMGetNextFunction(Fn: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMGetPreviousFunction(Fn: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMSetModuleInlineAsm(M: _LLVMModuleRef, Asm: string): _void;
export declare function _LLVMGetTypeKind(Ty: _LLVMTypeRef): _LLVMTypeKind;
export declare function _LLVMTypeIsSized(Ty: _LLVMTypeRef): _LLVMBool;
export declare function _LLVMGetTypeContext(Ty: _LLVMTypeRef): _LLVMContextRef;
export declare function _LLVMDumpType(Val: _LLVMTypeRef): _void;
export declare function _LLVMPrintTypeToString(Val: _LLVMTypeRef): _char;
export declare function _LLVMInt1TypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMInt8TypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMInt16TypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMInt32TypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMInt64TypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMInt128TypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMIntTypeInContext(C: _LLVMContextRef, NumBits: number): _LLVMTypeRef;
export declare function _LLVMInt1Type(): _LLVMTypeRef;
export declare function _LLVMInt8Type(): _LLVMTypeRef;
export declare function _LLVMInt16Type(): _LLVMTypeRef;
export declare function _LLVMInt32Type(): _LLVMTypeRef;
export declare function _LLVMInt64Type(): _LLVMTypeRef;
export declare function _LLVMInt128Type(): _LLVMTypeRef;
export declare function _LLVMIntType(NumBits: number): _LLVMTypeRef;
export declare function _LLVMGetIntTypeWidth(IntegerTy: _LLVMTypeRef): _unsigned;
export declare function _LLVMHalfTypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMBFloatTypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMFloatTypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMDoubleTypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMX86FP80TypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMFP128TypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMPPCFP128TypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMHalfType(): _LLVMTypeRef;
export declare function _LLVMBFloatType(): _LLVMTypeRef;
export declare function _LLVMFloatType(): _LLVMTypeRef;
export declare function _LLVMDoubleType(): _LLVMTypeRef;
export declare function _LLVMX86FP80Type(): _LLVMTypeRef;
export declare function _LLVMFP128Type(): _LLVMTypeRef;
export declare function _LLVMPPCFP128Type(): _LLVMTypeRef;
export declare function _LLVMFunctionType(ReturnType: _LLVMTypeRef, ParamTypes: _LLVMTypeRef, ParamCount: number, IsVarArg: _LLVMBool): _LLVMTypeRef;
export declare function _LLVMIsFunctionVarArg(FunctionTy: _LLVMTypeRef): _LLVMBool;
export declare function _LLVMGetReturnType(FunctionTy: _LLVMTypeRef): _LLVMTypeRef;
export declare function _LLVMCountParamTypes(FunctionTy: _LLVMTypeRef): _unsigned;
export declare function _LLVMGetParamTypes(FunctionTy: _LLVMTypeRef, Dest: _LLVMTypeRef): _void;
export declare function _LLVMStructTypeInContext(C: _LLVMContextRef, ElementTypes: _LLVMTypeRef, ElementCount: number, Packed: _LLVMBool): _LLVMTypeRef;
export declare function _LLVMStructType(ElementTypes: _LLVMTypeRef, ElementCount: number, Packed: _LLVMBool): _LLVMTypeRef;
export declare function _LLVMStructCreateNamed(C: _LLVMContextRef, Name: string): _LLVMTypeRef;
export declare function _LLVMGetStructName(Ty: _LLVMTypeRef): _const;
export declare function _LLVMStructSetBody(StructTy: _LLVMTypeRef, ElementTypes: _LLVMTypeRef, ElementCount: number, Packed: _LLVMBool): _void;
export declare function _LLVMCountStructElementTypes(StructTy: _LLVMTypeRef): _unsigned;
export declare function _LLVMGetStructElementTypes(StructTy: _LLVMTypeRef, Dest: _LLVMTypeRef): _void;
export declare function _LLVMStructGetTypeAtIndex(StructTy: _LLVMTypeRef, i: number): _LLVMTypeRef;
export declare function _LLVMIsPackedStruct(StructTy: _LLVMTypeRef): _LLVMBool;
export declare function _LLVMIsOpaqueStruct(StructTy: _LLVMTypeRef): _LLVMBool;
export declare function _LLVMIsLiteralStruct(StructTy: _LLVMTypeRef): _LLVMBool;
export declare function _LLVMGetElementType(Ty: _LLVMTypeRef): _LLVMTypeRef;
export declare function _LLVMGetSubtypes(Tp: _LLVMTypeRef, Arr: _LLVMTypeRef): _void;
export declare function _LLVMGetNumContainedTypes(Tp: _LLVMTypeRef): _unsigned;
export declare function _LLVMArrayType(ElementType: _LLVMTypeRef, ElementCount: number): _LLVMTypeRef;
export declare function _LLVMArrayType2(ElementType: _LLVMTypeRef, ElementCount: number): _LLVMTypeRef;
export declare function _LLVMGetArrayLength(ArrayTy: _LLVMTypeRef): _unsigned;
export declare function _LLVMGetArrayLength2(ArrayTy: _LLVMTypeRef): _uint64_t;
export declare function _LLVMPointerType(ElementType: _LLVMTypeRef, AddressSpace: number): _LLVMTypeRef;
export declare function _LLVMPointerTypeIsOpaque(Ty: _LLVMTypeRef): _LLVMBool;
export declare function _LLVMPointerTypeInContext(C: _LLVMContextRef, AddressSpace: number): _LLVMTypeRef;
export declare function _LLVMGetPointerAddressSpace(PointerTy: _LLVMTypeRef): _unsigned;
export declare function _LLVMVectorType(ElementType: _LLVMTypeRef, ElementCount: number): _LLVMTypeRef;
export declare function _LLVMScalableVectorType(ElementType: _LLVMTypeRef, ElementCount: number): _LLVMTypeRef;
export declare function _LLVMGetVectorSize(VectorTy: _LLVMTypeRef): _unsigned;
export declare function _LLVMVoidTypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMLabelTypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMX86MMXTypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMX86AMXTypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMTokenTypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMMetadataTypeInContext(C: _LLVMContextRef): _LLVMTypeRef;
export declare function _LLVMVoidType(): _LLVMTypeRef;
export declare function _LLVMLabelType(): _LLVMTypeRef;
export declare function _LLVMX86MMXType(): _LLVMTypeRef;
export declare function _LLVMX86AMXType(): _LLVMTypeRef;
export declare function _LLVMTargetExtTypeInContext(C: _LLVMContextRef, Name: string, TypeParams: _LLVMTypeRef, TypeParamCount: number, IntParams: any, IntParamCount: number): _LLVMTypeRef;
export declare function _LLVMTypeOf(Val: _LLVMValueRef): _LLVMTypeRef;
export declare function _LLVMGetValueKind(Val: _LLVMValueRef): _LLVMValueKind;
export declare function _LLVMGetValueName2(Val: _LLVMValueRef, Length: any): _const;
export declare function _LLVMSetValueName2(Val: _LLVMValueRef, Name: string, NameLen: number): _void;
export declare function _LLVMDumpValue(Val: _LLVMValueRef): _void;
export declare function _LLVMPrintValueToString(Val: _LLVMValueRef): _char;
export declare function _LLVMReplaceAllUsesWith(OldVal: _LLVMValueRef, NewVal: _LLVMValueRef): _void;
export declare function _LLVMIsConstant(Val: _LLVMValueRef): _LLVMBool;
export declare function _LLVMIsUndef(Val: _LLVMValueRef): _LLVMBool;
export declare function _LLVMIsPoison(Val: _LLVMValueRef): _LLVMBool;
export declare function _LLVMIsAArgument(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsABasicBlock(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAInlineAsm(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAUser(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAConstant(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsABlockAddress(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAConstantAggregateZero(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAConstantArray(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAConstantDataSequential(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAConstantDataArray(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAConstantDataVector(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAConstantExpr(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAConstantFP(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAConstantInt(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAConstantPointerNull(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAConstantStruct(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAConstantTokenNone(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAConstantVector(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAGlobalValue(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAGlobalAlias(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAGlobalObject(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAFunction(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAGlobalVariable(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAGlobalIFunc(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAUndefValue(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAPoisonValue(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAInstruction(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAUnaryOperator(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsABinaryOperator(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsACallInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAIntrinsicInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsADbgInfoIntrinsic(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsADbgVariableIntrinsic(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsADbgDeclareInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsADbgLabelInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAMemIntrinsic(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAMemCpyInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAMemMoveInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAMemSetInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsACmpInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAFCmpInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAICmpInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAExtractElementInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAGetElementPtrInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAInsertElementInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAInsertValueInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsALandingPadInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAPHINode(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsASelectInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAShuffleVectorInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAStoreInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsABranchInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAIndirectBrInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAInvokeInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAReturnInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsASwitchInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAUnreachableInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAResumeInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsACleanupReturnInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsACatchReturnInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsACatchSwitchInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsACallBrInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAFuncletPadInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsACatchPadInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsACleanupPadInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAUnaryInstruction(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAAllocaInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsACastInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAAddrSpaceCastInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsABitCastInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAFPExtInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAFPToSIInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAFPToUIInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAFPTruncInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAIntToPtrInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAPtrToIntInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsASExtInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsASIToFPInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsATruncInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAUIToFPInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAZExtInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAExtractValueInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsALoadInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAVAArgInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAFreezeInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAAtomicCmpXchgInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAAtomicRMWInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAFenceInst(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAMDNode(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAValueAsMetadata(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsAMDString(Val: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMGetValueName(Val: _LLVMValueRef): _const;
export declare function _LLVMSetValueName(Val: _LLVMValueRef, Name: string): _void;
export declare function _LLVMGetFirstUse(Val: _LLVMValueRef): _LLVMUseRef;
export declare function _LLVMGetNextUse(U: _LLVMUseRef): _LLVMUseRef;
export declare function _LLVMGetUser(U: _LLVMUseRef): _LLVMValueRef;
export declare function _LLVMGetUsedValue(U: _LLVMUseRef): _LLVMValueRef;
export declare function _LLVMGetOperand(Val: _LLVMValueRef, Index: number): _LLVMValueRef;
export declare function _LLVMGetOperandUse(Val: _LLVMValueRef, Index: number): _LLVMUseRef;
export declare function _LLVMSetOperand(User: _LLVMValueRef, Index: number, Val: _LLVMValueRef): _void;
export declare function _LLVMGetNumOperands(Val: _LLVMValueRef): _int;
export declare function _LLVMConstNull(Ty: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstAllOnes(Ty: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMGetUndef(Ty: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMGetPoison(Ty: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMIsNull(Val: _LLVMValueRef): _LLVMBool;
export declare function _LLVMConstPointerNull(Ty: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstInt(IntTy: _LLVMTypeRef, N: number, SignExtend: _LLVMBool): _LLVMValueRef;
export declare function _LLVMConstIntOfArbitraryPrecision(IntTy: _LLVMTypeRef, NumWords: number, Words: any): _LLVMValueRef;
export declare function _LLVMConstIntOfString(IntTy: _LLVMTypeRef, Text: string, Radix: number): _LLVMValueRef;
export declare function _LLVMConstIntOfStringAndSize(IntTy: _LLVMTypeRef, Text: string, SLen: number, Radix: number): _LLVMValueRef;
export declare function _LLVMConstReal(RealTy: _LLVMTypeRef, N: number): _LLVMValueRef;
export declare function _LLVMConstRealOfString(RealTy: _LLVMTypeRef, Text: string): _LLVMValueRef;
export declare function _LLVMConstRealOfStringAndSize(RealTy: _LLVMTypeRef, Text: string, SLen: number): _LLVMValueRef;
export declare function _LLVMConstIntGetZExtValue(ConstantVal: _LLVMValueRef): _unsigned;
export declare function _LLVMConstIntGetSExtValue(ConstantVal: _LLVMValueRef): _long;
export declare function _LLVMConstRealGetDouble(ConstantVal: _LLVMValueRef, losesInfo: _LLVMBool): _double;
export declare function _LLVMConstStringInContext(C: _LLVMContextRef, Str: string, Length: number, DontNullTerminate: _LLVMBool): _LLVMValueRef;
export declare function _LLVMConstString(Str: string, Length: number, DontNullTerminate: _LLVMBool): _LLVMValueRef;
export declare function _LLVMIsConstantString(c: _LLVMValueRef): _LLVMBool;
export declare function _LLVMGetAsString(c: _LLVMValueRef, Length: any): _const;
export declare function _LLVMConstStructInContext(C: _LLVMContextRef, ConstantVals: _LLVMValueRef, Count: number, Packed: _LLVMBool): _LLVMValueRef;
export declare function _LLVMConstStruct(ConstantVals: _LLVMValueRef, Count: number, Packed: _LLVMBool): _LLVMValueRef;
export declare function _LLVMConstArray(ElementTy: _LLVMTypeRef, ConstantVals: _LLVMValueRef, Length: number): _LLVMValueRef;
export declare function _LLVMConstArray2(ElementTy: _LLVMTypeRef, ConstantVals: _LLVMValueRef, Length: number): _LLVMValueRef;
export declare function _LLVMConstNamedStruct(StructTy: _LLVMTypeRef, ConstantVals: _LLVMValueRef, Count: number): _LLVMValueRef;
export declare function _LLVMGetAggregateElement(C: _LLVMValueRef, Idx: number): _LLVMValueRef;
export declare function _LLVMGetElementAsConstant(C: _LLVMValueRef, idx: number): _LLVMValueRef;
export declare function _LLVMConstVector(ScalarConstantVals: _LLVMValueRef, Size: number): _LLVMValueRef;
export declare function _LLVMGetConstOpcode(ConstantVal: _LLVMValueRef): _LLVMOpcode;
export declare function _LLVMAlignOf(Ty: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMSizeOf(Ty: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstNeg(ConstantVal: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstNSWNeg(ConstantVal: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstNUWNeg(ConstantVal: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstNot(ConstantVal: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstAdd(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstNSWAdd(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstNUWAdd(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstSub(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstNSWSub(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstNUWSub(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstMul(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstNSWMul(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstNUWMul(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstAnd(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstOr(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstXor(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstICmp(Predicate: _LLVMIntPredicate, LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstFCmp(Predicate: _LLVMRealPredicate, LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstShl(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstLShr(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstAShr(LHSConstant: _LLVMValueRef, RHSConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstGEP2(Ty: _LLVMTypeRef, ConstantVal: _LLVMValueRef, ConstantIndices: _LLVMValueRef, NumIndices: number): _LLVMValueRef;
export declare function _LLVMConstInBoundsGEP2(Ty: _LLVMTypeRef, ConstantVal: _LLVMValueRef, ConstantIndices: _LLVMValueRef, NumIndices: number): _LLVMValueRef;
export declare function _LLVMConstTrunc(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstSExt(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstZExt(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstFPTrunc(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstFPExt(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstUIToFP(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstSIToFP(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstFPToUI(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstFPToSI(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstPtrToInt(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstIntToPtr(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstBitCast(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstAddrSpaceCast(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstZExtOrBitCast(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstSExtOrBitCast(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstTruncOrBitCast(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstPointerCast(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstIntCast(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef, isSigned: _LLVMBool): _LLVMValueRef;
export declare function _LLVMConstFPCast(ConstantVal: _LLVMValueRef, ToType: _LLVMTypeRef): _LLVMValueRef;
export declare function _LLVMConstSelect(ConstantCondition: _LLVMValueRef, ConstantIfTrue: _LLVMValueRef, ConstantIfFalse: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstExtractElement(VectorConstant: _LLVMValueRef, IndexConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstInsertElement(VectorConstant: _LLVMValueRef, ElementValueConstant: _LLVMValueRef, IndexConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMConstShuffleVector(VectorAConstant: _LLVMValueRef, VectorBConstant: _LLVMValueRef, MaskConstant: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMBlockAddress(F: _LLVMValueRef, BB: _LLVMBasicBlockRef): _LLVMValueRef;
export declare function _LLVMConstInlineAsm(Ty: _LLVMTypeRef, AsmString: string, Constraints: string, HasSideEffects: _LLVMBool, IsAlignStack: _LLVMBool): _LLVMValueRef;
export declare function _LLVMGetGlobalParent(Global: _LLVMValueRef): _LLVMModuleRef;
export declare function _LLVMIsDeclaration(Global: _LLVMValueRef): _LLVMBool;
export declare function _LLVMGetLinkage(Global: _LLVMValueRef): _LLVMLinkage;
export declare function _LLVMSetLinkage(Global: _LLVMValueRef, Linkage: _LLVMLinkage): _void;
export declare function _LLVMGetSection(Global: _LLVMValueRef): _const;
export declare function _LLVMSetSection(Global: _LLVMValueRef, Section: string): _void;
export declare function _LLVMGetVisibility(Global: _LLVMValueRef): _LLVMVisibility;
export declare function _LLVMSetVisibility(Global: _LLVMValueRef, Viz: _LLVMVisibility): _void;
export declare function _LLVMGetDLLStorageClass(Global: _LLVMValueRef): _LLVMDLLStorageClass;
export declare function _LLVMSetDLLStorageClass(Global: _LLVMValueRef, Class: _LLVMDLLStorageClass): _void;
export declare function _LLVMGetUnnamedAddress(Global: _LLVMValueRef): _LLVMUnnamedAddr;
export declare function _LLVMSetUnnamedAddress(Global: _LLVMValueRef, UnnamedAddr: _LLVMUnnamedAddr): _void;
export declare function _LLVMGlobalGetValueType(Global: _LLVMValueRef): _LLVMTypeRef;
export declare function _LLVMHasUnnamedAddr(Global: _LLVMValueRef): _LLVMBool;
export declare function _LLVMSetUnnamedAddr(Global: _LLVMValueRef, HasUnnamedAddr: _LLVMBool): _void;
export declare function _LLVMGetAlignment(V: _LLVMValueRef): _unsigned;
export declare function _LLVMSetAlignment(V: _LLVMValueRef, Bytes: number): _void;
export declare function _LLVMGlobalSetMetadata(Global: _LLVMValueRef, Kind: number, MD: _LLVMMetadataRef): _void;
export declare function _LLVMGlobalEraseMetadata(Global: _LLVMValueRef, Kind: number): _void;
export declare function _LLVMGlobalClearMetadata(Global: _LLVMValueRef): _void;
export declare function _LLVMGlobalCopyAllMetadata(Value: _LLVMValueRef, NumEntries: any): _LLVMValueMetadataEntry;
export declare function _LLVMDisposeValueMetadataEntries(Entries: _LLVMValueMetadataEntry): _void;
export declare function _LLVMValueMetadataEntriesGetKind(Entries: _LLVMValueMetadataEntry, Index: number): _unsigned;
export declare function _LLVMValueMetadataEntriesGetMetadata(Entries: _LLVMValueMetadataEntry, Index: number): _LLVMMetadataRef;
export declare function _LLVMAddGlobal(M: _LLVMModuleRef, Ty: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMAddGlobalInAddressSpace(M: _LLVMModuleRef, Ty: _LLVMTypeRef, Name: string, AddressSpace: number): _LLVMValueRef;
export declare function _LLVMGetNamedGlobal(M: _LLVMModuleRef, Name: string): _LLVMValueRef;
export declare function _LLVMGetFirstGlobal(M: _LLVMModuleRef): _LLVMValueRef;
export declare function _LLVMGetLastGlobal(M: _LLVMModuleRef): _LLVMValueRef;
export declare function _LLVMGetNextGlobal(GlobalVar: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMGetPreviousGlobal(GlobalVar: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMDeleteGlobal(GlobalVar: _LLVMValueRef): _void;
export declare function _LLVMGetInitializer(GlobalVar: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMSetInitializer(GlobalVar: _LLVMValueRef, ConstantVal: _LLVMValueRef): _void;
export declare function _LLVMIsThreadLocal(GlobalVar: _LLVMValueRef): _LLVMBool;
export declare function _LLVMSetThreadLocal(GlobalVar: _LLVMValueRef, IsThreadLocal: _LLVMBool): _void;
export declare function _LLVMIsGlobalConstant(GlobalVar: _LLVMValueRef): _LLVMBool;
export declare function _LLVMSetGlobalConstant(GlobalVar: _LLVMValueRef, IsConstant: _LLVMBool): _void;
export declare function _LLVMGetThreadLocalMode(GlobalVar: _LLVMValueRef): _LLVMThreadLocalMode;
export declare function _LLVMSetThreadLocalMode(GlobalVar: _LLVMValueRef, Mode: _LLVMThreadLocalMode): _void;
export declare function _LLVMIsExternallyInitialized(GlobalVar: _LLVMValueRef): _LLVMBool;
export declare function _LLVMSetExternallyInitialized(GlobalVar: _LLVMValueRef, IsExtInit: _LLVMBool): _void;
export declare function _LLVMAddAlias2(M: _LLVMModuleRef, ValueTy: _LLVMTypeRef, AddrSpace: number, Aliasee: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMGetNamedGlobalAlias(M: _LLVMModuleRef, Name: string, NameLen: number): _LLVMValueRef;
export declare function _LLVMGetFirstGlobalAlias(M: _LLVMModuleRef): _LLVMValueRef;
export declare function _LLVMGetLastGlobalAlias(M: _LLVMModuleRef): _LLVMValueRef;
export declare function _LLVMGetNextGlobalAlias(GA: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMGetPreviousGlobalAlias(GA: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMAliasGetAliasee(Alias: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMAliasSetAliasee(Alias: _LLVMValueRef, Aliasee: _LLVMValueRef): _void;
export declare function _LLVMDeleteFunction(Fn: _LLVMValueRef): _void;
export declare function _LLVMHasPersonalityFn(Fn: _LLVMValueRef): _LLVMBool;
export declare function _LLVMGetPersonalityFn(Fn: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMSetPersonalityFn(Fn: _LLVMValueRef, PersonalityFn: _LLVMValueRef): _void;
export declare function _LLVMLookupIntrinsicID(Name: string, NameLen: number): _unsigned;
export declare function _LLVMGetIntrinsicID(Fn: _LLVMValueRef): _unsigned;
export declare function _LLVMGetIntrinsicDeclaration(Mod: _LLVMModuleRef, ID: number, ParamTypes: _LLVMTypeRef, ParamCount: number): _LLVMValueRef;
export declare function _LLVMIntrinsicGetType(Ctx: _LLVMContextRef, ID: number, ParamTypes: _LLVMTypeRef, ParamCount: number): _LLVMTypeRef;
export declare function _LLVMIntrinsicGetName(ID: number, NameLength: any): _const;
export declare function _LLVMIntrinsicCopyOverloadedName(ID: number, ParamTypes: _LLVMTypeRef, ParamCount: number, NameLength: any): _const;
export declare function _LLVMIntrinsicCopyOverloadedName2(Mod: _LLVMModuleRef, ID: number, ParamTypes: _LLVMTypeRef, ParamCount: number, NameLength: any): _const;
export declare function _LLVMIntrinsicIsOverloaded(ID: number): _LLVMBool;
export declare function _LLVMGetFunctionCallConv(Fn: _LLVMValueRef): _unsigned;
export declare function _LLVMSetFunctionCallConv(Fn: _LLVMValueRef, CC: number): _void;
export declare function _LLVMGetGC(Fn: _LLVMValueRef): _const;
export declare function _LLVMSetGC(Fn: _LLVMValueRef, Name: string): _void;
export declare function _LLVMAddAttributeAtIndex(F: _LLVMValueRef, Idx: _LLVMAttributeIndex, A: _LLVMAttributeRef): _void;
export declare function _LLVMGetAttributeCountAtIndex(F: _LLVMValueRef, Idx: _LLVMAttributeIndex): _unsigned;
export declare function _LLVMGetAttributesAtIndex(F: _LLVMValueRef, Idx: _LLVMAttributeIndex, Attrs: _LLVMAttributeRef): _void;
export declare function _LLVMGetEnumAttributeAtIndex(F: _LLVMValueRef, Idx: _LLVMAttributeIndex, KindID: number): _LLVMAttributeRef;
export declare function _LLVMGetStringAttributeAtIndex(F: _LLVMValueRef, Idx: _LLVMAttributeIndex, K: string, KLen: number): _LLVMAttributeRef;
export declare function _LLVMRemoveEnumAttributeAtIndex(F: _LLVMValueRef, Idx: _LLVMAttributeIndex, KindID: number): _void;
export declare function _LLVMRemoveStringAttributeAtIndex(F: _LLVMValueRef, Idx: _LLVMAttributeIndex, K: string, KLen: number): _void;
export declare function _LLVMAddTargetDependentFunctionAttr(Fn: _LLVMValueRef, A: string, V: string): _void;
export declare function _LLVMCountParams(Fn: _LLVMValueRef): _unsigned;
export declare function _LLVMGetParams(Fn: _LLVMValueRef, Params: _LLVMValueRef): _void;
export declare function _LLVMGetParam(Fn: _LLVMValueRef, Index: number): _LLVMValueRef;
export declare function _LLVMGetParamParent(Inst: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMGetFirstParam(Fn: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMGetLastParam(Fn: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMGetNextParam(Arg: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMGetPreviousParam(Arg: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMSetParamAlignment(Arg: _LLVMValueRef, Align: number): _void;
export declare function _LLVMAddGlobalIFunc(M: _LLVMModuleRef, Name: string, NameLen: number, Ty: _LLVMTypeRef, AddrSpace: number, Resolver: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMGetNamedGlobalIFunc(M: _LLVMModuleRef, Name: string, NameLen: number): _LLVMValueRef;
export declare function _LLVMGetFirstGlobalIFunc(M: _LLVMModuleRef): _LLVMValueRef;
export declare function _LLVMGetLastGlobalIFunc(M: _LLVMModuleRef): _LLVMValueRef;
export declare function _LLVMGetNextGlobalIFunc(IFunc: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMGetPreviousGlobalIFunc(IFunc: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMGetGlobalIFuncResolver(IFunc: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMSetGlobalIFuncResolver(IFunc: _LLVMValueRef, Resolver: _LLVMValueRef): _void;
export declare function _LLVMEraseGlobalIFunc(IFunc: _LLVMValueRef): _void;
export declare function _LLVMRemoveGlobalIFunc(IFunc: _LLVMValueRef): _void;
export declare function _LLVMMDStringInContext2(C: _LLVMContextRef, Str: string, SLen: number): _LLVMMetadataRef;
export declare function _LLVMMDNodeInContext2(C: _LLVMContextRef, MDs: _LLVMMetadataRef, Count: number): _LLVMMetadataRef;
export declare function _LLVMMetadataAsValue(C: _LLVMContextRef, MD: _LLVMMetadataRef): _LLVMValueRef;
export declare function _LLVMValueAsMetadata(Val: _LLVMValueRef): _LLVMMetadataRef;
export declare function _LLVMGetMDString(V: _LLVMValueRef, Length: any): _const;
export declare function _LLVMGetMDNodeNumOperands(V: _LLVMValueRef): _unsigned;
export declare function _LLVMGetMDNodeOperands(V: _LLVMValueRef, Dest: _LLVMValueRef): _void;
export declare function _LLVMReplaceMDNodeOperandWith(V: _LLVMValueRef, Index: number, Replacement: _LLVMMetadataRef): _void;
export declare function _LLVMMDStringInContext(C: _LLVMContextRef, Str: string, SLen: number): _LLVMValueRef;
export declare function _LLVMMDString(Str: string, SLen: number): _LLVMValueRef;
export declare function _LLVMMDNodeInContext(C: _LLVMContextRef, Vals: _LLVMValueRef, Count: number): _LLVMValueRef;
export declare function _LLVMMDNode(Vals: _LLVMValueRef, Count: number): _LLVMValueRef;
export declare function _LLVMBasicBlockAsValue(BB: _LLVMBasicBlockRef): _LLVMValueRef;
export declare function _LLVMValueIsBasicBlock(Val: _LLVMValueRef): _LLVMBool;
export declare function _LLVMValueAsBasicBlock(Val: _LLVMValueRef): _LLVMBasicBlockRef;
export declare function _LLVMGetBasicBlockName(BB: _LLVMBasicBlockRef): _const;
export declare function _LLVMGetBasicBlockParent(BB: _LLVMBasicBlockRef): _LLVMValueRef;
export declare function _LLVMGetBasicBlockTerminator(BB: _LLVMBasicBlockRef): _LLVMValueRef;
export declare function _LLVMCountBasicBlocks(Fn: _LLVMValueRef): _unsigned;
export declare function _LLVMGetBasicBlocks(Fn: _LLVMValueRef, BasicBlocks: _LLVMBasicBlockRef): _void;
export declare function _LLVMGetFirstBasicBlock(Fn: _LLVMValueRef): _LLVMBasicBlockRef;
export declare function _LLVMGetLastBasicBlock(Fn: _LLVMValueRef): _LLVMBasicBlockRef;
export declare function _LLVMGetNextBasicBlock(BB: _LLVMBasicBlockRef): _LLVMBasicBlockRef;
export declare function _LLVMGetPreviousBasicBlock(BB: _LLVMBasicBlockRef): _LLVMBasicBlockRef;
export declare function _LLVMGetEntryBasicBlock(Fn: _LLVMValueRef): _LLVMBasicBlockRef;
export declare function _LLVMInsertExistingBasicBlockAfterInsertBlock(Builder: _LLVMBuilderRef, BB: _LLVMBasicBlockRef): _void;
export declare function _LLVMAppendExistingBasicBlock(Fn: _LLVMValueRef, BB: _LLVMBasicBlockRef): _void;
export declare function _LLVMCreateBasicBlockInContext(C: _LLVMContextRef, Name: string): _LLVMBasicBlockRef;
export declare function _LLVMAppendBasicBlockInContext(C: _LLVMContextRef, Fn: _LLVMValueRef, Name: string): _LLVMBasicBlockRef;
export declare function _LLVMAppendBasicBlock(Fn: _LLVMValueRef, Name: string): _LLVMBasicBlockRef;
export declare function _LLVMInsertBasicBlockInContext(C: _LLVMContextRef, BB: _LLVMBasicBlockRef, Name: string): _LLVMBasicBlockRef;
export declare function _LLVMInsertBasicBlock(InsertBeforeBB: _LLVMBasicBlockRef, Name: string): _LLVMBasicBlockRef;
export declare function _LLVMDeleteBasicBlock(BB: _LLVMBasicBlockRef): _void;
export declare function _LLVMRemoveBasicBlockFromParent(BB: _LLVMBasicBlockRef): _void;
export declare function _LLVMMoveBasicBlockBefore(BB: _LLVMBasicBlockRef, MovePos: _LLVMBasicBlockRef): _void;
export declare function _LLVMMoveBasicBlockAfter(BB: _LLVMBasicBlockRef, MovePos: _LLVMBasicBlockRef): _void;
export declare function _LLVMGetFirstInstruction(BB: _LLVMBasicBlockRef): _LLVMValueRef;
export declare function _LLVMGetLastInstruction(BB: _LLVMBasicBlockRef): _LLVMValueRef;
export declare function _LLVMHasMetadata(Val: _LLVMValueRef): _int;
export declare function _LLVMGetMetadata(Val: _LLVMValueRef, KindID: number): _LLVMValueRef;
export declare function _LLVMSetMetadata(Val: _LLVMValueRef, KindID: number, Node: _LLVMValueRef): _void;
export declare function _LLVMInstructionGetAllMetadataOtherThanDebugLoc(Instr: _LLVMValueRef, NumEntries: any): _LLVMValueMetadataEntry;
export declare function _LLVMGetInstructionParent(Inst: _LLVMValueRef): _LLVMBasicBlockRef;
export declare function _LLVMGetNextInstruction(Inst: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMGetPreviousInstruction(Inst: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMInstructionRemoveFromParent(Inst: _LLVMValueRef): _void;
export declare function _LLVMInstructionEraseFromParent(Inst: _LLVMValueRef): _void;
export declare function _LLVMDeleteInstruction(Inst: _LLVMValueRef): _void;
export declare function _LLVMGetInstructionOpcode(Inst: _LLVMValueRef): _LLVMOpcode;
export declare function _LLVMGetICmpPredicate(Inst: _LLVMValueRef): _LLVMIntPredicate;
export declare function _LLVMGetFCmpPredicate(Inst: _LLVMValueRef): _LLVMRealPredicate;
export declare function _LLVMInstructionClone(Inst: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsATerminatorInst(Inst: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMGetNumArgOperands(Instr: _LLVMValueRef): _unsigned;
export declare function _LLVMSetInstructionCallConv(Instr: _LLVMValueRef, CC: number): _void;
export declare function _LLVMGetInstructionCallConv(Instr: _LLVMValueRef): _unsigned;
export declare function _LLVMSetInstrParamAlignment(Instr: _LLVMValueRef, Idx: _LLVMAttributeIndex, Align: number): _void;
export declare function _LLVMAddCallSiteAttribute(C: _LLVMValueRef, Idx: _LLVMAttributeIndex, A: _LLVMAttributeRef): _void;
export declare function _LLVMGetCallSiteAttributeCount(C: _LLVMValueRef, Idx: _LLVMAttributeIndex): _unsigned;
export declare function _LLVMGetCallSiteAttributes(C: _LLVMValueRef, Idx: _LLVMAttributeIndex, Attrs: _LLVMAttributeRef): _void;
export declare function _LLVMGetCallSiteEnumAttribute(C: _LLVMValueRef, Idx: _LLVMAttributeIndex, KindID: number): _LLVMAttributeRef;
export declare function _LLVMGetCallSiteStringAttribute(C: _LLVMValueRef, Idx: _LLVMAttributeIndex, K: string, KLen: number): _LLVMAttributeRef;
export declare function _LLVMRemoveCallSiteEnumAttribute(C: _LLVMValueRef, Idx: _LLVMAttributeIndex, KindID: number): _void;
export declare function _LLVMRemoveCallSiteStringAttribute(C: _LLVMValueRef, Idx: _LLVMAttributeIndex, K: string, KLen: number): _void;
export declare function _LLVMGetCalledFunctionType(C: _LLVMValueRef): _LLVMTypeRef;
export declare function _LLVMGetCalledValue(Instr: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMIsTailCall(CallInst: _LLVMValueRef): _LLVMBool;
export declare function _LLVMSetTailCall(CallInst: _LLVMValueRef, IsTailCall: _LLVMBool): _void;
export declare function _LLVMGetNormalDest(InvokeInst: _LLVMValueRef): _LLVMBasicBlockRef;
export declare function _LLVMGetUnwindDest(InvokeInst: _LLVMValueRef): _LLVMBasicBlockRef;
export declare function _LLVMSetNormalDest(InvokeInst: _LLVMValueRef, B: _LLVMBasicBlockRef): _void;
export declare function _LLVMSetUnwindDest(InvokeInst: _LLVMValueRef, B: _LLVMBasicBlockRef): _void;
export declare function _LLVMGetNumSuccessors(Term: _LLVMValueRef): _unsigned;
export declare function _LLVMGetSuccessor(Term: _LLVMValueRef, i: number): _LLVMBasicBlockRef;
export declare function _LLVMSetSuccessor(Term: _LLVMValueRef, i: number, block: _LLVMBasicBlockRef): _void;
export declare function _LLVMIsConditional(Branch: _LLVMValueRef): _LLVMBool;
export declare function _LLVMGetCondition(Branch: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMSetCondition(Branch: _LLVMValueRef, Cond: _LLVMValueRef): _void;
export declare function _LLVMGetSwitchDefaultDest(SwitchInstr: _LLVMValueRef): _LLVMBasicBlockRef;
export declare function _LLVMGetAllocatedType(Alloca: _LLVMValueRef): _LLVMTypeRef;
export declare function _LLVMIsInBounds(GEP: _LLVMValueRef): _LLVMBool;
export declare function _LLVMSetIsInBounds(GEP: _LLVMValueRef, InBounds: _LLVMBool): _void;
export declare function _LLVMGetGEPSourceElementType(GEP: _LLVMValueRef): _LLVMTypeRef;
export declare function _LLVMAddIncoming(PhiNode: _LLVMValueRef, IncomingValues: _LLVMValueRef, IncomingBlocks: _LLVMBasicBlockRef, Count: number): _void;
export declare function _LLVMCountIncoming(PhiNode: _LLVMValueRef): _unsigned;
export declare function _LLVMGetIncomingValue(PhiNode: _LLVMValueRef, Index: number): _LLVMValueRef;
export declare function _LLVMGetIncomingBlock(PhiNode: _LLVMValueRef, Index: number): _LLVMBasicBlockRef;
export declare function _LLVMGetNumIndices(Inst: _LLVMValueRef): _unsigned;
export declare function _LLVMGetIndices(Inst: _LLVMValueRef): _const;
export declare function _LLVMCreateBuilderInContext(C: _LLVMContextRef): _LLVMBuilderRef;
export declare function _LLVMCreateBuilder(): _LLVMBuilderRef;
export declare function _LLVMPositionBuilder(Builder: _LLVMBuilderRef, Block: _LLVMBasicBlockRef, Instr: _LLVMValueRef): _void;
export declare function _LLVMPositionBuilderBefore(Builder: _LLVMBuilderRef, Instr: _LLVMValueRef): _void;
export declare function _LLVMPositionBuilderAtEnd(Builder: _LLVMBuilderRef, Block: _LLVMBasicBlockRef): _void;
export declare function _LLVMGetInsertBlock(Builder: _LLVMBuilderRef): _LLVMBasicBlockRef;
export declare function _LLVMClearInsertionPosition(Builder: _LLVMBuilderRef): _void;
export declare function _LLVMInsertIntoBuilder(Builder: _LLVMBuilderRef, Instr: _LLVMValueRef): _void;
export declare function _LLVMInsertIntoBuilderWithName(Builder: _LLVMBuilderRef, Instr: _LLVMValueRef, Name: string): _void;
export declare function _LLVMDisposeBuilder(Builder: _LLVMBuilderRef): _void;
export declare function _LLVMGetCurrentDebugLocation2(Builder: _LLVMBuilderRef): _LLVMMetadataRef;
export declare function _LLVMSetCurrentDebugLocation2(Builder: _LLVMBuilderRef, Loc: _LLVMMetadataRef): _void;
export declare function _LLVMSetInstDebugLocation(Builder: _LLVMBuilderRef, Inst: _LLVMValueRef): _void;
export declare function _LLVMAddMetadataToInst(Builder: _LLVMBuilderRef, Inst: _LLVMValueRef): _void;
export declare function _LLVMBuilderGetDefaultFPMathTag(Builder: _LLVMBuilderRef): _LLVMMetadataRef;
export declare function _LLVMBuilderSetDefaultFPMathTag(Builder: _LLVMBuilderRef, FPMathTag: _LLVMMetadataRef): _void;
export declare function _LLVMSetCurrentDebugLocation(Builder: _LLVMBuilderRef, L: _LLVMValueRef): _void;
export declare function _LLVMGetCurrentDebugLocation(Builder: _LLVMBuilderRef): _LLVMValueRef;
export declare function _LLVMBuildRetVoid(undefined: _LLVMBuilderRef): _LLVMValueRef;
export declare function _LLVMBuildRet(undefined: _LLVMBuilderRef, V: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMBuildAggregateRet(undefined: _LLVMBuilderRef, RetVals: _LLVMValueRef, N: number): _LLVMValueRef;
export declare function _LLVMBuildBr(undefined: _LLVMBuilderRef, Dest: _LLVMBasicBlockRef): _LLVMValueRef;
export declare function _LLVMBuildCondBr(undefined: _LLVMBuilderRef, If: _LLVMValueRef, Then: _LLVMBasicBlockRef, Else: _LLVMBasicBlockRef): _LLVMValueRef;
export declare function _LLVMBuildSwitch(undefined: _LLVMBuilderRef, V: _LLVMValueRef, Else: _LLVMBasicBlockRef, NumCases: number): _LLVMValueRef;
export declare function _LLVMBuildIndirectBr(B: _LLVMBuilderRef, Addr: _LLVMValueRef, NumDests: number): _LLVMValueRef;
export declare function _LLVMBuildInvoke2(undefined: _LLVMBuilderRef, Ty: _LLVMTypeRef, Fn: _LLVMValueRef, Args: _LLVMValueRef, NumArgs: number, Then: _LLVMBasicBlockRef, Catch: _LLVMBasicBlockRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildUnreachable(undefined: _LLVMBuilderRef): _LLVMValueRef;
export declare function _LLVMBuildResume(B: _LLVMBuilderRef, Exn: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMBuildLandingPad(B: _LLVMBuilderRef, Ty: _LLVMTypeRef, PersFn: _LLVMValueRef, NumClauses: number, Name: string): _LLVMValueRef;
export declare function _LLVMBuildCleanupRet(B: _LLVMBuilderRef, CatchPad: _LLVMValueRef, BB: _LLVMBasicBlockRef): _LLVMValueRef;
export declare function _LLVMBuildCatchRet(B: _LLVMBuilderRef, CatchPad: _LLVMValueRef, BB: _LLVMBasicBlockRef): _LLVMValueRef;
export declare function _LLVMBuildCatchPad(B: _LLVMBuilderRef, ParentPad: _LLVMValueRef, Args: _LLVMValueRef, NumArgs: number, Name: string): _LLVMValueRef;
export declare function _LLVMBuildCleanupPad(B: _LLVMBuilderRef, ParentPad: _LLVMValueRef, Args: _LLVMValueRef, NumArgs: number, Name: string): _LLVMValueRef;
export declare function _LLVMBuildCatchSwitch(B: _LLVMBuilderRef, ParentPad: _LLVMValueRef, UnwindBB: _LLVMBasicBlockRef, NumHandlers: number, Name: string): _LLVMValueRef;
export declare function _LLVMAddCase(Switch: _LLVMValueRef, OnVal: _LLVMValueRef, Dest: _LLVMBasicBlockRef): _void;
export declare function _LLVMAddDestination(IndirectBr: _LLVMValueRef, Dest: _LLVMBasicBlockRef): _void;
export declare function _LLVMGetNumClauses(LandingPad: _LLVMValueRef): _unsigned;
export declare function _LLVMGetClause(LandingPad: _LLVMValueRef, Idx: number): _LLVMValueRef;
export declare function _LLVMAddClause(LandingPad: _LLVMValueRef, ClauseVal: _LLVMValueRef): _void;
export declare function _LLVMIsCleanup(LandingPad: _LLVMValueRef): _LLVMBool;
export declare function _LLVMSetCleanup(LandingPad: _LLVMValueRef, Val: _LLVMBool): _void;
export declare function _LLVMAddHandler(CatchSwitch: _LLVMValueRef, Dest: _LLVMBasicBlockRef): _void;
export declare function _LLVMGetNumHandlers(CatchSwitch: _LLVMValueRef): _unsigned;
export declare function _LLVMGetHandlers(CatchSwitch: _LLVMValueRef, Handlers: _LLVMBasicBlockRef): _void;
export declare function _LLVMGetArgOperand(Funclet: _LLVMValueRef, i: number): _LLVMValueRef;
export declare function _LLVMSetArgOperand(Funclet: _LLVMValueRef, i: number, value: _LLVMValueRef): _void;
export declare function _LLVMGetParentCatchSwitch(CatchPad: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMSetParentCatchSwitch(CatchPad: _LLVMValueRef, CatchSwitch: _LLVMValueRef): _void;
export declare function _LLVMBuildAdd(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildNSWAdd(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildNUWAdd(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFAdd(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildSub(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildNSWSub(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildNUWSub(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFSub(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildMul(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildNSWMul(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildNUWMul(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFMul(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildUDiv(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildExactUDiv(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildSDiv(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildExactSDiv(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFDiv(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildURem(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildSRem(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFRem(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildShl(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildLShr(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildAShr(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildAnd(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildOr(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildXor(undefined: _LLVMBuilderRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildBinOp(B: _LLVMBuilderRef, Op: _LLVMOpcode, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildNeg(undefined: _LLVMBuilderRef, V: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildNSWNeg(B: _LLVMBuilderRef, V: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildNUWNeg(B: _LLVMBuilderRef, V: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFNeg(undefined: _LLVMBuilderRef, V: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildNot(undefined: _LLVMBuilderRef, V: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildMalloc(undefined: _LLVMBuilderRef, Ty: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildArrayMalloc(undefined: _LLVMBuilderRef, Ty: _LLVMTypeRef, Val: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildMemSet(B: _LLVMBuilderRef, Ptr: _LLVMValueRef, Val: _LLVMValueRef, Len: _LLVMValueRef, Align: number): _LLVMValueRef;
export declare function _LLVMBuildMemCpy(B: _LLVMBuilderRef, Dst: _LLVMValueRef, DstAlign: number, Src: _LLVMValueRef, SrcAlign: number, Size: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMBuildMemMove(B: _LLVMBuilderRef, Dst: _LLVMValueRef, DstAlign: number, Src: _LLVMValueRef, SrcAlign: number, Size: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMBuildAlloca(undefined: _LLVMBuilderRef, Ty: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildArrayAlloca(undefined: _LLVMBuilderRef, Ty: _LLVMTypeRef, Val: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFree(undefined: _LLVMBuilderRef, PointerVal: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMBuildLoad2(undefined: _LLVMBuilderRef, Ty: _LLVMTypeRef, PointerVal: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildStore(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, Ptr: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMBuildGEP2(B: _LLVMBuilderRef, Ty: _LLVMTypeRef, Pointer: _LLVMValueRef, Indices: _LLVMValueRef, NumIndices: number, Name: string): _LLVMValueRef;
export declare function _LLVMBuildInBoundsGEP2(B: _LLVMBuilderRef, Ty: _LLVMTypeRef, Pointer: _LLVMValueRef, Indices: _LLVMValueRef, NumIndices: number, Name: string): _LLVMValueRef;
export declare function _LLVMBuildStructGEP2(B: _LLVMBuilderRef, Ty: _LLVMTypeRef, Pointer: _LLVMValueRef, Idx: number, Name: string): _LLVMValueRef;
export declare function _LLVMBuildGlobalString(B: _LLVMBuilderRef, Str: string, Name: string): _LLVMValueRef;
export declare function _LLVMBuildGlobalStringPtr(B: _LLVMBuilderRef, Str: string, Name: string): _LLVMValueRef;
export declare function _LLVMGetVolatile(MemoryAccessInst: _LLVMValueRef): _LLVMBool;
export declare function _LLVMSetVolatile(MemoryAccessInst: _LLVMValueRef, IsVolatile: _LLVMBool): _void;
export declare function _LLVMGetWeak(CmpXchgInst: _LLVMValueRef): _LLVMBool;
export declare function _LLVMSetWeak(CmpXchgInst: _LLVMValueRef, IsWeak: _LLVMBool): _void;
export declare function _LLVMGetOrdering(MemoryAccessInst: _LLVMValueRef): _LLVMAtomicOrdering;
export declare function _LLVMSetOrdering(MemoryAccessInst: _LLVMValueRef, Ordering: _LLVMAtomicOrdering): _void;
export declare function _LLVMGetAtomicRMWBinOp(AtomicRMWInst: _LLVMValueRef): _LLVMAtomicRMWBinOp;
export declare function _LLVMSetAtomicRMWBinOp(AtomicRMWInst: _LLVMValueRef, BinOp: _LLVMAtomicRMWBinOp): _void;
export declare function _LLVMBuildTrunc(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildZExt(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildSExt(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFPToUI(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFPToSI(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildUIToFP(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildSIToFP(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFPTrunc(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFPExt(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildPtrToInt(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildIntToPtr(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildBitCast(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildAddrSpaceCast(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildZExtOrBitCast(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildSExtOrBitCast(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildTruncOrBitCast(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildCast(B: _LLVMBuilderRef, Op: _LLVMOpcode, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildPointerCast(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildIntCast2(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, IsSigned: _LLVMBool, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFPCast(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildIntCast(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, DestTy: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMGetCastOpcode(Src: _LLVMValueRef, SrcIsSigned: _LLVMBool, DestTy: _LLVMTypeRef, DestIsSigned: _LLVMBool): _LLVMOpcode;
export declare function _LLVMBuildICmp(undefined: _LLVMBuilderRef, Op: _LLVMIntPredicate, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFCmp(undefined: _LLVMBuilderRef, Op: _LLVMRealPredicate, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildPhi(undefined: _LLVMBuilderRef, Ty: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildCall2(undefined: _LLVMBuilderRef, undefined: _LLVMTypeRef, Fn: _LLVMValueRef, Args: _LLVMValueRef, NumArgs: number, Name: string): _LLVMValueRef;
export declare function _LLVMBuildSelect(undefined: _LLVMBuilderRef, If: _LLVMValueRef, Then: _LLVMValueRef, Else: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildVAArg(undefined: _LLVMBuilderRef, List: _LLVMValueRef, Ty: _LLVMTypeRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildExtractElement(undefined: _LLVMBuilderRef, VecVal: _LLVMValueRef, Index: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildInsertElement(undefined: _LLVMBuilderRef, VecVal: _LLVMValueRef, EltVal: _LLVMValueRef, Index: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildShuffleVector(undefined: _LLVMBuilderRef, V1: _LLVMValueRef, V2: _LLVMValueRef, Mask: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildExtractValue(undefined: _LLVMBuilderRef, AggVal: _LLVMValueRef, Index: number, Name: string): _LLVMValueRef;
export declare function _LLVMBuildInsertValue(undefined: _LLVMBuilderRef, AggVal: _LLVMValueRef, EltVal: _LLVMValueRef, Index: number, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFreeze(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildIsNull(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildIsNotNull(undefined: _LLVMBuilderRef, Val: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildPtrDiff2(undefined: _LLVMBuilderRef, ElemTy: _LLVMTypeRef, LHS: _LLVMValueRef, RHS: _LLVMValueRef, Name: string): _LLVMValueRef;
export declare function _LLVMBuildFence(B: _LLVMBuilderRef, ordering: _LLVMAtomicOrdering, singleThread: _LLVMBool, Name: string): _LLVMValueRef;
export declare function _LLVMBuildAtomicRMW(B: _LLVMBuilderRef, op: _LLVMAtomicRMWBinOp, PTR: _LLVMValueRef, Val: _LLVMValueRef, ordering: _LLVMAtomicOrdering, singleThread: _LLVMBool): _LLVMValueRef;
export declare function _LLVMBuildAtomicCmpXchg(B: _LLVMBuilderRef, Ptr: _LLVMValueRef, Cmp: _LLVMValueRef, New: _LLVMValueRef, SuccessOrdering: _LLVMAtomicOrdering, FailureOrdering: _LLVMAtomicOrdering, SingleThread: _LLVMBool): _LLVMValueRef;
export declare function _LLVMGetNumMaskElements(ShuffleVectorInst: _LLVMValueRef): _unsigned;
export declare function _LLVMGetUndefMaskElem(): _int;
export declare function _LLVMGetMaskValue(ShuffleVectorInst: _LLVMValueRef, Elt: number): _int;
export declare function _LLVMIsAtomicSingleThread(AtomicInst: _LLVMValueRef): _LLVMBool;
export declare function _LLVMSetAtomicSingleThread(AtomicInst: _LLVMValueRef, SingleThread: _LLVMBool): _void;
export declare function _LLVMGetCmpXchgSuccessOrdering(CmpXchgInst: _LLVMValueRef): _LLVMAtomicOrdering;
export declare function _LLVMSetCmpXchgSuccessOrdering(CmpXchgInst: _LLVMValueRef, Ordering: _LLVMAtomicOrdering): _void;
export declare function _LLVMGetCmpXchgFailureOrdering(CmpXchgInst: _LLVMValueRef): _LLVMAtomicOrdering;
export declare function _LLVMSetCmpXchgFailureOrdering(CmpXchgInst: _LLVMValueRef, Ordering: _LLVMAtomicOrdering): _void;
export declare function _LLVMCreateModuleProviderForExistingModule(M: _LLVMModuleRef): _LLVMModuleProviderRef;
export declare function _LLVMDisposeModuleProvider(M: _LLVMModuleProviderRef): _void;
export declare function _LLVMCreateMemoryBufferWithContentsOfFile(Path: string, OutMemBuf: _LLVMMemoryBufferRef, OutMessage: string[]): _LLVMBool;
export declare function _LLVMCreateMemoryBufferWithSTDIN(OutMemBuf: _LLVMMemoryBufferRef, OutMessage: string[]): _LLVMBool;
export declare function _LLVMCreateMemoryBufferWithMemoryRange(InputData: string, InputDataLength: number, BufferName: string, RequiresNullTerminator: _LLVMBool): _LLVMMemoryBufferRef;
export declare function _LLVMCreateMemoryBufferWithMemoryRangeCopy(InputData: string, InputDataLength: number, BufferName: string): _LLVMMemoryBufferRef;
export declare function _LLVMGetBufferStart(MemBuf: _LLVMMemoryBufferRef): _const;
export declare function _LLVMGetBufferSize(MemBuf: _LLVMMemoryBufferRef): _size_t;
export declare function _LLVMDisposeMemoryBuffer(MemBuf: _LLVMMemoryBufferRef): _void;
export declare function _LLVMGetGlobalPassRegistry(): _LLVMPassRegistryRef;
export declare function _LLVMCreatePassManager(): _LLVMPassManagerRef;
export declare function _LLVMCreateFunctionPassManagerForModule(M: _LLVMModuleRef): _LLVMPassManagerRef;
export declare function _LLVMCreateFunctionPassManager(MP: _LLVMModuleProviderRef): _LLVMPassManagerRef;
export declare function _LLVMRunPassManager(PM: _LLVMPassManagerRef, M: _LLVMModuleRef): _LLVMBool;
export declare function _LLVMInitializeFunctionPassManager(FPM: _LLVMPassManagerRef): _LLVMBool;
export declare function _LLVMRunFunctionPassManager(FPM: _LLVMPassManagerRef, F: _LLVMValueRef): _LLVMBool;
export declare function _LLVMFinalizeFunctionPassManager(FPM: _LLVMPassManagerRef): _LLVMBool;
export declare function _LLVMDisposePassManager(PM: _LLVMPassManagerRef): _void;
export declare function _LLVMStartMultithreaded(): _LLVMBool;
export declare function _LLVMStopMultithreaded(): _void;
export declare function _LLVMIsMultithreaded(): _LLVMBool;
export declare function _LLVMDebugMetadataVersion(): _unsigned;
export declare function _LLVMGetModuleDebugMetadataVersion(Module: _LLVMModuleRef): _unsigned;
export declare function _LLVMStripModuleDebugInfo(Module: _LLVMModuleRef): _LLVMBool;
export declare function _LLVMCreateDIBuilderDisallowUnresolved(M: _LLVMModuleRef): _LLVMDIBuilderRef;
export declare function _LLVMCreateDIBuilder(M: _LLVMModuleRef): _LLVMDIBuilderRef;
export declare function _LLVMDisposeDIBuilder(Builder: _LLVMDIBuilderRef): _void;
export declare function _LLVMDIBuilderFinalize(Builder: _LLVMDIBuilderRef): _void;
export declare function _LLVMDIBuilderFinalizeSubprogram(Builder: _LLVMDIBuilderRef, Subprogram: _LLVMMetadataRef): _void;
export declare function _LLVMDIBuilderCreateCompileUnit(Builder: _LLVMDIBuilderRef, Lang: _LLVMDWARFSourceLanguage, FileRef: _LLVMMetadataRef, Producer: string, ProducerLen: number, isOptimized: _LLVMBool, Flags: string, FlagsLen: number, RuntimeVer: number, SplitName: string, SplitNameLen: number, Kind: _LLVMDWARFEmissionKind, DWOId: number, SplitDebugInlining: _LLVMBool, DebugInfoForProfiling: _LLVMBool, SysRoot: string, SysRootLen: number, SDK: string, SDKLen: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateFile(Builder: _LLVMDIBuilderRef, Filename: string, FilenameLen: number, Directory: string, DirectoryLen: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateModule(Builder: _LLVMDIBuilderRef, ParentScope: _LLVMMetadataRef, Name: string, NameLen: number, ConfigMacros: string, ConfigMacrosLen: number, IncludePath: string, IncludePathLen: number, APINotesFile: string, APINotesFileLen: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateNameSpace(Builder: _LLVMDIBuilderRef, ParentScope: _LLVMMetadataRef, Name: string, NameLen: number, ExportSymbols: _LLVMBool): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateFunction(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, Name: string, NameLen: number, LinkageName: string, LinkageNameLen: number, File: _LLVMMetadataRef, LineNo: number, Ty: _LLVMMetadataRef, IsLocalToUnit: _LLVMBool, IsDefinition: _LLVMBool, ScopeLine: number, Flags: _LLVMDIFlags, IsOptimized: _LLVMBool): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateLexicalBlock(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, File: _LLVMMetadataRef, Line: number, Column: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateLexicalBlockFile(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, File: _LLVMMetadataRef, Discriminator: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateImportedModuleFromNamespace(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, NS: _LLVMMetadataRef, File: _LLVMMetadataRef, Line: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateImportedModuleFromAlias(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, ImportedEntity: _LLVMMetadataRef, File: _LLVMMetadataRef, Line: number, Elements: _LLVMMetadataRef, NumElements: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateImportedModuleFromModule(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, M: _LLVMMetadataRef, File: _LLVMMetadataRef, Line: number, Elements: _LLVMMetadataRef, NumElements: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateImportedDeclaration(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, Decl: _LLVMMetadataRef, File: _LLVMMetadataRef, Line: number, Name: string, NameLen: number, Elements: _LLVMMetadataRef, NumElements: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateDebugLocation(Ctx: _LLVMContextRef, Line: number, Column: number, Scope: _LLVMMetadataRef, InlinedAt: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDILocationGetLine(Location: _LLVMMetadataRef): _unsigned;
export declare function _LLVMDILocationGetColumn(Location: _LLVMMetadataRef): _unsigned;
export declare function _LLVMDILocationGetScope(Location: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDILocationGetInlinedAt(Location: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIScopeGetFile(Scope: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIFileGetDirectory(File: _LLVMMetadataRef, Len: any): _const;
export declare function _LLVMDIFileGetFilename(File: _LLVMMetadataRef, Len: any): _const;
export declare function _LLVMDIFileGetSource(File: _LLVMMetadataRef, Len: any): _const;
export declare function _LLVMDIBuilderGetOrCreateTypeArray(Builder: _LLVMDIBuilderRef, Data: _LLVMMetadataRef, NumElements: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateSubroutineType(Builder: _LLVMDIBuilderRef, File: _LLVMMetadataRef, ParameterTypes: _LLVMMetadataRef, NumParameterTypes: number, Flags: _LLVMDIFlags): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateMacro(Builder: _LLVMDIBuilderRef, ParentMacroFile: _LLVMMetadataRef, Line: number, RecordType: _LLVMDWARFMacinfoRecordType, Name: string, NameLen: number, Value: string, ValueLen: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateTempMacroFile(Builder: _LLVMDIBuilderRef, ParentMacroFile: _LLVMMetadataRef, Line: number, File: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateEnumerator(Builder: _LLVMDIBuilderRef, Name: string, NameLen: number, Value: number, IsUnsigned: _LLVMBool): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateEnumerationType(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, Name: string, NameLen: number, File: _LLVMMetadataRef, LineNumber: number, SizeInBits: number, AlignInBits: number, Elements: _LLVMMetadataRef, NumElements: number, ClassTy: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateUnionType(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, Name: string, NameLen: number, File: _LLVMMetadataRef, LineNumber: number, SizeInBits: number, AlignInBits: number, Flags: _LLVMDIFlags, Elements: _LLVMMetadataRef, NumElements: number, RunTimeLang: number, UniqueId: string, UniqueIdLen: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateArrayType(Builder: _LLVMDIBuilderRef, Size: number, AlignInBits: number, Ty: _LLVMMetadataRef, Subscripts: _LLVMMetadataRef, NumSubscripts: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateVectorType(Builder: _LLVMDIBuilderRef, Size: number, AlignInBits: number, Ty: _LLVMMetadataRef, Subscripts: _LLVMMetadataRef, NumSubscripts: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateUnspecifiedType(Builder: _LLVMDIBuilderRef, Name: string, NameLen: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateBasicType(Builder: _LLVMDIBuilderRef, Name: string, NameLen: number, SizeInBits: number, Encoding: _LLVMDWARFTypeEncoding, Flags: _LLVMDIFlags): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreatePointerType(Builder: _LLVMDIBuilderRef, PointeeTy: _LLVMMetadataRef, SizeInBits: number, AlignInBits: number, AddressSpace: number, Name: string, NameLen: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateStructType(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, Name: string, NameLen: number, File: _LLVMMetadataRef, LineNumber: number, SizeInBits: number, AlignInBits: number, Flags: _LLVMDIFlags, DerivedFrom: _LLVMMetadataRef, Elements: _LLVMMetadataRef, NumElements: number, RunTimeLang: number, VTableHolder: _LLVMMetadataRef, UniqueId: string, UniqueIdLen: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateMemberType(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, Name: string, NameLen: number, File: _LLVMMetadataRef, LineNo: number, SizeInBits: number, AlignInBits: number, OffsetInBits: number, Flags: _LLVMDIFlags, Ty: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateStaticMemberType(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, Name: string, NameLen: number, File: _LLVMMetadataRef, LineNumber: number, Type: _LLVMMetadataRef, Flags: _LLVMDIFlags, ConstantVal: _LLVMValueRef, AlignInBits: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateMemberPointerType(Builder: _LLVMDIBuilderRef, PointeeType: _LLVMMetadataRef, ClassType: _LLVMMetadataRef, SizeInBits: number, AlignInBits: number, Flags: _LLVMDIFlags): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateObjCIVar(Builder: _LLVMDIBuilderRef, Name: string, NameLen: number, File: _LLVMMetadataRef, LineNo: number, SizeInBits: number, AlignInBits: number, OffsetInBits: number, Flags: _LLVMDIFlags, Ty: _LLVMMetadataRef, PropertyNode: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateObjCProperty(Builder: _LLVMDIBuilderRef, Name: string, NameLen: number, File: _LLVMMetadataRef, LineNo: number, GetterName: string, GetterNameLen: number, SetterName: string, SetterNameLen: number, PropertyAttributes: number, Ty: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateObjectPointerType(Builder: _LLVMDIBuilderRef, Type: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateQualifiedType(Builder: _LLVMDIBuilderRef, Tag: number, Type: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateReferenceType(Builder: _LLVMDIBuilderRef, Tag: number, Type: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateNullPtrType(Builder: _LLVMDIBuilderRef): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateTypedef(Builder: _LLVMDIBuilderRef, Type: _LLVMMetadataRef, Name: string, NameLen: number, File: _LLVMMetadataRef, LineNo: number, Scope: _LLVMMetadataRef, AlignInBits: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateInheritance(Builder: _LLVMDIBuilderRef, Ty: _LLVMMetadataRef, BaseTy: _LLVMMetadataRef, BaseOffset: number, VBPtrOffset: number, Flags: _LLVMDIFlags): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateForwardDecl(Builder: _LLVMDIBuilderRef, Tag: number, Name: string, NameLen: number, Scope: _LLVMMetadataRef, File: _LLVMMetadataRef, Line: number, RuntimeLang: number, SizeInBits: number, AlignInBits: number, UniqueIdentifier: string, UniqueIdentifierLen: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateReplaceableCompositeType(Builder: _LLVMDIBuilderRef, Tag: number, Name: string, NameLen: number, Scope: _LLVMMetadataRef, File: _LLVMMetadataRef, Line: number, RuntimeLang: number, SizeInBits: number, AlignInBits: number, Flags: _LLVMDIFlags, UniqueIdentifier: string, UniqueIdentifierLen: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateBitFieldMemberType(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, Name: string, NameLen: number, File: _LLVMMetadataRef, LineNumber: number, SizeInBits: number, OffsetInBits: number, StorageOffsetInBits: number, Flags: _LLVMDIFlags, Type: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateClassType(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, Name: string, NameLen: number, File: _LLVMMetadataRef, LineNumber: number, SizeInBits: number, AlignInBits: number, OffsetInBits: number, Flags: _LLVMDIFlags, DerivedFrom: _LLVMMetadataRef, Elements: _LLVMMetadataRef, NumElements: number, VTableHolder: _LLVMMetadataRef, TemplateParamsNode: _LLVMMetadataRef, UniqueIdentifier: string, UniqueIdentifierLen: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateArtificialType(Builder: _LLVMDIBuilderRef, Type: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDITypeGetName(DType: _LLVMMetadataRef, Length: any): _const;
export declare function _LLVMDITypeGetSizeInBits(DType: _LLVMMetadataRef): _uint64_t;
export declare function _LLVMDITypeGetOffsetInBits(DType: _LLVMMetadataRef): _uint64_t;
export declare function _LLVMDITypeGetAlignInBits(DType: _LLVMMetadataRef): _uint32_t;
export declare function _LLVMDITypeGetLine(DType: _LLVMMetadataRef): _unsigned;
export declare function _LLVMDITypeGetFlags(DType: _LLVMMetadataRef): _LLVMDIFlags;
export declare function _LLVMDIBuilderGetOrCreateSubrange(Builder: _LLVMDIBuilderRef, LowerBound: number, Count: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderGetOrCreateArray(Builder: _LLVMDIBuilderRef, Data: _LLVMMetadataRef, NumElements: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateExpression(Builder: _LLVMDIBuilderRef, Addr: any, Length: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateConstantValueExpression(Builder: _LLVMDIBuilderRef, Value: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateGlobalVariableExpression(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, Name: string, NameLen: number, Linkage: string, LinkLen: number, File: _LLVMMetadataRef, LineNo: number, Ty: _LLVMMetadataRef, LocalToUnit: _LLVMBool, Expr: _LLVMMetadataRef, Decl: _LLVMMetadataRef, AlignInBits: number): _LLVMMetadataRef;
export declare function _LLVMGetDINodeTag(MD: _LLVMMetadataRef): _uint16_t;
export declare function _LLVMDIGlobalVariableExpressionGetVariable(GVE: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIGlobalVariableExpressionGetExpression(GVE: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIVariableGetFile(Var: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIVariableGetScope(Var: _LLVMMetadataRef): _LLVMMetadataRef;
export declare function _LLVMDIVariableGetLine(Var: _LLVMMetadataRef): _unsigned;
export declare function _LLVMTemporaryMDNode(Ctx: _LLVMContextRef, Data: _LLVMMetadataRef, NumElements: number): _LLVMMetadataRef;
export declare function _LLVMDisposeTemporaryMDNode(TempNode: _LLVMMetadataRef): _void;
export declare function _LLVMMetadataReplaceAllUsesWith(TempTargetMetadata: _LLVMMetadataRef, Replacement: _LLVMMetadataRef): _void;
export declare function _LLVMDIBuilderCreateTempGlobalVariableFwdDecl(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, Name: string, NameLen: number, Linkage: string, LnkLen: number, File: _LLVMMetadataRef, LineNo: number, Ty: _LLVMMetadataRef, LocalToUnit: _LLVMBool, Decl: _LLVMMetadataRef, AlignInBits: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderInsertDeclareBefore(Builder: _LLVMDIBuilderRef, Storage: _LLVMValueRef, VarInfo: _LLVMMetadataRef, Expr: _LLVMMetadataRef, DebugLoc: _LLVMMetadataRef, Instr: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMDIBuilderInsertDeclareAtEnd(Builder: _LLVMDIBuilderRef, Storage: _LLVMValueRef, VarInfo: _LLVMMetadataRef, Expr: _LLVMMetadataRef, DebugLoc: _LLVMMetadataRef, Block: _LLVMBasicBlockRef): _LLVMValueRef;
export declare function _LLVMDIBuilderInsertDbgValueBefore(Builder: _LLVMDIBuilderRef, Val: _LLVMValueRef, VarInfo: _LLVMMetadataRef, Expr: _LLVMMetadataRef, DebugLoc: _LLVMMetadataRef, Instr: _LLVMValueRef): _LLVMValueRef;
export declare function _LLVMDIBuilderInsertDbgValueAtEnd(Builder: _LLVMDIBuilderRef, Val: _LLVMValueRef, VarInfo: _LLVMMetadataRef, Expr: _LLVMMetadataRef, DebugLoc: _LLVMMetadataRef, Block: _LLVMBasicBlockRef): _LLVMValueRef;
export declare function _LLVMDIBuilderCreateAutoVariable(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, Name: string, NameLen: number, File: _LLVMMetadataRef, LineNo: number, Ty: _LLVMMetadataRef, AlwaysPreserve: _LLVMBool, Flags: _LLVMDIFlags, AlignInBits: number): _LLVMMetadataRef;
export declare function _LLVMDIBuilderCreateParameterVariable(Builder: _LLVMDIBuilderRef, Scope: _LLVMMetadataRef, Name: string, NameLen: number, ArgNo: number, File: _LLVMMetadataRef, LineNo: number, Ty: _LLVMMetadataRef, AlwaysPreserve: _LLVMBool, Flags: _LLVMDIFlags): _LLVMMetadataRef;
export declare function _LLVMGetSubprogram(Func: _LLVMValueRef): _LLVMMetadataRef;
export declare function _LLVMSetSubprogram(Func: _LLVMValueRef, SP: _LLVMMetadataRef): _void;
export declare function _LLVMDISubprogramGetLine(Subprogram: _LLVMMetadataRef): _unsigned;
export declare function _LLVMInstructionGetDebugLoc(Inst: _LLVMValueRef): _LLVMMetadataRef;
export declare function _LLVMInstructionSetDebugLoc(Inst: _LLVMValueRef, Loc: _LLVMMetadataRef): _void;
export declare function _LLVMGetMetadataKind(Metadata: _LLVMMetadataRef): _LLVMMetadataKind;
export declare function _LLVMCreateDisasm(TripleName: string, DisInfo: any, TagType: number, GetOpInfo: _LLVMOpInfoCallback, SymbolLookUp: _LLVMSymbolLookupCallback): _LLVMDisasmContextRef;
export declare function _LLVMCreateDisasmCPU(Triple: string, CPU: string, DisInfo: any, TagType: number, GetOpInfo: _LLVMOpInfoCallback, SymbolLookUp: _LLVMSymbolLookupCallback): _LLVMDisasmContextRef;
export declare function _LLVMCreateDisasmCPUFeatures(Triple: string, CPU: string, Features: string, DisInfo: any, TagType: number, GetOpInfo: _LLVMOpInfoCallback, SymbolLookUp: _LLVMSymbolLookupCallback): _LLVMDisasmContextRef;
export declare function _LLVMSetDisasmOptions(DC: _LLVMDisasmContextRef, Options: number): _int;
export declare function _LLVMDisasmDispose(DC: _LLVMDisasmContextRef): _void;
export declare function _LLVMDisasmInstruction(DC: _LLVMDisasmContextRef, Bytes: _uint8_t, BytesSize: number, PC: number, OutString: any, OutStringSize: number): _size_t;
export declare function _LLVMGetErrorTypeId(Err: _LLVMErrorRef): _LLVMErrorTypeId;
export declare function _LLVMConsumeError(Err: _LLVMErrorRef): _void;
export declare function _LLVMGetErrorMessage(Err: _LLVMErrorRef): _char;
export declare function _LLVMDisposeErrorMessage(ErrMsg: any): _void;
export declare function _LLVMGetStringErrorTypeId(): _LLVMErrorTypeId;
export declare function _LLVMCreateStringError(ErrMsg: string): _LLVMErrorRef;
export declare function _LLVMInitializeWebAssemblyTargetInfo(): _void;
export declare function _LLVMInitializeWebAssemblyTarget(): _void;
export declare function _LLVMInitializeWebAssemblyTargetMC(): _void;
export declare function _LLVMInitializeWebAssemblyAsmPrinter(): _void;
export declare function _LLVMInitializeWebAssemblyAsmParser(): _void;
export declare function _LLVMInitializeWebAssemblyDisassembler(): _void;
export declare function _LLVMGetModuleDataLayout(M: _LLVMModuleRef): _LLVMTargetDataRef;
export declare function _LLVMSetModuleDataLayout(M: _LLVMModuleRef, DL: _LLVMTargetDataRef): _void;
export declare function _LLVMCreateTargetData(StringRep: string): _LLVMTargetDataRef;
export declare function _LLVMDisposeTargetData(TD: _LLVMTargetDataRef): _void;
export declare function _LLVMAddTargetLibraryInfo(TLI: _LLVMTargetLibraryInfoRef, PM: _LLVMPassManagerRef): _void;
export declare function _LLVMCopyStringRepOfTargetData(TD: _LLVMTargetDataRef): _char;
export declare function _LLVMByteOrder(TD: _LLVMTargetDataRef): _enum;
export declare function _LLVMPointerSize(TD: _LLVMTargetDataRef): _unsigned;
export declare function _LLVMPointerSizeForAS(TD: _LLVMTargetDataRef, AS: number): _unsigned;
export declare function _LLVMIntPtrType(TD: _LLVMTargetDataRef): _LLVMTypeRef;
export declare function _LLVMIntPtrTypeForAS(TD: _LLVMTargetDataRef, AS: number): _LLVMTypeRef;
export declare function _LLVMIntPtrTypeInContext(C: _LLVMContextRef, TD: _LLVMTargetDataRef): _LLVMTypeRef;
export declare function _LLVMIntPtrTypeForASInContext(C: _LLVMContextRef, TD: _LLVMTargetDataRef, AS: number): _LLVMTypeRef;
export declare function _LLVMSizeOfTypeInBits(TD: _LLVMTargetDataRef, Ty: _LLVMTypeRef): _unsigned;
export declare function _LLVMStoreSizeOfType(TD: _LLVMTargetDataRef, Ty: _LLVMTypeRef): _unsigned;
export declare function _LLVMABISizeOfType(TD: _LLVMTargetDataRef, Ty: _LLVMTypeRef): _unsigned;
export declare function _LLVMABIAlignmentOfType(TD: _LLVMTargetDataRef, Ty: _LLVMTypeRef): _unsigned;
export declare function _LLVMCallFrameAlignmentOfType(TD: _LLVMTargetDataRef, Ty: _LLVMTypeRef): _unsigned;
export declare function _LLVMPreferredAlignmentOfType(TD: _LLVMTargetDataRef, Ty: _LLVMTypeRef): _unsigned;
export declare function _LLVMPreferredAlignmentOfGlobal(TD: _LLVMTargetDataRef, GlobalVar: _LLVMValueRef): _unsigned;
export declare function _LLVMElementAtOffset(TD: _LLVMTargetDataRef, StructTy: _LLVMTypeRef, Offset: number): _unsigned;
export declare function _LLVMOffsetOfElement(TD: _LLVMTargetDataRef, StructTy: _LLVMTypeRef, Element: number): _unsigned;
export declare function _LLVMGetFirstTarget(): _LLVMTargetRef;
export declare function _LLVMGetNextTarget(T: _LLVMTargetRef): _LLVMTargetRef;
export declare function _LLVMGetTargetFromName(Name: string): _LLVMTargetRef;
export declare function _LLVMGetTargetFromTriple(Triple: string, T: _LLVMTargetRef, ErrorMessage: string[]): _LLVMBool;
export declare function _LLVMGetTargetName(T: _LLVMTargetRef): _const;
export declare function _LLVMGetTargetDescription(T: _LLVMTargetRef): _const;
export declare function _LLVMTargetHasJIT(T: _LLVMTargetRef): _LLVMBool;
export declare function _LLVMTargetHasTargetMachine(T: _LLVMTargetRef): _LLVMBool;
export declare function _LLVMTargetHasAsmBackend(T: _LLVMTargetRef): _LLVMBool;
export declare function _LLVMCreateTargetMachine(T: _LLVMTargetRef, Triple: string, CPU: string, Features: string, Level: _LLVMCodeGenOptLevel, Reloc: _LLVMRelocMode, CodeModel: _LLVMCodeModel): _LLVMTargetMachineRef;
export declare function _LLVMDisposeTargetMachine(T: _LLVMTargetMachineRef): _void;
export declare function _LLVMGetTargetMachineTarget(T: _LLVMTargetMachineRef): _LLVMTargetRef;
export declare function _LLVMGetTargetMachineTriple(T: _LLVMTargetMachineRef): _char;
export declare function _LLVMGetTargetMachineCPU(T: _LLVMTargetMachineRef): _char;
export declare function _LLVMGetTargetMachineFeatureString(T: _LLVMTargetMachineRef): _char;
export declare function _LLVMCreateTargetDataLayout(T: _LLVMTargetMachineRef): _LLVMTargetDataRef;
export declare function _LLVMSetTargetMachineAsmVerbosity(T: _LLVMTargetMachineRef, VerboseAsm: _LLVMBool): _void;
export declare function _LLVMTargetMachineEmitToFile(T: _LLVMTargetMachineRef, M: _LLVMModuleRef, Filename: string, codegen: _LLVMCodeGenFileType, ErrorMessage: string[]): _LLVMBool;
export declare function _LLVMTargetMachineEmitToMemoryBuffer(T: _LLVMTargetMachineRef, M: _LLVMModuleRef, codegen: _LLVMCodeGenFileType, ErrorMessage: string[], OutMemBuf: _LLVMMemoryBufferRef): _LLVMBool;
export declare function _LLVMGetDefaultTargetTriple(): _char;
export declare function _LLVMNormalizeTargetTriple(triple: string): _char;
export declare function _LLVMGetHostCPUName(): _char;
export declare function _LLVMGetHostCPUFeatures(): _char;
export declare function _LLVMAddAnalysisPasses(T: _LLVMTargetMachineRef, PM: _LLVMPassManagerRef): _void;
export declare function _LLVMLinkInMCJIT(): _void;
export declare function _LLVMLinkInInterpreter(): _void;
export declare function _LLVMCreateGenericValueOfInt(Ty: _LLVMTypeRef, N: number, IsSigned: _LLVMBool): _LLVMGenericValueRef;
export declare function _LLVMCreateGenericValueOfPointer(P: any): _LLVMGenericValueRef;
export declare function _LLVMCreateGenericValueOfFloat(Ty: _LLVMTypeRef, N: number): _LLVMGenericValueRef;
export declare function _LLVMGenericValueIntWidth(GenValRef: _LLVMGenericValueRef): _unsigned;
export declare function _LLVMGenericValueToInt(GenVal: _LLVMGenericValueRef, IsSigned: _LLVMBool): _unsigned;
export declare function _LLVMGenericValueToPointer(GenVal: _LLVMGenericValueRef): _void;
export declare function _LLVMGenericValueToFloat(TyRef: _LLVMTypeRef, GenVal: _LLVMGenericValueRef): _double;
export declare function _LLVMDisposeGenericValue(GenVal: _LLVMGenericValueRef): _void;
export declare function _LLVMCreateExecutionEngineForModule(OutEE: _LLVMExecutionEngineRef, M: _LLVMModuleRef, OutError: string[]): _LLVMBool;
export declare function _LLVMCreateInterpreterForModule(OutInterp: _LLVMExecutionEngineRef, M: _LLVMModuleRef, OutError: string[]): _LLVMBool;
export declare function _LLVMCreateJITCompilerForModule(OutJIT: _LLVMExecutionEngineRef, M: _LLVMModuleRef, OptLevel: number, OutError: string[]): _LLVMBool;
export declare function _LLVMInitializeMCJITCompilerOptions(Options: any, SizeOfOptions: number): _void;
export declare function _LLVMCreateMCJITCompilerForModule(OutJIT: _LLVMExecutionEngineRef, M: _LLVMModuleRef, Options: any, SizeOfOptions: number, OutError: string[]): _LLVMBool;
export declare function _LLVMDisposeExecutionEngine(EE: _LLVMExecutionEngineRef): _void;
export declare function _LLVMRunStaticConstructors(EE: _LLVMExecutionEngineRef): _void;
export declare function _LLVMRunStaticDestructors(EE: _LLVMExecutionEngineRef): _void;
export declare function _LLVMRunFunctionAsMain(EE: _LLVMExecutionEngineRef, F: _LLVMValueRef, ArgC: number, ArgV: any, EnvP: any): _int;
export declare function _LLVMRunFunction(EE: _LLVMExecutionEngineRef, F: _LLVMValueRef, NumArgs: number, Args: _LLVMGenericValueRef): _LLVMGenericValueRef;
export declare function _LLVMFreeMachineCodeForFunction(EE: _LLVMExecutionEngineRef, F: _LLVMValueRef): _void;
export declare function _LLVMAddModule(EE: _LLVMExecutionEngineRef, M: _LLVMModuleRef): _void;
export declare function _LLVMRemoveModule(EE: _LLVMExecutionEngineRef, M: _LLVMModuleRef, OutMod: _LLVMModuleRef, OutError: string[]): _LLVMBool;
export declare function _LLVMFindFunction(EE: _LLVMExecutionEngineRef, Name: string, OutFn: _LLVMValueRef): _LLVMBool;
export declare function _LLVMRecompileAndRelinkFunction(EE: _LLVMExecutionEngineRef, Fn: _LLVMValueRef): _void;
export declare function _LLVMGetExecutionEngineTargetData(EE: _LLVMExecutionEngineRef): _LLVMTargetDataRef;
export declare function _LLVMGetExecutionEngineTargetMachine(EE: _LLVMExecutionEngineRef): _LLVMTargetMachineRef;
export declare function _LLVMAddGlobalMapping(EE: _LLVMExecutionEngineRef, Global: _LLVMValueRef, Addr: any): _void;
export declare function _LLVMGetPointerToGlobal(EE: _LLVMExecutionEngineRef, Global: _LLVMValueRef): _void;
export declare function _LLVMGetGlobalValueAddress(EE: _LLVMExecutionEngineRef, Name: string): _uint64_t;
export declare function _LLVMGetFunctionAddress(EE: _LLVMExecutionEngineRef, Name: string): _uint64_t;
export declare function _LLVMExecutionEngineGetErrMsg(EE: _LLVMExecutionEngineRef, OutError: string[]): _LLVMBool;
export declare function _LLVMCreateSimpleMCJITMemoryManager(Opaque: any, AllocateCodeSection: _LLVMMemoryManagerAllocateCodeSectionCallback, AllocateDataSection: _LLVMMemoryManagerAllocateDataSectionCallback, FinalizeMemory: _LLVMMemoryManagerFinalizeMemoryCallback, Destroy: _LLVMMemoryManagerDestroyCallback): _LLVMMCJITMemoryManagerRef;
export declare function _LLVMDisposeMCJITMemoryManager(MM: _LLVMMCJITMemoryManagerRef): _void;
export declare function _LLVMCreateGDBRegistrationListener(): _LLVMJITEventListenerRef;
export declare function _LLVMCreateIntelJITEventListener(): _LLVMJITEventListenerRef;
export declare function _LLVMCreateOProfileJITEventListener(): _LLVMJITEventListenerRef;
export declare function _LLVMCreatePerfJITEventListener(): _LLVMJITEventListenerRef;
export declare function _LLVMInitializeCore(R: _LLVMPassRegistryRef): _void;
export declare function _LLVMInitializeTransformUtils(R: _LLVMPassRegistryRef): _void;
export declare function _LLVMInitializeScalarOpts(R: _LLVMPassRegistryRef): _void;
export declare function _LLVMInitializeVectorization(R: _LLVMPassRegistryRef): _void;
export declare function _LLVMInitializeInstCombine(R: _LLVMPassRegistryRef): _void;
export declare function _LLVMInitializeIPO(R: _LLVMPassRegistryRef): _void;
export declare function _LLVMInitializeAnalysis(R: _LLVMPassRegistryRef): _void;
export declare function _LLVMInitializeIPA(R: _LLVMPassRegistryRef): _void;
export declare function _LLVMInitializeCodeGen(R: _LLVMPassRegistryRef): _void;
export declare function _LLVMInitializeTarget(R: _LLVMPassRegistryRef): _void;
export declare function _LLVMParseIRInContext(ContextRef: _LLVMContextRef, MemBuf: _LLVMMemoryBufferRef, OutM: _LLVMModuleRef, OutMessage: string[]): _LLVMBool;
export declare function _LLVMLinkModules2(Dest: _LLVMModuleRef, Src: _LLVMModuleRef): _LLVMBool;
export declare function _LLVMCreateBinary(MemBuf: _LLVMMemoryBufferRef, Context: _LLVMContextRef, ErrorMessage: string[]): _LLVMBinaryRef;
export declare function _LLVMDisposeBinary(BR: _LLVMBinaryRef): _void;
export declare function _LLVMBinaryCopyMemoryBuffer(BR: _LLVMBinaryRef): _LLVMMemoryBufferRef;
export declare function _LLVMBinaryGetType(BR: _LLVMBinaryRef): _LLVMBinaryType;
export declare function _LLVMMachOUniversalBinaryCopyObjectForArch(BR: _LLVMBinaryRef, Arch: string, ArchLen: number, ErrorMessage: string[]): _LLVMBinaryRef;
export declare function _LLVMObjectFileCopySectionIterator(BR: _LLVMBinaryRef): _LLVMSectionIteratorRef;
export declare function _LLVMObjectFileIsSectionIteratorAtEnd(BR: _LLVMBinaryRef, SI: _LLVMSectionIteratorRef): _LLVMBool;
export declare function _LLVMObjectFileCopySymbolIterator(BR: _LLVMBinaryRef): _LLVMSymbolIteratorRef;
export declare function _LLVMObjectFileIsSymbolIteratorAtEnd(BR: _LLVMBinaryRef, SI: _LLVMSymbolIteratorRef): _LLVMBool;
export declare function _LLVMDisposeSectionIterator(SI: _LLVMSectionIteratorRef): _void;
export declare function _LLVMMoveToNextSection(SI: _LLVMSectionIteratorRef): _void;
export declare function _LLVMMoveToContainingSection(Sect: _LLVMSectionIteratorRef, Sym: _LLVMSymbolIteratorRef): _void;
export declare function _LLVMDisposeSymbolIterator(SI: _LLVMSymbolIteratorRef): _void;
export declare function _LLVMMoveToNextSymbol(SI: _LLVMSymbolIteratorRef): _void;
export declare function _LLVMGetSectionName(SI: _LLVMSectionIteratorRef): _const;
export declare function _LLVMGetSectionSize(SI: _LLVMSectionIteratorRef): _uint64_t;
export declare function _LLVMGetSectionContents(SI: _LLVMSectionIteratorRef): _const;
export declare function _LLVMGetSectionAddress(SI: _LLVMSectionIteratorRef): _uint64_t;
export declare function _LLVMGetSectionContainsSymbol(SI: _LLVMSectionIteratorRef, Sym: _LLVMSymbolIteratorRef): _LLVMBool;
export declare function _LLVMGetRelocations(Section: _LLVMSectionIteratorRef): _LLVMRelocationIteratorRef;
export declare function _LLVMDisposeRelocationIterator(RI: _LLVMRelocationIteratorRef): _void;
export declare function _LLVMIsRelocationIteratorAtEnd(Section: _LLVMSectionIteratorRef, RI: _LLVMRelocationIteratorRef): _LLVMBool;
export declare function _LLVMMoveToNextRelocation(RI: _LLVMRelocationIteratorRef): _void;
export declare function _LLVMGetSymbolName(SI: _LLVMSymbolIteratorRef): _const;
export declare function _LLVMGetSymbolAddress(SI: _LLVMSymbolIteratorRef): _uint64_t;
export declare function _LLVMGetSymbolSize(SI: _LLVMSymbolIteratorRef): _uint64_t;
export declare function _LLVMGetRelocationOffset(RI: _LLVMRelocationIteratorRef): _uint64_t;
export declare function _LLVMGetRelocationSymbol(RI: _LLVMRelocationIteratorRef): _LLVMSymbolIteratorRef;
export declare function _LLVMGetRelocationType(RI: _LLVMRelocationIteratorRef): _uint64_t;
export declare function _LLVMGetRelocationTypeName(RI: _LLVMRelocationIteratorRef): _const;
export declare function _LLVMGetRelocationValueString(RI: _LLVMRelocationIteratorRef): _const;
export declare function _LLVMCreateObjectFile(MemBuf: _LLVMMemoryBufferRef): _LLVMObjectFileRef;
export declare function _LLVMDisposeObjectFile(ObjectFile: _LLVMObjectFileRef): _void;
export declare function _LLVMGetSections(ObjectFile: _LLVMObjectFileRef): _LLVMSectionIteratorRef;
export declare function _LLVMIsSectionIteratorAtEnd(ObjectFile: _LLVMObjectFileRef, SI: _LLVMSectionIteratorRef): _LLVMBool;
export declare function _LLVMGetSymbols(ObjectFile: _LLVMObjectFileRef): _LLVMSymbolIteratorRef;
export declare function _LLVMIsSymbolIteratorAtEnd(ObjectFile: _LLVMObjectFileRef, SI: _LLVMSymbolIteratorRef): _LLVMBool;
export declare function _LLVMLoadLibraryPermanently(Filename: string): _LLVMBool;
export declare function _LLVMParseCommandLineOptions(argc: number, argv: any, Overview: string): _void;
export declare function _LLVMSearchForAddressOfSymbol(symbolName: string): _void;
export declare function _LLVMAddSymbol(symbolName: string, symbolValue: any): _void;


export function lower(str: string): LLVMStringRef {
  str += " ";
  const length = Buffer.byteLength(str);
  const ptr = LLVM._malloc<"LLVMStringRef">(length);
  Buffer.from(LLVM.HEAPU8.buffer, ptr).write(str, "utf-8");
  return ptr;
}

export function lift(ptr: Pointer<"LLVMStringRef">): string {
  const index = LLVM.HEAPU8.indexOf(0, ptr);
  return Buffer.from(LLVM.HEAPU8.buffer).toString("utf-8", ptr, index);
}

export function lowerTypeArray(elements: LLVMTypeRef[]): Pointer<LLVMTypeRef> {
  const elementCount = elements.length;
  const ptr = LLVM._malloc<LLVMTypeRef>(elementCount << 2);
  for (let i = 0; i < elementCount; i++) {
    LLVM.HEAPU32[ptr >>> 2] = elements[i];
  }
  return ptr;
}

